import { CameraView, useCameraPermissions } from "expo-camera";
import { useState, useEffect, useRef } from "react";
import { Button, StyleSheet, Text, TouchableOpacity, View } from "react-native";
import { Video } from "expo-av";
import { SafeAreaView } from "react-native-safe-area-context";

enum CameraType {
  BACK = "back",
  FRONT = "front",
}
enum ResizeMode{
    CONTAIN = "contain",
    COVER = "cover",
    STRETCH = "stretch",
    CENTER = "center",
}

export default function App() {
  const [facing, setFacing] = useState(CameraType.BACK);
  const [permission, requestPermission] = useCameraPermissions();
  const [isRecording, setIsRecording] = useState(false);
  const [video, setVideo] = useState<string | undefined>();
  const cameraRef = useRef<CameraView | null>(null);


  if (!permission) {
    // Camera permissions are still loading.
    return <View />;
  }

  if (!permission.granted) {
    // Camera permissions are not granted yet.
    return (
      <View style={styles.container}>
        <Text style={{ textAlign: "center" }}>
          We need your permission to show the camera
        </Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraFacing() {
    setFacing((current) =>
      current === CameraType.BACK ? CameraType.FRONT : CameraType.BACK
    );
  }

  async function recordVideo() {
    setIsRecording(true);
    if (cameraRef.current) {
      let options = {
        quality: "720p",
        maxDuration: 5,
        mute: true,
      };
      try {
        const recordedVideo = await cameraRef.current.recordAsync(options);
        setVideo(recordedVideo?.uri);
        console.log("Recorded video", recordedVideo);
      } catch (error) {
        console.error("Error recording video", error);
      } finally {
        setIsRecording(false);
      }
    }
  }
  async function stopRecording() {
    if (cameraRef.current && isRecording) {
      setIsRecording(false);
      cameraRef.current.stopRecording();
    }
  }

  if (video) {
    return (
      <SafeAreaView style={styles.container}>
        <Video
          source={{ uri: video }}
          style={styles.video}
          useNativeControls
          isLooping
        />
      </SafeAreaView>
    );
  }

  return (
    <View style={styles.container}>
      <CameraView style={styles.camera} facing={facing} ref={cameraRef}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={isRecording ? stopRecording : recordVideo}>
            <Text style={styles.text}>
              {isRecording ? "Stop recording"  : "Start recording"}
            </Text>
          </TouchableOpacity>
        </View>
      </CameraView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    flexDirection: "row",
    backgroundColor: "transparent",
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: "flex-end",
    alignItems: "center",
  },
  text: {
    fontSize: 24,
    fontWeight: "bold",
    color: "white",
  },
  video:{
    flex: 1,
    alignSelf: "stretch",
  }
});
