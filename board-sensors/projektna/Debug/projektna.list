
projektna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e084  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800e218  0800e218  0000f218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e610  0800e610  00010358  2**0
                  CONTENTS
  4 .ARM          00000008  0800e610  0800e610  0000f610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e618  0800e618  00010358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e618  0800e618  0000f618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e61c  0800e61c  0000f61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800e620  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010358  2**0
                  CONTENTS
 10 .bss          000013e8  20000358  20000358  00010358  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001740  20001740  00010358  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010358  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133f4  00000000  00000000  00010388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035dd  00000000  00000000  0002377c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00026d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c79  00000000  00000000  00027df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ce0  00000000  00000000  00028a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185a7  00000000  00000000  00049751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b29c5  00000000  00000000  00061cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001146bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005524  00000000  00000000  00114700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00119c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e1fc 	.word	0x0800e1fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800e1fc 	.word	0x0800e1fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <i2c1_pisiRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	b299      	uxth	r1, r3
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	230a      	movs	r3, #10
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	1d7b      	adds	r3, r7, #5
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <i2c1_pisiRegister+0x40>)
 8000c78:	f001 fa66 	bl	8002148 <HAL_I2C_Mem_Write>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000374 	.word	0x20000374

08000c8c <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af04      	add	r7, sp, #16
 8000c92:	603a      	str	r2, [r7, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000ca2:	797b      	ldrb	r3, [r7, #5]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d906      	bls.n	8000cb6 <i2c1_beriRegistre+0x2a>
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b19      	cmp	r3, #25
 8000cac:	d103      	bne.n	8000cb6 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cb4:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	797a      	ldrb	r2, [r7, #5]
 8000cca:	9202      	str	r2, [sp, #8]
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <i2c1_beriRegistre+0x58>)
 8000cd8:	f001 fb4a 	bl	8002370 <HAL_I2C_Mem_Read>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000374 	.word	0x20000374

08000ce8 <initLSM303DLHC>:

void initLSM303DLHC()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f000 feae 	bl	8001a50 <HAL_Delay>

	// Old sensor - 0x73
	i2c1_pisiRegister(0x1E, 0x4F, 0x73);
 8000cf4:	2273      	movs	r2, #115	@ 0x73
 8000cf6:	214f      	movs	r1, #79	@ 0x4f
 8000cf8:	201e      	movs	r0, #30
 8000cfa:	f7ff ffa5 	bl	8000c48 <i2c1_pisiRegister>
	HAL_Delay(100);
 8000cfe:	2064      	movs	r0, #100	@ 0x64
 8000d00:	f000 fea6 	bl	8001a50 <HAL_Delay>

	uint8_t CTRL_REG1_A = 0x20;
 8000d04:	2320      	movs	r3, #32
 8000d06:	71fb      	strb	r3, [r7, #7]
	uint8_t CTRL_REG3_A = 0x22;
 8000d08:	2322      	movs	r3, #34	@ 0x22
 8000d0a:	71bb      	strb	r3, [r7, #6]
	uint8_t CTRL_REG4_A = 0x23;
 8000d0c:	2323      	movs	r3, #35	@ 0x23
 8000d0e:	717b      	strb	r3, [r7, #5]

	i2c1_pisiRegister(0x19, CTRL_REG1_A, 0x47); // 01000111 - 50Hz, XYZ enabled
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2247      	movs	r2, #71	@ 0x47
 8000d14:	4619      	mov	r1, r3
 8000d16:	2019      	movs	r0, #25
 8000d18:	f7ff ff96 	bl	8000c48 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, CTRL_REG4_A, 0x90); // 10010000 - Update after reading, +-4g
 8000d1c:	797b      	ldrb	r3, [r7, #5]
 8000d1e:	2290      	movs	r2, #144	@ 0x90
 8000d20:	4619      	mov	r1, r3
 8000d22:	2019      	movs	r0, #25
 8000d24:	f7ff ff90 	bl	8000c48 <i2c1_pisiRegister>
	i2c1_pisiRegister(0x19, CTRL_REG3_A, 0x10); // 00010000 - Data ready interrupt
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	2210      	movs	r2, #16
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	2019      	movs	r0, #25
 8000d30:	f7ff ff8a 	bl	8000c48 <i2c1_pisiRegister>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <convertToG>:

float convertToG(int16_t rawValue) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
    // +-4g -> 8000 / 65535 = 0.122
    return (rawValue * 0.122f) / 1000;
 8000d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d52:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000d74 <convertToG+0x38>
 8000d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d5a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000d78 <convertToG+0x3c>
 8000d5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d62:	eef0 7a66 	vmov.f32	s15, s13
}
 8000d66:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	3df9db23 	.word	0x3df9db23
 8000d78:	447a0000 	.word	0x447a0000

08000d7c <pavza>:

// Pavza, s katero omogocimo pravilno delovanje avtomatskega testa
void pavza(){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
	for(counter=0; counter<600; counter++){
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	e003      	b.n	8000d94 <pavza+0x18>
		asm("nop");
 8000d8c:	bf00      	nop
	for(counter=0; counter<600; counter++){
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3301      	adds	r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000d9a:	d3f7      	bcc.n	8000d8c <pavza+0x10>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <spi1_beriRegister>:

uint8_t spi1_beriRegister(uint8_t reg)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	uint16_t buf_out, buf_in;
	reg |= 0x80; // najpomembnejsi bit na 1
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000dbc:	71fb      	strb	r3, [r7, #7]
	buf_out = reg; // little endian, se postavi na pravo mesto ....
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4815      	ldr	r0, [pc, #84]	@ (8000e20 <spi1_beriRegister+0x74>)
 8000dca:	f001 f8f1 	bl	8001fb0 <HAL_GPIO_WritePin>
	pavza();
 8000dce:	f7ff ffd5 	bl	8000d7c <pavza>
	//HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&buf_out, (uint8_t*)&buf_in, 2, 2); // blocking posiljanje ....
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[0], &((uint8_t*)&buf_in)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8000dd2:	f107 020c 	add.w	r2, r7, #12
 8000dd6:	f107 010e 	add.w	r1, r7, #14
 8000dda:	2302      	movs	r3, #2
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2301      	movs	r3, #1
 8000de0:	4810      	ldr	r0, [pc, #64]	@ (8000e24 <spi1_beriRegister+0x78>)
 8000de2:	f005 fb16 	bl	8006412 <HAL_SPI_TransmitReceive>
	pavza();
 8000de6:	f7ff ffc9 	bl	8000d7c <pavza>
	HAL_SPI_TransmitReceive(&hspi1, &((uint8_t*)&buf_out)[1], &((uint8_t*)&buf_in)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8000dea:	f107 010e 	add.w	r1, r7, #14
 8000dee:	3101      	adds	r1, #1
 8000df0:	f107 020c 	add.w	r2, r7, #12
 8000df4:	3201      	adds	r2, #1
 8000df6:	2302      	movs	r3, #2
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <spi1_beriRegister+0x78>)
 8000dfe:	f005 fb08 	bl	8006412 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2108      	movs	r1, #8
 8000e06:	4806      	ldr	r0, [pc, #24]	@ (8000e20 <spi1_beriRegister+0x74>)
 8000e08:	f001 f8d2 	bl	8001fb0 <HAL_GPIO_WritePin>
	pavza();
 8000e0c:	f7ff ffb6 	bl	8000d7c <pavza>
	return buf_in >> 8; // little endian...
 8000e10:	89bb      	ldrh	r3, [r7, #12]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	b2db      	uxtb	r3, r3
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	48001000 	.word	0x48001000
 8000e24:	200003c8 	.word	0x200003c8

08000e28 <spi1_pisiRegister>:

void spi1_pisiRegister(uint8_t reg, uint8_t vrednost)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	4613      	mov	r3, r2
 8000e36:	71bb      	strb	r3, [r7, #6]
	uint16_t buf_out;
	buf_out = reg | (vrednost<<8); // little endian, se postavi na pravo mesto ....
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	4810      	ldr	r0, [pc, #64]	@ (8000e90 <spi1_pisiRegister+0x68>)
 8000e50:	f001 f8ae 	bl	8001fb0 <HAL_GPIO_WritePin>
	pavza();
 8000e54:	f7ff ff92 	bl	8000d7c <pavza>
	//HAL_SPI_Transmit(&hspi1, (uint8_t*)&buf_out, 2, 2); // blocking posiljanje ....
	HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[0], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8000e58:	f107 010e 	add.w	r1, r7, #14
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	2201      	movs	r2, #1
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <spi1_pisiRegister+0x6c>)
 8000e62:	f005 f82a 	bl	8005eba <HAL_SPI_Transmit>
	pavza();
 8000e66:	f7ff ff89 	bl	8000d7c <pavza>
	HAL_SPI_Transmit(&hspi1, &((uint8_t*)&buf_out)[1], 1, 2); // razbito na dva dela, da se podaljsa cas in omogoci pravilno delovanje testa
 8000e6a:	f107 010e 	add.w	r1, r7, #14
 8000e6e:	3101      	adds	r1, #1
 8000e70:	2302      	movs	r3, #2
 8000e72:	2201      	movs	r2, #1
 8000e74:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <spi1_pisiRegister+0x6c>)
 8000e76:	f005 f820 	bl	8005eba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <spi1_pisiRegister+0x68>)
 8000e80:	f001 f896 	bl	8001fb0 <HAL_GPIO_WritePin>
	pavza();
 8000e84:	f7ff ff7a 	bl	8000d7c <pavza>
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	48001000 	.word	0x48001000
 8000e94:	200003c8 	.word	0x200003c8

08000e98 <spi1_beriRegistre>:

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	71bb      	strb	r3, [r7, #6]
	reg |= 0xC0; // najpomembnejsa bita na 1
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	480f      	ldr	r0, [pc, #60]	@ (8000ef4 <spi1_beriRegistre+0x5c>)
 8000eb8:	f001 f87a 	bl	8001fb0 <HAL_GPIO_WritePin>
	pavza();
 8000ebc:	f7ff ff5e 	bl	8000d7c <pavza>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 8000ec0:	1df9      	adds	r1, r7, #7
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <spi1_beriRegistre+0x60>)
 8000ec8:	f004 fff7 	bl	8005eba <HAL_SPI_Transmit>
	pavza();
 8000ecc:	f7ff ff56 	bl	8000d7c <pavza>
	HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	4807      	ldr	r0, [pc, #28]	@ (8000ef8 <spi1_beriRegistre+0x60>)
 8000eda:	f005 f963 	bl	80061a4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <spi1_beriRegistre+0x5c>)
 8000ee4:	f001 f864 	bl	8001fb0 <HAL_GPIO_WritePin>
	pavza();
 8000ee8:	f7ff ff48 	bl	8000d7c <pavza>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	48001000 	.word	0x48001000
 8000ef8:	200003c8 	.word	0x200003c8
 8000efc:	00000000 	.word	0x00000000

08000f00 <pretvori_v_dps>:

int16_t spi1_preberiTemperaturo() {
	return (int16_t)spi1_beriRegister(0x26); // Register za temperaturo
}

float pretvori_v_dps(int16_t raw_value) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	return raw_value * 0.0175;
 8000f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fb08 	bl	8000524 <__aeabi_i2d>
 8000f14:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f40 <pretvori_v_dps+0x40>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	f7ff fb6d 	bl	80005f8 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff fe3f 	bl	8000ba8 <__aeabi_d2f>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	ee07 3a90 	vmov	s15, r3
}
 8000f30:	eeb0 0a67 	vmov.f32	s0, s15
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	f3af 8000 	nop.w
 8000f40:	1eb851ec 	.word	0x1eb851ec
 8000f44:	3f91eb85 	.word	0x3f91eb85

08000f48 <initL3GD20>:

void initL3GD20()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
	// preverimo ali smo "poklicali" pravi senzor
	uint8_t cip = spi1_beriRegister(0x0F);
 8000f4e:	200f      	movs	r0, #15
 8000f50:	f7ff ff2c 	bl	8000dac <spi1_beriRegister>
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
	if (cip != 0xD4 && cip != 0xD3)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2bd4      	cmp	r3, #212	@ 0xd4
 8000f5c:	d004      	beq.n	8000f68 <initL3GD20+0x20>
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2bd3      	cmp	r3, #211	@ 0xd3
 8000f62:	d001      	beq.n	8000f68 <initL3GD20+0x20>
		for (;;);
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <initL3GD20+0x1c>

	// CTRL_REG1: Nastavi 200 Hz, zbudi ziroskop in omogoci osi
	// spi1_pisiRegister(0x20, 0x4F);

	spi1_pisiRegister(0x23, 0x10);
 8000f68:	2110      	movs	r1, #16
 8000f6a:	2023      	movs	r0, #35	@ 0x23
 8000f6c:	f7ff ff5c 	bl	8000e28 <spi1_pisiRegister>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <enableDataReadyINT2>:
void enableDataReadyINT2()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    spi1_pisiRegister(0x22, 0x08); // Nastavi bit 3 na 1 (I2_DRDY na INT2)
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	2022      	movs	r0, #34	@ 0x22
 8000f80:	f7ff ff52 	bl	8000e28 <spi1_pisiRegister>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b09e      	sub	sp, #120	@ 0x78
 8000f8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 fcf9 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f959 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 fa35 	bl	8001404 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f9a:	f000 f9b5 	bl	8001308 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f9e:	f000 f9f3 	bl	8001388 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000fa2:	f009 fd01 	bl	800a9a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  __HAL_I2C_ENABLE(&hi2c1);
 8000fa6:	4ba0      	ldr	r3, [pc, #640]	@ (8001228 <main+0x2a0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b9e      	ldr	r3, [pc, #632]	@ (8001228 <main+0x2a0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0201 	orr.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi1);
 8000fb6:	4b9d      	ldr	r3, [pc, #628]	@ (800122c <main+0x2a4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b9b      	ldr	r3, [pc, #620]	@ (800122c <main+0x2a4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fc4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // CS postavimo na 1
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2108      	movs	r1, #8
 8000fca:	4899      	ldr	r0, [pc, #612]	@ (8001230 <main+0x2a8>)
 8000fcc:	f000 fff0 	bl	8001fb0 <HAL_GPIO_WritePin>

  initL3GD20();
 8000fd0:	f7ff ffba 	bl	8000f48 <initL3GD20>
  initLSM303DLHC();
 8000fd4:	f7ff fe88 	bl	8000ce8 <initLSM303DLHC>
  enableDataReadyINT2();
 8000fd8:	f7ff ffce 	bl	8000f78 <enableDataReadyINT2>

  spi1_pisiRegister(0x20, 0x6F); // Nastavi DR=01, BW=10, omogoci X, Y, Z
 8000fdc:	216f      	movs	r1, #111	@ 0x6f
 8000fde:	2020      	movs	r0, #32
 8000fe0:	f7ff ff22 	bl	8000e28 <spi1_pisiRegister>
  spi1_pisiRegister(0x23, 0x10); // Nastavi FS=01 za +-500 dps
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	2023      	movs	r0, #35	@ 0x23
 8000fe8:	f7ff ff1e 	bl	8000e28 <spi1_pisiRegister>

  float shake1=0;
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float shake2=0;
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	66bb      	str	r3, [r7, #104]	@ 0x68
  float combinedShake=0;
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
  char output[32];

  int8_t flag1 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  int8_t flag2 = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(acc_ready_flag == 1){
 800100a:	4b8a      	ldr	r3, [pc, #552]	@ (8001234 <main+0x2ac>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d174      	bne.n	80010fe <main+0x176>
		acc_ready_flag = 0;
 8001014:	4b87      	ldr	r3, [pc, #540]	@ (8001234 <main+0x2ac>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
		int16_t data[3];
		i2c1_beriRegistre(0x19, 0x28, (uint8_t*)&data[0], 6);
 800101a:	f107 0208 	add.w	r2, r7, #8
 800101e:	2306      	movs	r3, #6
 8001020:	2128      	movs	r1, #40	@ 0x28
 8001022:	2019      	movs	r0, #25
 8001024:	f7ff fe32 	bl	8000c8c <i2c1_beriRegistre>

		int16_t rawX = data[0];
 8001028:	893b      	ldrh	r3, [r7, #8]
 800102a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		int16_t rawY = data[1];
 800102e:	897b      	ldrh	r3, [r7, #10]
 8001030:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		int16_t rawZ = data[2];
 8001034:	89bb      	ldrh	r3, [r7, #12]
 8001036:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

		float accX = convertToG(rawX);
 800103a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fe7c 	bl	8000d3c <convertToG>
 8001044:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
		float accY = convertToG(rawY);
 8001048:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe75 	bl	8000d3c <convertToG>
 8001052:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
		float accZ = convertToG(rawZ);
 8001056:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fe6e 	bl	8000d3c <convertToG>
 8001060:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44

		float totalAcc = sqrt(accX * accX + accY * accY + accZ * accZ);
 8001064:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001068:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800106c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001070:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001078:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800107c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001084:	ee17 0a90 	vmov	r0, s15
 8001088:	f7ff fa5e 	bl	8000548 <__aeabi_f2d>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	ec43 2b10 	vmov	d0, r2, r3
 8001094:	f00c ffac 	bl	800dff0 <sqrt>
 8001098:	ec53 2b10 	vmov	r2, r3, d0
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fd82 	bl	8000ba8 <__aeabi_d2f>
 80010a4:	4603      	mov	r3, r0
 80010a6:	643b      	str	r3, [r7, #64]	@ 0x40

		float shake = totalAcc/5;
 80010a8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80010ac:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80010b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		if(shake > 1.0f){
 80010b8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80010bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c8:	dd02      	ble.n	80010d0 <main+0x148>
			shake = 1.0f;
 80010ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010ce:	663b      	str	r3, [r7, #96]	@ 0x60
		}
		shake -= 0.190f;
 80010d0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80010d4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001238 <main+0x2b0>
 80010d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010dc:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		if(shake<0){
 80010e0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80010e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	d502      	bpl.n	80010f4 <main+0x16c>
			shake = 0;
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	663b      	str	r3, [r7, #96]	@ 0x60
		}
		shake1=shake;
 80010f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		flag1=1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}
	if(data_ready_flag){
 80010fe:	4b4f      	ldr	r3, [pc, #316]	@ (800123c <main+0x2b4>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d058      	beq.n	80011ba <main+0x232>
		data_ready_flag = 0;
 8001108:	4b4c      	ldr	r3, [pc, #304]	@ (800123c <main+0x2b4>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
		int16_t data[3];
		spi1_beriRegistre(0x28, (uint8_t*)&data[0], 6);
 800110e:	463b      	mov	r3, r7
 8001110:	2206      	movs	r2, #6
 8001112:	4619      	mov	r1, r3
 8001114:	2028      	movs	r0, #40	@ 0x28
 8001116:	f7ff febf 	bl	8000e98 <spi1_beriRegistre>
		float x_dps = pretvori_v_dps(data[0]);
 800111a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff feee 	bl	8000f00 <pretvori_v_dps>
 8001124:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
		float y_dps = pretvori_v_dps(data[1]);
 8001128:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fee7 	bl	8000f00 <pretvori_v_dps>
 8001132:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
		float z_dps = pretvori_v_dps(data[2]);
 8001136:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fee0 	bl	8000f00 <pretvori_v_dps>
 8001140:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

		float totalGyro = sqrt(x_dps * x_dps + y_dps * y_dps + z_dps * z_dps);
 8001144:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001148:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800114c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001150:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001158:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800115c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001164:	ee17 0a90 	vmov	r0, s15
 8001168:	f7ff f9ee 	bl	8000548 <__aeabi_f2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	ec43 2b10 	vmov	d0, r2, r3
 8001174:	f00c ff3c 	bl	800dff0 <sqrt>
 8001178:	ec53 2b10 	vmov	r2, r3, d0
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fd12 	bl	8000ba8 <__aeabi_d2f>
 8001184:	4603      	mov	r3, r0
 8001186:	633b      	str	r3, [r7, #48]	@ 0x30
		float shake = totalGyro / 1000.0f;
 8001188:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800118c:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001240 <main+0x2b8>
 8001190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001194:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		if(shake > 1.0f){
 8001198:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800119c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	dd02      	ble.n	80011b0 <main+0x228>
			shake = 1.0f;
 80011aa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		shake2 = shake;
 80011b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011b2:	66bb      	str	r3, [r7, #104]	@ 0x68
		flag2=1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	}
	if(flag1 == 1 && flag2 == 1){
 80011ba:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80011be:	2b01      	cmp	r3, #1
 80011c0:	f47f af23 	bne.w	800100a <main+0x82>
 80011c4:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	f47f af1e 	bne.w	800100a <main+0x82>
		flag1 = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		flag2 = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
		combinedShake = (shake1 + shake2)/2.0f;
 80011da:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80011de:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80011e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80011ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ee:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		snprintf(output, sizeof(output), "0xAAAB,%.3f\n\r", combinedShake);
 80011f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80011f4:	f7ff f9a8 	bl	8000548 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	f107 0010 	add.w	r0, r7, #16
 8001200:	e9cd 2300 	strd	r2, r3, [sp]
 8001204:	4a0f      	ldr	r2, [pc, #60]	@ (8001244 <main+0x2bc>)
 8001206:	2120      	movs	r1, #32
 8001208:	f00a fdb0 	bl	800bd6c <sniprintf>
		CDC_Transmit_FS((uint8_t*)output, strlen(output));
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f82d 	bl	8000270 <strlen>
 8001216:	4603      	mov	r3, r0
 8001218:	b29a      	uxth	r2, r3
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f009 fc7f 	bl	800ab24 <CDC_Transmit_FS>
	if(acc_ready_flag == 1){
 8001226:	e6f0      	b.n	800100a <main+0x82>
 8001228:	20000374 	.word	0x20000374
 800122c:	200003c8 	.word	0x200003c8
 8001230:	48001000 	.word	0x48001000
 8001234:	2000042d 	.word	0x2000042d
 8001238:	3e428f5c 	.word	0x3e428f5c
 800123c:	2000042c 	.word	0x2000042c
 8001240:	447a0000 	.word	0x447a0000
 8001244:	0800e218 	.word	0x0800e218

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b09e      	sub	sp, #120	@ 0x78
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001252:	2228      	movs	r2, #40	@ 0x28
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f00a fdff 	bl	800be5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	223c      	movs	r2, #60	@ 0x3c
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f00a fdf1 	bl	800be5a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001278:	2303      	movs	r3, #3
 800127a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800127c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001280:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128a:	2310      	movs	r3, #16
 800128c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001296:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001298:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800129c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 f9a0 	bl	80045e8 <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012ae:	f000 f96f 	bl	8001590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	230f      	movs	r3, #15
 80012b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b6:	2302      	movs	r3, #2
 80012b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012cc:	2102      	movs	r1, #2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 f9c8 	bl	8005664 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012da:	f000 f959 	bl	8001590 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <SystemClock_Config+0xbc>)
 80012e0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fb89 	bl	8005a04 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012f8:	f000 f94a 	bl	8001590 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3778      	adds	r7, #120	@ 0x78
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	00020020 	.word	0x00020020

08001308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <MX_I2C1_Init+0x74>)
 800130e:	4a1c      	ldr	r2, [pc, #112]	@ (8001380 <MX_I2C1_Init+0x78>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8001312:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <MX_I2C1_Init+0x74>)
 8001314:	4a1b      	ldr	r2, [pc, #108]	@ (8001384 <MX_I2C1_Init+0x7c>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001318:	4b18      	ldr	r3, [pc, #96]	@ (800137c <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <MX_I2C1_Init+0x74>)
 8001320:	2201      	movs	r2, #1
 8001322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b15      	ldr	r3, [pc, #84]	@ (800137c <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_I2C1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001342:	480e      	ldr	r0, [pc, #56]	@ (800137c <MX_I2C1_Init+0x74>)
 8001344:	f000 fe64 	bl	8002010 <HAL_I2C_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800134e:	f000 f91f 	bl	8001590 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4809      	ldr	r0, [pc, #36]	@ (800137c <MX_I2C1_Init+0x74>)
 8001356:	f001 fbe7 	bl	8002b28 <HAL_I2CEx_ConfigAnalogFilter>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001360:	f000 f916 	bl	8001590 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001364:	2100      	movs	r1, #0
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_I2C1_Init+0x74>)
 8001368:	f001 fc29 	bl	8002bbe <HAL_I2CEx_ConfigDigitalFilter>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001372:	f000 f90d 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000374 	.word	0x20000374
 8001380:	40005400 	.word	0x40005400
 8001384:	0010020a 	.word	0x0010020a

08001388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <MX_SPI1_Init+0x74>)
 800138e:	4a1c      	ldr	r2, [pc, #112]	@ (8001400 <MX_SPI1_Init+0x78>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_SPI1_Init+0x74>)
 8001394:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <MX_SPI1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013a8:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013aa:	2202      	movs	r2, #2
 80013ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013ae:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b4:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013be:	2210      	movs	r2, #16
 80013c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013d6:	2207      	movs	r2, #7
 80013d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_SPI1_Init+0x74>)
 80013e8:	f004 fcbc 	bl	8005d64 <HAL_SPI_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013f2:	f000 f8cd 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200003c8 	.word	0x200003c8
 8001400:	40013000 	.word	0x40013000

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141a:	4b4d      	ldr	r3, [pc, #308]	@ (8001550 <MX_GPIO_Init+0x14c>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a4c      	ldr	r2, [pc, #304]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b4a      	ldr	r3, [pc, #296]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	4b47      	ldr	r3, [pc, #284]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a46      	ldr	r2, [pc, #280]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001438:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b44      	ldr	r3, [pc, #272]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800144a:	4b41      	ldr	r3, [pc, #260]	@ (8001550 <MX_GPIO_Init+0x14c>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a40      	ldr	r2, [pc, #256]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001450:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b3e      	ldr	r3, [pc, #248]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a3a      	ldr	r2, [pc, #232]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800146c:	6153      	str	r3, [r2, #20]
 800146e:	4b38      	ldr	r3, [pc, #224]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	4b35      	ldr	r3, [pc, #212]	@ (8001550 <MX_GPIO_Init+0x14c>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	4a34      	ldr	r2, [pc, #208]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001484:	6153      	str	r3, [r2, #20]
 8001486:	4b32      	ldr	r3, [pc, #200]	@ (8001550 <MX_GPIO_Init+0x14c>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001492:	2200      	movs	r2, #0
 8001494:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001498:	482e      	ldr	r0, [pc, #184]	@ (8001554 <MX_GPIO_Init+0x150>)
 800149a:	f000 fd89 	bl	8001fb0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 800149e:	2325      	movs	r3, #37	@ 0x25
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014a2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4828      	ldr	r0, [pc, #160]	@ (8001554 <MX_GPIO_Init+0x150>)
 80014b4:	f000 fc02 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014b8:	2308      	movs	r3, #8
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4821      	ldr	r0, [pc, #132]	@ (8001554 <MX_GPIO_Init+0x150>)
 80014d0:	f000 fbf4 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_1;
 80014d4:	2312      	movs	r3, #18
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	481a      	ldr	r0, [pc, #104]	@ (8001554 <MX_GPIO_Init+0x150>)
 80014ea:	f000 fbe7 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ee:	2301      	movs	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001504:	f000 fbda 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8001508:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800150c:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <MX_GPIO_Init+0x150>)
 8001522:	f000 fbcb 	bl	8001cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2007      	movs	r0, #7
 800152c:	f000 fb8f 	bl	8001c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001530:	2007      	movs	r0, #7
 8001532:	f000 fba8 	bl	8001c86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	200a      	movs	r0, #10
 800153c:	f000 fb87 	bl	8001c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001540:	200a      	movs	r0, #10
 8001542:	f000 fba0 	bl	8001c86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	48001000 	.word	0x48001000

08001558 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/* Ta funkcija se klice vsakic, ko pride do prekinitve na katerem koli EXTI pinu. */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1) // PE1 je povezan z INT2 (Data Ready)
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d102      	bne.n	800156e <HAL_GPIO_EXTI_Callback+0x16>
    {
    	//ziroskop
        data_ready_flag = 1;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <HAL_GPIO_EXTI_Callback+0x30>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_4)
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	2b10      	cmp	r3, #16
 8001572:	d102      	bne.n	800157a <HAL_GPIO_EXTI_Callback+0x22>
    {
    	//pospeskometer
    	acc_ready_flag = 1;
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_GPIO_EXTI_Callback+0x34>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
    }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2000042c 	.word	0x2000042c
 800158c:	2000042d 	.word	0x2000042d

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <Error_Handler+0x8>

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <HAL_MspInit+0x44>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_MspInit+0x44>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6193      	str	r3, [r2, #24]
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_MspInit+0x44>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_MspInit+0x44>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_MspInit+0x44>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_MspInit+0x44>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015d2:	2007      	movs	r0, #7
 80015d4:	f000 fb30 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_I2C_MspInit+0x7c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d127      	bne.n	8001656 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_I2C_MspInit+0x80>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	4a16      	ldr	r2, [pc, #88]	@ (8001664 <HAL_I2C_MspInit+0x80>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001610:	6153      	str	r3, [r2, #20]
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <HAL_I2C_MspInit+0x80>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800161e:	23c0      	movs	r3, #192	@ 0xc0
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001622:	2312      	movs	r3, #18
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001626:	2301      	movs	r3, #1
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162e:	2304      	movs	r3, #4
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	480b      	ldr	r0, [pc, #44]	@ (8001668 <HAL_I2C_MspInit+0x84>)
 800163a:	f000 fb3f 	bl	8001cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_I2C_MspInit+0x80>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_I2C_MspInit+0x80>)
 8001644:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_I2C_MspInit+0x80>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	@ 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	40021000 	.word	0x40021000
 8001668:	48000400 	.word	0x48000400

0800166c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a17      	ldr	r2, [pc, #92]	@ (80016e8 <HAL_SPI_MspInit+0x7c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d128      	bne.n	80016e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <HAL_SPI_MspInit+0x80>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a16      	ldr	r2, [pc, #88]	@ (80016ec <HAL_SPI_MspInit+0x80>)
 8001694:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <HAL_SPI_MspInit+0x80>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <HAL_SPI_MspInit+0x80>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a10      	ldr	r2, [pc, #64]	@ (80016ec <HAL_SPI_MspInit+0x80>)
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <HAL_SPI_MspInit+0x80>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80016be:	23e0      	movs	r3, #224	@ 0xe0
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ce:	2305      	movs	r3, #5
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016dc:	f000 faee 	bl	8001cbc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	@ 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40013000 	.word	0x40013000
 80016ec:	40021000 	.word	0x40021000

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <NMI_Handler+0x4>

080016f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <MemManage_Handler+0x4>

08001708 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <UsageFault_Handler+0x4>

08001718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001746:	f000 f963 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}

0800174e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001752:	2002      	movs	r0, #2
 8001754:	f000 fc44 	bl	8001fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001760:	2010      	movs	r0, #16
 8001762:	f000 fc3d 	bl	8001fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001772:	f001 fb5d 	bl	8002e30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20001100 	.word	0x20001100

08001780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return 1;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_kill>:

int _kill(int pid, int sig)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800179a:	f00a fbb1 	bl	800bf00 <__errno>
 800179e:	4603      	mov	r3, r0
 80017a0:	2216      	movs	r2, #22
 80017a2:	601a      	str	r2, [r3, #0]
  return -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_exit>:

void _exit (int status)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ffe7 	bl	8001790 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017c2:	bf00      	nop
 80017c4:	e7fd      	b.n	80017c2 <_exit+0x12>

080017c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	e00a      	b.n	80017ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d8:	f3af 8000 	nop.w
 80017dc:	4601      	mov	r1, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	60ba      	str	r2, [r7, #8]
 80017e4:	b2ca      	uxtb	r2, r1
 80017e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	dbf0      	blt.n	80017d8 <_read+0x12>
  }

  return len;
 80017f6:	687b      	ldr	r3, [r7, #4]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e009      	b.n	8001826 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	60ba      	str	r2, [r7, #8]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	429a      	cmp	r2, r3
 800182c:	dbf1      	blt.n	8001812 <_write+0x12>
  }
  return len;
 800182e:	687b      	ldr	r3, [r7, #4]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_close>:

int _close(int file)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001860:	605a      	str	r2, [r3, #4]
  return 0;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_isatty>:

int _isatty(int file)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001886:	b480      	push	{r7}
 8001888:	b085      	sub	sp, #20
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	@ (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f00a fb16 	bl	800bf00 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000a000 	.word	0x2000a000
 8001900:	00000400 	.word	0x00000400
 8001904:	20000430 	.word	0x20000430
 8001908:	20001740 	.word	0x20001740

0800190c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001968 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001934:	f7ff ffea 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <LoopForever+0x6>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	@ (8001970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <LoopForever+0xe>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	@ (800197c <LoopForever+0x16>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f00a fad5 	bl	800bf0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001962:	f7ff fb11 	bl	8000f88 <main>

08001966 <LoopForever>:

LoopForever:
    b LoopForever
 8001966:	e7fe      	b.n	8001966 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001968:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8001974:	0800e620 	.word	0x0800e620
  ldr r2, =_sbss
 8001978:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 800197c:	20001740 	.word	0x20001740

08001980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC1_2_IRQHandler>
	...

08001984 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_Init+0x28>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <HAL_Init+0x28>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f94f 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fdfc 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f967 	bl	8001ca2 <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 f92f 	bl	8001c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000434 	.word	0x20000434

08001a38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000434 	.word	0x20000434

08001a50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db0b      	blt.n	8001b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4907      	ldr	r1, [pc, #28]	@ (8001b34 <__NVIC_EnableIRQ+0x38>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	@ (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	@ (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	@ 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff8e 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff29 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff3e 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff8e 	bl	8001b8c <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5d 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff31 	bl	8001afc <__NVIC_EnableIRQ>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffa2 	bl	8001bf4 <SysTick_Config>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	e154      	b.n	8001f76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8146 	beq.w	8001f70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d005      	beq.n	8001cfc <HAL_GPIO_Init+0x40>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d130      	bne.n	8001d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d32:	2201      	movs	r2, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f003 0201 	and.w	r2, r3, #1
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d017      	beq.n	8001d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d123      	bne.n	8001dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	6939      	ldr	r1, [r7, #16]
 8001dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0203 	and.w	r2, r3, #3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80a0 	beq.w	8001f70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e30:	4b58      	ldr	r3, [pc, #352]	@ (8001f94 <HAL_GPIO_Init+0x2d8>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a57      	ldr	r2, [pc, #348]	@ (8001f94 <HAL_GPIO_Init+0x2d8>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b55      	ldr	r3, [pc, #340]	@ (8001f94 <HAL_GPIO_Init+0x2d8>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e48:	4a53      	ldr	r2, [pc, #332]	@ (8001f98 <HAL_GPIO_Init+0x2dc>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e72:	d019      	beq.n	8001ea8 <HAL_GPIO_Init+0x1ec>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a49      	ldr	r2, [pc, #292]	@ (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a48      	ldr	r2, [pc, #288]	@ (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00d      	beq.n	8001ea0 <HAL_GPIO_Init+0x1e4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a47      	ldr	r2, [pc, #284]	@ (8001fa4 <HAL_GPIO_Init+0x2e8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <HAL_GPIO_Init+0x1e0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a46      	ldr	r2, [pc, #280]	@ (8001fa8 <HAL_GPIO_Init+0x2ec>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d101      	bne.n	8001e98 <HAL_GPIO_Init+0x1dc>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e008      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001e98:	2305      	movs	r3, #5
 8001e9a:	e006      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e004      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e002      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_GPIO_Init+0x1ee>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	f002 0203 	and.w	r2, r2, #3
 8001eb0:	0092      	lsls	r2, r2, #2
 8001eb2:	4093      	lsls	r3, r2
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eba:	4937      	ldr	r1, [pc, #220]	@ (8001f98 <HAL_GPIO_Init+0x2dc>)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec8:	4b38      	ldr	r3, [pc, #224]	@ (8001fac <HAL_GPIO_Init+0x2f0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001eec:	4a2f      	ldr	r2, [pc, #188]	@ (8001fac <HAL_GPIO_Init+0x2f0>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8001fac <HAL_GPIO_Init+0x2f0>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f16:	4a25      	ldr	r2, [pc, #148]	@ (8001fac <HAL_GPIO_Init+0x2f0>)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1c:	4b23      	ldr	r3, [pc, #140]	@ (8001fac <HAL_GPIO_Init+0x2f0>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f40:	4a1a      	ldr	r2, [pc, #104]	@ (8001fac <HAL_GPIO_Init+0x2f0>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f46:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_GPIO_Init+0x2f0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f6a:	4a10      	ldr	r2, [pc, #64]	@ (8001fac <HAL_GPIO_Init+0x2f0>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3301      	adds	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f aea3 	bne.w	8001ccc <HAL_GPIO_Init+0x10>
  }
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	48000400 	.word	0x48000400
 8001fa0:	48000800 	.word	0x48000800
 8001fa4:	48000c00 	.word	0x48000c00
 8001fa8:	48001000 	.word	0x48001000
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ff6:	4a05      	ldr	r2, [pc, #20]	@ (800200c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff faaa 	bl	8001558 <HAL_GPIO_EXTI_Callback>
  }
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40010400 	.word	0x40010400

08002010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e08d      	b.n	800213e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fad4 	bl	80015e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2224      	movs	r2, #36	@ 0x24
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002060:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002070:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	e006      	b.n	8002098 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002096:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d108      	bne.n	80020b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	e007      	b.n	80020c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69d9      	ldr	r1, [r3, #28]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	4608      	mov	r0, r1
 8002152:	4611      	mov	r1, r2
 8002154:	461a      	mov	r2, r3
 8002156:	4603      	mov	r3, r0
 8002158:	817b      	strh	r3, [r7, #10]
 800215a:	460b      	mov	r3, r1
 800215c:	813b      	strh	r3, [r7, #8]
 800215e:	4613      	mov	r3, r2
 8002160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b20      	cmp	r3, #32
 800216c:	f040 80f9 	bne.w	8002362 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_I2C_Mem_Write+0x34>
 8002176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002182:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0ed      	b.n	8002364 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_I2C_Mem_Write+0x4e>
 8002192:	2302      	movs	r3, #2
 8002194:	e0e6      	b.n	8002364 <HAL_I2C_Mem_Write+0x21c>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800219e:	f7ff fc4b 	bl	8001a38 <HAL_GetTick>
 80021a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2319      	movs	r3, #25
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fac3 	bl	800273c <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0d1      	b.n	8002364 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2221      	movs	r2, #33	@ 0x21
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2240      	movs	r2, #64	@ 0x40
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a3a      	ldr	r2, [r7, #32]
 80021da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e8:	88f8      	ldrh	r0, [r7, #6]
 80021ea:	893a      	ldrh	r2, [r7, #8]
 80021ec:	8979      	ldrh	r1, [r7, #10]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	4603      	mov	r3, r0
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f9d3 	bl	80025a4 <I2C_RequestMemoryWrite>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0a9      	b.n	8002364 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	2bff      	cmp	r3, #255	@ 0xff
 8002218:	d90e      	bls.n	8002238 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	22ff      	movs	r2, #255	@ 0xff
 800221e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002224:	b2da      	uxtb	r2, r3
 8002226:	8979      	ldrh	r1, [r7, #10]
 8002228:	2300      	movs	r3, #0
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fc47 	bl	8002ac4 <I2C_TransferConfig>
 8002236:	e00f      	b.n	8002258 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002246:	b2da      	uxtb	r2, r3
 8002248:	8979      	ldrh	r1, [r7, #10]
 800224a:	2300      	movs	r3, #0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fc36 	bl	8002ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fac6 	bl	80027ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e07b      	b.n	8002364 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d034      	beq.n	8002310 <HAL_I2C_Mem_Write+0x1c8>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d130      	bne.n	8002310 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	@ 0x80
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 fa3f 	bl	800273c <I2C_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e04d      	b.n	8002364 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2bff      	cmp	r3, #255	@ 0xff
 80022d0:	d90e      	bls.n	80022f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	22ff      	movs	r2, #255	@ 0xff
 80022d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	8979      	ldrh	r1, [r7, #10]
 80022e0:	2300      	movs	r3, #0
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fbeb 	bl	8002ac4 <I2C_TransferConfig>
 80022ee:	e00f      	b.n	8002310 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	2300      	movs	r3, #0
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fbda 	bl	8002ac4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d19e      	bne.n	8002258 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 faac 	bl	800287c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e01a      	b.n	8002364 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2220      	movs	r2, #32
 8002334:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_I2C_Mem_Write+0x224>)
 8002342:	400b      	ands	r3, r1
 8002344:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002362:	2302      	movs	r3, #2
  }
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	fe00e800 	.word	0xfe00e800

08002370 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	461a      	mov	r2, r3
 800237e:	4603      	mov	r3, r0
 8002380:	817b      	strh	r3, [r7, #10]
 8002382:	460b      	mov	r3, r1
 8002384:	813b      	strh	r3, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b20      	cmp	r3, #32
 8002394:	f040 80fd 	bne.w	8002592 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_I2C_Mem_Read+0x34>
 800239e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0f1      	b.n	8002594 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_I2C_Mem_Read+0x4e>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e0ea      	b.n	8002594 <HAL_I2C_Mem_Read+0x224>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023c6:	f7ff fb37 	bl	8001a38 <HAL_GetTick>
 80023ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2319      	movs	r3, #25
 80023d2:	2201      	movs	r2, #1
 80023d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f9af 	bl	800273c <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0d5      	b.n	8002594 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2222      	movs	r2, #34	@ 0x22
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a3a      	ldr	r2, [r7, #32]
 8002402:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002410:	88f8      	ldrh	r0, [r7, #6]
 8002412:	893a      	ldrh	r2, [r7, #8]
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	4603      	mov	r3, r0
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f913 	bl	800264c <I2C_RequestMemoryRead>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0ad      	b.n	8002594 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	2bff      	cmp	r3, #255	@ 0xff
 8002440:	d90e      	bls.n	8002460 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244c:	b2da      	uxtb	r2, r3
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	4b52      	ldr	r3, [pc, #328]	@ (800259c <HAL_I2C_Mem_Read+0x22c>)
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fb33 	bl	8002ac4 <I2C_TransferConfig>
 800245e:	e00f      	b.n	8002480 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	b2da      	uxtb	r2, r3
 8002470:	8979      	ldrh	r1, [r7, #10]
 8002472:	4b4a      	ldr	r3, [pc, #296]	@ (800259c <HAL_I2C_Mem_Read+0x22c>)
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fb22 	bl	8002ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002486:	2200      	movs	r2, #0
 8002488:	2104      	movs	r1, #4
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f956 	bl	800273c <I2C_WaitOnFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07c      	b.n	8002594 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d034      	beq.n	8002540 <HAL_I2C_Mem_Read+0x1d0>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d130      	bne.n	8002540 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	@ 0x80
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 f927 	bl	800273c <I2C_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e04d      	b.n	8002594 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2bff      	cmp	r3, #255	@ 0xff
 8002500:	d90e      	bls.n	8002520 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250c:	b2da      	uxtb	r2, r3
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	2300      	movs	r3, #0
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fad3 	bl	8002ac4 <I2C_TransferConfig>
 800251e:	e00f      	b.n	8002540 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252e:	b2da      	uxtb	r2, r3
 8002530:	8979      	ldrh	r1, [r7, #10]
 8002532:	2300      	movs	r3, #0
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fac2 	bl	8002ac4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d19a      	bne.n	8002480 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f994 	bl	800287c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e01a      	b.n	8002594 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2220      	movs	r2, #32
 8002564:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_I2C_Mem_Read+0x230>)
 8002572:	400b      	ands	r3, r1
 8002574:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002592:	2302      	movs	r3, #2
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	80002400 	.word	0x80002400
 80025a0:	fe00e800 	.word	0xfe00e800

080025a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	817b      	strh	r3, [r7, #10]
 80025b6:	460b      	mov	r3, r1
 80025b8:	813b      	strh	r3, [r7, #8]
 80025ba:	4613      	mov	r3, r2
 80025bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	8979      	ldrh	r1, [r7, #10]
 80025c4:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <I2C_RequestMemoryWrite+0xa4>)
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fa79 	bl	8002ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	69b9      	ldr	r1, [r7, #24]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f909 	bl	80027ee <I2C_WaitOnTXISFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e02c      	b.n	8002640 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ec:	893b      	ldrh	r3, [r7, #8]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80025f6:	e015      	b.n	8002624 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	69b9      	ldr	r1, [r7, #24]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f8ef 	bl	80027ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e012      	b.n	8002640 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800261a:	893b      	ldrh	r3, [r7, #8]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2200      	movs	r2, #0
 800262c:	2180      	movs	r1, #128	@ 0x80
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f884 	bl	800273c <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	80002000 	.word	0x80002000

0800264c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	4608      	mov	r0, r1
 8002656:	4611      	mov	r1, r2
 8002658:	461a      	mov	r2, r3
 800265a:	4603      	mov	r3, r0
 800265c:	817b      	strh	r3, [r7, #10]
 800265e:	460b      	mov	r3, r1
 8002660:	813b      	strh	r3, [r7, #8]
 8002662:	4613      	mov	r3, r2
 8002664:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	8979      	ldrh	r1, [r7, #10]
 800266c:	4b20      	ldr	r3, [pc, #128]	@ (80026f0 <I2C_RequestMemoryRead+0xa4>)
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2300      	movs	r3, #0
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fa26 	bl	8002ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	69b9      	ldr	r1, [r7, #24]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f8b6 	bl	80027ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e02c      	b.n	80026e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002692:	893b      	ldrh	r3, [r7, #8]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28
 800269c:	e015      	b.n	80026ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800269e:	893b      	ldrh	r3, [r7, #8]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f89c 	bl	80027ee <I2C_WaitOnTXISFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e012      	b.n	80026e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026c0:	893b      	ldrh	r3, [r7, #8]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2200      	movs	r2, #0
 80026d2:	2140      	movs	r1, #64	@ 0x40
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f831 	bl	800273c <I2C_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	80002000 	.word	0x80002000

080026f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b02      	cmp	r3, #2
 8002708:	d103      	bne.n	8002712 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d007      	beq.n	8002730 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	619a      	str	r2, [r3, #24]
  }
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800274c:	e03b      	b.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	6839      	ldr	r1, [r7, #0]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f8d6 	bl	8002904 <I2C_IsErrorOccurred>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e041      	b.n	80027e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d02d      	beq.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276a:	f7ff f965 	bl	8001a38 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d302      	bcc.n	8002780 <I2C_WaitOnFlagUntilTimeout+0x44>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d122      	bne.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4013      	ands	r3, r2
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	429a      	cmp	r2, r3
 800279c:	d113      	bne.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00f      	b.n	80027e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4013      	ands	r3, r2
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	bf0c      	ite	eq
 80027d6:	2301      	moveq	r3, #1
 80027d8:	2300      	movne	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d0b4      	beq.n	800274e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027fa:	e033      	b.n	8002864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f87f 	bl	8002904 <I2C_IsErrorOccurred>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e031      	b.n	8002874 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d025      	beq.n	8002864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002818:	f7ff f90e 	bl	8001a38 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	429a      	cmp	r2, r3
 8002826:	d302      	bcc.n	800282e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11a      	bne.n	8002864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b02      	cmp	r3, #2
 800283a:	d013      	beq.n	8002864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e007      	b.n	8002874 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	d1c4      	bne.n	80027fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002888:	e02f      	b.n	80028ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f838 	bl	8002904 <I2C_IsErrorOccurred>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e02d      	b.n	80028fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7ff f8cb 	bl	8001a38 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d11a      	bne.n	80028ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d013      	beq.n	80028ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	f043 0220 	orr.w	r2, r3, #32
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e007      	b.n	80028fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d1c8      	bne.n	800288a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	@ 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d068      	beq.n	8002a02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2210      	movs	r2, #16
 8002936:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002938:	e049      	b.n	80029ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d045      	beq.n	80029ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002942:	f7ff f879 	bl	8001a38 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <I2C_IsErrorOccurred+0x54>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d13a      	bne.n	80029ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002962:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800296a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800297a:	d121      	bne.n	80029c0 <I2C_IsErrorOccurred+0xbc>
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002982:	d01d      	beq.n	80029c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	2b20      	cmp	r3, #32
 8002988:	d01a      	beq.n	80029c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002998:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800299a:	f7ff f84d 	bl	8001a38 <HAL_GetTick>
 800299e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a0:	e00e      	b.n	80029c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029a2:	f7ff f849 	bl	8001a38 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b19      	cmp	r3, #25
 80029ae:	d907      	bls.n	80029c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	f043 0320 	orr.w	r3, r3, #32
 80029b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80029be:	e006      	b.n	80029ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d1e9      	bne.n	80029a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d003      	beq.n	80029e4 <I2C_IsErrorOccurred+0xe0>
 80029dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0aa      	beq.n	800293a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2220      	movs	r2, #32
 80029f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	f043 0308 	orr.w	r3, r3, #8
 8002a3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01c      	beq.n	8002ab2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff fe3b 	bl	80026f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <I2C_IsErrorOccurred+0x1bc>)
 8002a8a:	400b      	ands	r3, r1
 8002a8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3728      	adds	r7, #40	@ 0x28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	fe00e800 	.word	0xfe00e800

08002ac4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ad6:	897b      	ldrh	r3, [r7, #10]
 8002ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002adc:	7a7b      	ldrb	r3, [r7, #9]
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ae4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002af2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	0d5b      	lsrs	r3, r3, #21
 8002afe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002b02:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <I2C_TransferConfig+0x60>)
 8002b04:	430b      	orrs	r3, r1
 8002b06:	43db      	mvns	r3, r3
 8002b08:	ea02 0103 	and.w	r1, r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	03ff63ff 	.word	0x03ff63ff

08002b28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d138      	bne.n	8002bb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e032      	b.n	8002bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	@ 0x24
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d139      	bne.n	8002c48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e033      	b.n	8002c4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2224      	movs	r2, #36	@ 0x24
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c48:	2302      	movs	r3, #2
  }
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0b9      	b.n	8002ddc <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f008 f887 	bl	800ad90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2203      	movs	r2, #3
 8002c86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 ffb5 	bl	8006bfe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	e03e      	b.n	8002d18 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3311      	adds	r3, #17
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	3310      	adds	r3, #16
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	3313      	adds	r3, #19
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3324      	adds	r3, #36	@ 0x24
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	3301      	adds	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	791b      	ldrb	r3, [r3, #4]
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d3bb      	bcc.n	8002c9a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	e044      	b.n	8002db2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	3301      	adds	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	791b      	ldrb	r3, [r3, #4]
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d3b5      	bcc.n	8002d28 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002dc8:	f003 ff34 	bl	8006c34 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_PCD_Start+0x16>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e016      	b.n	8002e28 <HAL_PCD_Start+0x44>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fee2 	bl	8006bd0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f008 fa5a 	bl	800b2c8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f006 f99f 	bl	800915c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f006 f998 	bl	8009172 <USB_ReadInterrupts>
 8002e42:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fab1 	bl	80033b6 <PCD_EP_ISR_Handler>

    return;
 8002e54:	e0bd      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e72:	b292      	uxth	r2, r2
 8002e74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f008 f82a 	bl	800aed2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e7e:	2100      	movs	r1, #0
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f8a9 	bl	8002fd8 <HAL_PCD_SetAddress>

    return;
 8002e86:	e0a4      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00c      	beq.n	8002eac <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002eaa:	e092      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ece:	e080      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d027      	beq.n	8002f2a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0204 	bic.w	r2, r2, #4
 8002eec:	b292      	uxth	r2, r2
 8002eee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0208 	bic.w	r2, r2, #8
 8002f04:	b292      	uxth	r2, r2
 8002f06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f008 f81a 	bl	800af44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f22:	b292      	uxth	r2, r2
 8002f24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f28:	e053      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d027      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0208 	orr.w	r2, r2, #8
 8002f46:	b292      	uxth	r2, r2
 8002f48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0204 	orr.w	r2, r2, #4
 8002f76:	b292      	uxth	r2, r2
 8002f78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f007 ffc7 	bl	800af10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f82:	e026      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00f      	beq.n	8002fae <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f007 ff85 	bl	800aeb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fac:	e011      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fca:	b292      	uxth	r2, r2
 8002fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002fd0:	bf00      	nop
  }
}
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_PCD_SetAddress+0x1a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e012      	b.n	8003018 <HAL_PCD_SetAddress+0x40>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f006 f893 	bl	8009134 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	70fb      	strb	r3, [r7, #3]
 8003032:	460b      	mov	r3, r1
 8003034:	803b      	strh	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800303e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003042:	2b00      	cmp	r3, #0
 8003044:	da0e      	bge.n	8003064 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 0207 	and.w	r2, r3, #7
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	3310      	adds	r3, #16
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	705a      	strb	r2, [r3, #1]
 8003062:	e00e      	b.n	8003082 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 0207 	and.w	r2, r3, #7
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	b2da      	uxtb	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800308e:	883a      	ldrh	r2, [r7, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	78ba      	ldrb	r2, [r7, #2]
 8003098:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800309a:	78bb      	ldrb	r3, [r7, #2]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d102      	bne.n	80030a6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_PCD_EP_Open+0x94>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e00e      	b.n	80030d2 <HAL_PCD_EP_Open+0xb2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fdd4 	bl	8006c70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80030d0:	7afb      	ldrb	r3, [r7, #11]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da0e      	bge.n	800310c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 0207 	and.w	r2, r3, #7
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	3310      	adds	r3, #16
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	705a      	strb	r2, [r3, #1]
 800310a:	e00e      	b.n	800312a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 0207 	and.w	r2, r3, #7
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_PCD_EP_Close+0x6a>
 8003140:	2302      	movs	r3, #2
 8003142:	e00e      	b.n	8003162 <HAL_PCD_EP_Close+0x88>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68f9      	ldr	r1, [r7, #12]
 8003152:	4618      	mov	r0, r3
 8003154:	f004 f950 	bl	80073f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	460b      	mov	r3, r1
 8003178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	f003 0207 	and.w	r2, r3, #7
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2200      	movs	r2, #0
 80031a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031aa:	7afb      	ldrb	r3, [r7, #11]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 fb08 	bl	80077d2 <USB_EPStartXfer>

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 0207 	and.w	r2, r3, #7
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	460b      	mov	r3, r1
 800320a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320c:	7afb      	ldrb	r3, [r7, #11]
 800320e:	f003 0207 	and.w	r2, r3, #7
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	3310      	adds	r3, #16
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2200      	movs	r2, #0
 8003240:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2201      	movs	r2, #1
 8003246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003248:	7afb      	ldrb	r3, [r7, #11]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	b2da      	uxtb	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6979      	ldr	r1, [r7, #20]
 800325a:	4618      	mov	r0, r3
 800325c:	f004 fab9 	bl	80077d2 <USB_EPStartXfer>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	7912      	ldrb	r2, [r2, #4]
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e03e      	b.n	8003306 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800328c:	2b00      	cmp	r3, #0
 800328e:	da0e      	bge.n	80032ae <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	f003 0207 	and.w	r2, r3, #7
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	3310      	adds	r3, #16
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	705a      	strb	r2, [r3, #1]
 80032ac:	e00c      	b.n	80032c8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_PCD_EP_SetStall+0x7e>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e00e      	b.n	8003306 <HAL_PCD_EP_SetStall+0x9c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f005 fe1d 	bl	8008f36 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	7912      	ldrb	r2, [r2, #4]
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e040      	b.n	80033ae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800332c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003330:	2b00      	cmp	r3, #0
 8003332:	da0e      	bge.n	8003352 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	f003 0207 	and.w	r2, r3, #7
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	3310      	adds	r3, #16
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	705a      	strb	r2, [r3, #1]
 8003350:	e00e      	b.n	8003370 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	f003 0207 	and.w	r2, r3, #7
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_PCD_EP_ClrStall+0x82>
 800338c:	2302      	movs	r3, #2
 800338e:	e00e      	b.n	80033ae <HAL_PCD_EP_ClrStall+0xa0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68f9      	ldr	r1, [r7, #12]
 800339e:	4618      	mov	r0, r3
 80033a0:	f005 fe1a 	bl	8008fd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b096      	sub	sp, #88	@ 0x58
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033be:	e3bb      	b.n	8003b38 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80033da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 8175 	bne.w	80036ce <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d14e      	bne.n	800348e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80033fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003400:	81fb      	strh	r3, [r7, #14]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	89fb      	ldrh	r3, [r7, #14]
 8003408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800340c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003410:	b29b      	uxth	r3, r3
 8003412:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3310      	adds	r3, #16
 8003418:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	3302      	adds	r3, #2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003444:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	441a      	add	r2, r3
 8003450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003452:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003454:	2100      	movs	r1, #0
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f007 fd13 	bl	800ae82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	7b1b      	ldrb	r3, [r3, #12]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8368 	beq.w	8003b38 <PCD_EP_ISR_Handler+0x782>
 8003468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 8363 	bne.w	8003b38 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7b1b      	ldrb	r3, [r3, #12]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800347c:	b2da      	uxtb	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	731a      	strb	r2, [r3, #12]
 800348c:	e354      	b.n	8003b38 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003494:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80034a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d034      	beq.n	8003516 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	3306      	adds	r3, #6
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80034e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f005 fe97 	bl	800921e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034fc:	4013      	ands	r3, r2
 80034fe:	823b      	strh	r3, [r7, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	8a3a      	ldrh	r2, [r7, #16]
 8003506:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800350a:	b292      	uxth	r2, r2
 800350c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f007 fc8a 	bl	800ae28 <HAL_PCD_SetupStageCallback>
 8003514:	e310      	b.n	8003b38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003516:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800351a:	2b00      	cmp	r3, #0
 800351c:	f280 830c 	bge.w	8003b38 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29a      	uxth	r2, r3
 8003528:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800352c:	4013      	ands	r3, r2
 800352e:	83fb      	strh	r3, [r7, #30]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	8bfa      	ldrh	r2, [r7, #30]
 8003536:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800353a:	b292      	uxth	r2, r2
 800353c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003546:	b29b      	uxth	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	3306      	adds	r3, #6
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003568:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800356a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d019      	beq.n	80035a6 <PCD_EP_ISR_Handler+0x1f0>
 8003572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d015      	beq.n	80035a6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003580:	6959      	ldr	r1, [r3, #20]
 8003582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003584:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003588:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800358a:	b29b      	uxth	r3, r3
 800358c:	f005 fe47 	bl	800921e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003592:	695a      	ldr	r2, [r3, #20]
 8003594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	441a      	add	r2, r3
 800359a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800359e:	2100      	movs	r1, #0
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f007 fc53 	bl	800ae4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80035b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80035b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f040 82bd 	bne.w	8003b38 <PCD_EP_ISR_Handler+0x782>
 80035be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80035c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80035c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035ca:	f000 82b5 	beq.w	8003b38 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035dc:	b29b      	uxth	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	4413      	add	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	801a      	strh	r2, [r3, #0]
 80035fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <PCD_EP_ISR_Handler+0x266>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003614:	b29a      	uxth	r2, r3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	801a      	strh	r2, [r3, #0]
 800361a:	e039      	b.n	8003690 <PCD_EP_ISR_Handler+0x2da>
 800361c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b3e      	cmp	r3, #62	@ 0x3e
 8003622:	d818      	bhi.n	8003656 <PCD_EP_ISR_Handler+0x2a0>
 8003624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	647b      	str	r3, [r7, #68]	@ 0x44
 800362c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <PCD_EP_ISR_Handler+0x288>
 8003638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800363a:	3301      	adds	r3, #1
 800363c:	647b      	str	r3, [r7, #68]	@ 0x44
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29a      	uxth	r2, r3
 8003644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003646:	b29b      	uxth	r3, r3
 8003648:	029b      	lsls	r3, r3, #10
 800364a:	b29b      	uxth	r3, r3
 800364c:	4313      	orrs	r3, r2
 800364e:	b29a      	uxth	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	801a      	strh	r2, [r3, #0]
 8003654:	e01c      	b.n	8003690 <PCD_EP_ISR_Handler+0x2da>
 8003656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	647b      	str	r3, [r7, #68]	@ 0x44
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <PCD_EP_ISR_Handler+0x2ba>
 800366a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800366c:	3b01      	subs	r3, #1
 800366e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b29a      	uxth	r2, r3
 8003676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003678:	b29b      	uxth	r3, r3
 800367a:	029b      	lsls	r3, r3, #10
 800367c:	b29b      	uxth	r3, r3
 800367e:	4313      	orrs	r3, r2
 8003680:	b29b      	uxth	r3, r3
 8003682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800368a:	b29a      	uxth	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800369c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a0:	827b      	strh	r3, [r7, #18]
 80036a2:	8a7b      	ldrh	r3, [r7, #18]
 80036a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80036a8:	827b      	strh	r3, [r7, #18]
 80036aa:	8a7b      	ldrh	r3, [r7, #18]
 80036ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036b0:	827b      	strh	r3, [r7, #18]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	8a7b      	ldrh	r3, [r7, #18]
 80036b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	8013      	strh	r3, [r2, #0]
 80036cc:	e234      	b.n	8003b38 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f280 80fc 	bge.w	80038e4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003702:	4013      	ands	r3, r2
 8003704:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800371a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800371e:	b292      	uxth	r2, r2
 8003720:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003722:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373a:	7b1b      	ldrb	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d125      	bne.n	800378c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003748:	b29b      	uxth	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	3306      	adds	r3, #6
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003768:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800376c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8092 	beq.w	800389a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377c:	6959      	ldr	r1, [r3, #20]
 800377e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003780:	88da      	ldrh	r2, [r3, #6]
 8003782:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003786:	f005 fd4a 	bl	800921e <USB_ReadPMA>
 800378a:	e086      	b.n	800389a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800378c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378e:	78db      	ldrb	r3, [r3, #3]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d10a      	bne.n	80037aa <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003794:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003798:	461a      	mov	r2, r3
 800379a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f9d9 	bl	8003b54 <HAL_PCD_EP_DB_Receive>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80037a8:	e077      	b.n	800389a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80037da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d024      	beq.n	8003852 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003810:	b29b      	uxth	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	3302      	adds	r3, #2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003830:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003834:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02e      	beq.n	800389a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003842:	6959      	ldr	r1, [r3, #20]
 8003844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003846:	891a      	ldrh	r2, [r3, #8]
 8003848:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800384c:	f005 fce7 	bl	800921e <USB_ReadPMA>
 8003850:	e023      	b.n	800389a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800385a:	b29b      	uxth	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	3306      	adds	r3, #6
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800387a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800387e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388c:	6959      	ldr	r1, [r3, #20]
 800388e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003890:	895a      	ldrh	r2, [r3, #10]
 8003892:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003896:	f005 fcc2 	bl	800921e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800389a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389c:	69da      	ldr	r2, [r3, #28]
 800389e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038a2:	441a      	add	r2, r3
 80038a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038b0:	441a      	add	r2, r3
 80038b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <PCD_EP_ISR_Handler+0x514>
 80038be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80038c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d206      	bcs.n	80038d8 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	4619      	mov	r1, r3
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f007 fabb 	bl	800ae4c <HAL_PCD_DataOutStageCallback>
 80038d6:	e005      	b.n	80038e4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038de:	4618      	mov	r0, r3
 80038e0:	f003 ff77 	bl	80077d2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80038e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8123 	beq.w	8003b38 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80038f2:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	3310      	adds	r3, #16
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4413      	add	r3, r2
 8003904:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800391c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003920:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	441a      	add	r2, r3
 8003932:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800393a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800393e:	b29b      	uxth	r3, r3
 8003940:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003944:	78db      	ldrb	r3, [r3, #3]
 8003946:	2b01      	cmp	r3, #1
 8003948:	f040 80a2 	bne.w	8003a90 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800394c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003954:	7b1b      	ldrb	r3, [r3, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8093 	beq.w	8003a82 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800395c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d046      	beq.n	80039f6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d126      	bne.n	80039be <PCD_EP_ISR_Handler+0x608>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800397e:	b29b      	uxth	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	4413      	add	r3, r2
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
 8003988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	011a      	lsls	r2, r3, #4
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	4413      	add	r3, r2
 8003992:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003996:	623b      	str	r3, [r7, #32]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	801a      	strh	r2, [r3, #0]
 80039bc:	e061      	b.n	8003a82 <PCD_EP_ISR_Handler+0x6cc>
 80039be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d15d      	bne.n	8003a82 <PCD_EP_ISR_Handler+0x6cc>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039da:	4413      	add	r3, r2
 80039dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	011a      	lsls	r2, r3, #4
 80039e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e6:	4413      	add	r3, r2
 80039e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f0:	2200      	movs	r2, #0
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	e045      	b.n	8003a82 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d126      	bne.n	8003a52 <PCD_EP_ISR_Handler+0x69c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	4413      	add	r3, r2
 8003a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	011a      	lsls	r2, r3, #4
 8003a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a24:	4413      	add	r3, r2
 8003a26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	801a      	strh	r2, [r3, #0]
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	e017      	b.n	8003a82 <PCD_EP_ISR_Handler+0x6cc>
 8003a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d113      	bne.n	8003a82 <PCD_EP_ISR_Handler+0x6cc>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a68:	4413      	add	r3, r2
 8003a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	011a      	lsls	r2, r3, #4
 8003a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a74:	4413      	add	r3, r2
 8003a76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7e:	2200      	movs	r2, #0
 8003a80:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f007 f9fa 	bl	800ae82 <HAL_PCD_DataInStageCallback>
 8003a8e:	e053      	b.n	8003b38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003a90:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d146      	bne.n	8003b2a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d907      	bls.n	8003ae4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003adc:	1ad2      	subs	r2, r2, r3
 8003ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae0:	619a      	str	r2, [r3, #24]
 8003ae2:	e002      	b.n	8003aea <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f007 f9c2 	bl	800ae82 <HAL_PCD_DataInStageCallback>
 8003afe:	e01b      	b.n	8003b38 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b08:	441a      	add	r2, r3
 8003b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b16:	441a      	add	r2, r3
 8003b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b22:	4618      	mov	r0, r3
 8003b24:	f003 fe55 	bl	80077d2 <USB_EPStartXfer>
 8003b28:	e006      	b.n	8003b38 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f91b 	bl	8003d6e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b21b      	sxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f6ff ac3b 	blt.w	80033c0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3758      	adds	r7, #88	@ 0x58
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d07e      	beq.n	8003c6a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3302      	adds	r3, #2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	8b7b      	ldrh	r3, [r7, #26]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d306      	bcc.n	8003bae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	8b7b      	ldrh	r3, [r7, #26]
 8003ba6:	1ad2      	subs	r2, r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	619a      	str	r2, [r3, #24]
 8003bac:	e002      	b.n	8003bb4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d123      	bne.n	8003c04 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd6:	833b      	strh	r3, [r7, #24]
 8003bd8:	8b3b      	ldrh	r3, [r7, #24]
 8003bda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003bde:	833b      	strh	r3, [r7, #24]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	8b3b      	ldrh	r3, [r7, #24]
 8003bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01f      	beq.n	8003c4e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c28:	82fb      	strh	r3, [r7, #22]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	8afb      	ldrh	r3, [r7, #22]
 8003c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c4e:	8b7b      	ldrh	r3, [r7, #26]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8087 	beq.w	8003d64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6959      	ldr	r1, [r3, #20]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	891a      	ldrh	r2, [r3, #8]
 8003c62:	8b7b      	ldrh	r3, [r7, #26]
 8003c64:	f005 fadb 	bl	800921e <USB_ReadPMA>
 8003c68:	e07c      	b.n	8003d64 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3306      	adds	r3, #6
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d306      	bcc.n	8003cac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	8b7b      	ldrh	r3, [r7, #26]
 8003ca4:	1ad2      	subs	r2, r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	619a      	str	r2, [r3, #24]
 8003caa:	e002      	b.n	8003cb2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d123      	bne.n	8003d02 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd4:	83fb      	strh	r3, [r7, #30]
 8003cd6:	8bfb      	ldrh	r3, [r7, #30]
 8003cd8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003cdc:	83fb      	strh	r3, [r7, #30]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	441a      	add	r2, r3
 8003cec:	8bfb      	ldrh	r3, [r7, #30]
 8003cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11f      	bne.n	8003d4c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d26:	83bb      	strh	r3, [r7, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	441a      	add	r2, r3
 8003d36:	8bbb      	ldrh	r3, [r7, #28]
 8003d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d4c:	8b7b      	ldrh	r3, [r7, #26]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6959      	ldr	r1, [r3, #20]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	895a      	ldrh	r2, [r3, #10]
 8003d5e:	8b7b      	ldrh	r3, [r7, #26]
 8003d60:	f005 fa5d 	bl	800921e <USB_ReadPMA>
    }
  }

  return count;
 8003d64:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b0a4      	sub	sp, #144	@ 0x90
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 81dd 	beq.w	8004142 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d907      	bls.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003dc8:	1ad2      	subs	r2, r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	619a      	str	r2, [r3, #24]
 8003dce:	e002      	b.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 80b9 	bne.w	8003f52 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d126      	bne.n	8003e36 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfc:	4413      	add	r3, r2
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	011a      	lsls	r2, r3, #4
 8003e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e08:	4413      	add	r3, r2
 8003e0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e01a      	b.n	8003e6c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d116      	bne.n	8003e6c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e52:	4413      	add	r3, r2
 8003e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	011a      	lsls	r2, r3, #4
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5e:	4413      	add	r3, r2
 8003e60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e68:	2200      	movs	r2, #0
 8003e6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d126      	bne.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	011a      	lsls	r2, r3, #4
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	801a      	strh	r2, [r3, #0]
 8003ec6:	e017      	b.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d113      	bne.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	4413      	add	r3, r2
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	011a      	lsls	r2, r3, #4
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	4413      	add	r3, r2
 8003eec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	4619      	mov	r1, r3
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f006 ffbf 	bl	800ae82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 82fc 	beq.w	8004508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2a:	82fb      	strh	r3, [r7, #22]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	8afb      	ldrh	r3, [r7, #22]
 8003f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	8013      	strh	r3, [r2, #0]
 8003f50:	e2da      	b.n	8004508 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d021      	beq.n	8003fa0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	441a      	add	r2, r3
 8003f88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	f040 82ae 	bne.w	8004508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003fb4:	441a      	add	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d30b      	bcc.n	8003fec <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fe4:	1ad2      	subs	r2, r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	621a      	str	r2, [r3, #32]
 8003fea:	e017      	b.n	800401c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003ff4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ff8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004004:	e00a      	b.n	800401c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2200      	movs	r2, #0
 800401a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	785b      	ldrb	r3, [r3, #1]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d165      	bne.n	80040f0 <HAL_PCD_EP_DB_Transmit+0x382>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004038:	4413      	add	r3, r2
 800403a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	011a      	lsls	r2, r3, #4
 8004042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004044:	4413      	add	r3, r2
 8004046:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800404a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800404c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29b      	uxth	r3, r3
 8004052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004056:	b29a      	uxth	r2, r3
 8004058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405a:	801a      	strh	r2, [r3, #0]
 800405c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <HAL_PCD_EP_DB_Transmit+0x30c>
 8004064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800406e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004072:	b29a      	uxth	r2, r3
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	801a      	strh	r2, [r3, #0]
 8004078:	e057      	b.n	800412a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800407a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800407e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004080:	d818      	bhi.n	80040b4 <HAL_PCD_EP_DB_Transmit+0x346>
 8004082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800408a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_PCD_EP_DB_Transmit+0x32e>
 8004096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004098:	3301      	adds	r3, #1
 800409a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800409c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	029b      	lsls	r3, r3, #10
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	4313      	orrs	r3, r2
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b0:	801a      	strh	r2, [r3, #0]
 80040b2:	e03a      	b.n	800412a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <HAL_PCD_EP_DB_Transmit+0x360>
 80040c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ca:	3b01      	subs	r3, #1
 80040cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	029b      	lsls	r3, r3, #10
 80040da:	b29b      	uxth	r3, r3
 80040dc:	4313      	orrs	r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	801a      	strh	r2, [r3, #0]
 80040ee:	e01c      	b.n	800412a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	785b      	ldrb	r3, [r3, #1]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d118      	bne.n	800412a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004106:	b29b      	uxth	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800410c:	4413      	add	r3, r2
 800410e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	011a      	lsls	r2, r3, #4
 8004116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004118:	4413      	add	r3, r2
 800411a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800411e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004124:	b29a      	uxth	r2, r3
 8004126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004128:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	6959      	ldr	r1, [r3, #20]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	891a      	ldrh	r2, [r3, #8]
 8004136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800413a:	b29b      	uxth	r3, r3
 800413c:	f005 f829 	bl	8009192 <USB_WritePMA>
 8004140:	e1e2      	b.n	8004508 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	3306      	adds	r3, #6
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800416a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004176:	429a      	cmp	r2, r3
 8004178:	d307      	bcc.n	800418a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004182:	1ad2      	subs	r2, r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	619a      	str	r2, [r3, #24]
 8004188:	e002      	b.n	8004190 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2200      	movs	r2, #0
 800418e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f040 80c0 	bne.w	800431a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	785b      	ldrb	r3, [r3, #1]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d126      	bne.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x482>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041b6:	4413      	add	r3, r2
 80041b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	011a      	lsls	r2, r3, #4
 80041c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041c2:	4413      	add	r3, r2
 80041c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041ec:	801a      	strh	r2, [r3, #0]
 80041ee:	e01a      	b.n	8004226 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	785b      	ldrb	r3, [r3, #1]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d116      	bne.n	8004226 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004206:	b29b      	uxth	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800420c:	4413      	add	r3, r2
 800420e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	011a      	lsls	r2, r3, #4
 8004216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004218:	4413      	add	r3, r2
 800421a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800421e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004222:	2200      	movs	r2, #0
 8004224:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	677b      	str	r3, [r7, #116]	@ 0x74
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	785b      	ldrb	r3, [r3, #1]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d12b      	bne.n	800428c <HAL_PCD_EP_DB_Transmit+0x51e>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004242:	b29b      	uxth	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004248:	4413      	add	r3, r2
 800424a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	011a      	lsls	r2, r3, #4
 8004252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004254:	4413      	add	r3, r2
 8004256:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800425a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800425e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426a:	b29a      	uxth	r2, r3
 800426c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004282:	b29a      	uxth	r2, r3
 8004284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	e017      	b.n	80042bc <HAL_PCD_EP_DB_Transmit+0x54e>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d113      	bne.n	80042bc <HAL_PCD_EP_DB_Transmit+0x54e>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800429c:	b29b      	uxth	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042a2:	4413      	add	r3, r2
 80042a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	011a      	lsls	r2, r3, #4
 80042ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ae:	4413      	add	r3, r2
 80042b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80042b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042b8:	2200      	movs	r2, #0
 80042ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	4619      	mov	r1, r3
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f006 fddd 	bl	800ae82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f040 811a 	bne.w	8004508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ee:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	441a      	add	r2, r3
 8004300:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800430c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004314:	b29b      	uxth	r3, r3
 8004316:	8013      	strh	r3, [r2, #0]
 8004318:	e0f6      	b.n	8004508 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d121      	bne.n	8004368 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800433a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	441a      	add	r2, r3
 8004350:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800435c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004364:	b29b      	uxth	r3, r3
 8004366:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800436e:	2b01      	cmp	r3, #1
 8004370:	f040 80ca 	bne.w	8004508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800437c:	441a      	add	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800438a:	441a      	add	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6a1a      	ldr	r2, [r3, #32]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	429a      	cmp	r2, r3
 800439a:	d30b      	bcc.n	80043b4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	6a1a      	ldr	r2, [r3, #32]
 80043a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ac:	1ad2      	subs	r2, r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	621a      	str	r2, [r3, #32]
 80043b2:	e017      	b.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d108      	bne.n	80043ce <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80043bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80043c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80043cc:	e00a      	b.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2200      	movs	r2, #0
 80043da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	785b      	ldrb	r3, [r3, #1]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d165      	bne.n	80044be <HAL_PCD_EP_DB_Transmit+0x750>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004400:	b29b      	uxth	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004406:	4413      	add	r3, r2
 8004408:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	011a      	lsls	r2, r3, #4
 8004410:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004412:	4413      	add	r3, r2
 8004414:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800441a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004424:	b29a      	uxth	r2, r3
 8004426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004428:	801a      	strh	r2, [r3, #0]
 800442a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <HAL_PCD_EP_DB_Transmit+0x6da>
 8004432:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004440:	b29a      	uxth	r2, r3
 8004442:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	e054      	b.n	80044f2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004448:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800444c:	2b3e      	cmp	r3, #62	@ 0x3e
 800444e:	d818      	bhi.n	8004482 <HAL_PCD_EP_DB_Transmit+0x714>
 8004450:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004464:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004466:	3301      	adds	r3, #1
 8004468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800446a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29a      	uxth	r2, r3
 8004470:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004472:	b29b      	uxth	r3, r3
 8004474:	029b      	lsls	r3, r3, #10
 8004476:	b29b      	uxth	r3, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	b29a      	uxth	r2, r3
 800447c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	e037      	b.n	80044f2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800448a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <HAL_PCD_EP_DB_Transmit+0x72e>
 8004496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004498:	3b01      	subs	r3, #1
 800449a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800449c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	029b      	lsls	r3, r3, #10
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e019      	b.n	80044f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	785b      	ldrb	r3, [r3, #1]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d115      	bne.n	80044f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d4:	4413      	add	r3, r2
 80044d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	011a      	lsls	r2, r3, #4
 80044de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e0:	4413      	add	r3, r2
 80044e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	6959      	ldr	r1, [r3, #20]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	895a      	ldrh	r2, [r3, #10]
 80044fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004502:	b29b      	uxth	r3, r3
 8004504:	f004 fe45 	bl	8009192 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800451e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004522:	82bb      	strh	r3, [r7, #20]
 8004524:	8abb      	ldrh	r3, [r7, #20]
 8004526:	f083 0310 	eor.w	r3, r3, #16
 800452a:	82bb      	strh	r3, [r7, #20]
 800452c:	8abb      	ldrh	r3, [r7, #20]
 800452e:	f083 0320 	eor.w	r3, r3, #32
 8004532:	82bb      	strh	r3, [r7, #20]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	8abb      	ldrh	r3, [r7, #20]
 8004544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800454c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004554:	b29b      	uxth	r3, r3
 8004556:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3790      	adds	r7, #144	@ 0x90
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004562:	b480      	push	{r7}
 8004564:	b087      	sub	sp, #28
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	607b      	str	r3, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	817b      	strh	r3, [r7, #10]
 8004570:	4613      	mov	r3, r2
 8004572:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004574:	897b      	ldrh	r3, [r7, #10]
 8004576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004580:	897b      	ldrh	r3, [r7, #10]
 8004582:	f003 0207 	and.w	r2, r3, #7
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	3310      	adds	r3, #16
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	e009      	b.n	80045ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004598:	897a      	ldrh	r2, [r7, #10]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045ac:	893b      	ldrh	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d107      	bne.n	80045c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	80da      	strh	r2, [r3, #6]
 80045c0:	e00b      	b.n	80045da <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2201      	movs	r2, #1
 80045c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	0c1b      	lsrs	r3, r3, #16
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f001 b823 	b.w	8005654 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004612:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 817d 	beq.w	800491e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004624:	4bbc      	ldr	r3, [pc, #752]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b04      	cmp	r3, #4
 800462e:	d00c      	beq.n	800464a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004630:	4bb9      	ldr	r3, [pc, #740]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b08      	cmp	r3, #8
 800463a:	d15c      	bne.n	80046f6 <HAL_RCC_OscConfig+0x10e>
 800463c:	4bb6      	ldr	r3, [pc, #728]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004648:	d155      	bne.n	80046f6 <HAL_RCC_OscConfig+0x10e>
 800464a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800464e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800465e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004662:	fab3 f383 	clz	r3, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b01      	cmp	r3, #1
 8004674:	d102      	bne.n	800467c <HAL_RCC_OscConfig+0x94>
 8004676:	4ba8      	ldr	r3, [pc, #672]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	e015      	b.n	80046a8 <HAL_RCC_OscConfig+0xc0>
 800467c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004680:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004688:	fa93 f3a3 	rbit	r3, r3
 800468c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004690:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004694:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004698:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80046a4:	4b9c      	ldr	r3, [pc, #624]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046ac:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80046b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80046b4:	fa92 f2a2 	rbit	r2, r2
 80046b8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80046bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80046c0:	fab2 f282 	clz	r2, r2
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	f042 0220 	orr.w	r2, r2, #32
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	f002 021f 	and.w	r2, r2, #31
 80046d0:	2101      	movs	r1, #1
 80046d2:	fa01 f202 	lsl.w	r2, r1, r2
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 811f 	beq.w	800491c <HAL_RCC_OscConfig+0x334>
 80046de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 8116 	bne.w	800491c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f000 bfaf 	b.w	8005654 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0x12e>
 8004708:	4b83      	ldr	r3, [pc, #524]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a82      	ldr	r2, [pc, #520]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 800470e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e036      	b.n	8004784 <HAL_RCC_OscConfig+0x19c>
 8004716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x158>
 8004726:	4b7c      	ldr	r3, [pc, #496]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a7b      	ldr	r2, [pc, #492]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 800472c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b79      	ldr	r3, [pc, #484]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a78      	ldr	r2, [pc, #480]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004738:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e021      	b.n	8004784 <HAL_RCC_OscConfig+0x19c>
 8004740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004744:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x184>
 8004752:	4b71      	ldr	r3, [pc, #452]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a70      	ldr	r2, [pc, #448]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b6e      	ldr	r3, [pc, #440]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a6d      	ldr	r2, [pc, #436]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0x19c>
 800476c:	4b6a      	ldr	r3, [pc, #424]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a69      	ldr	r2, [pc, #420]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b67      	ldr	r3, [pc, #412]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a66      	ldr	r2, [pc, #408]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 800477e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004782:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004784:	4b64      	ldr	r3, [pc, #400]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	f023 020f 	bic.w	r2, r3, #15
 800478c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004790:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	495f      	ldr	r1, [pc, #380]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 800479a:	4313      	orrs	r3, r2
 800479c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800479e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d059      	beq.n	8004862 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fd f943 	bl	8001a38 <HAL_GetTick>
 80047b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fd f93e 	bl	8001a38 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b64      	cmp	r3, #100	@ 0x64
 80047c6:	d902      	bls.n	80047ce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	f000 bf43 	b.w	8005654 <HAL_RCC_OscConfig+0x106c>
 80047ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047d2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80047e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d102      	bne.n	8004800 <HAL_RCC_OscConfig+0x218>
 80047fa:	4b47      	ldr	r3, [pc, #284]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	e015      	b.n	800482c <HAL_RCC_OscConfig+0x244>
 8004800:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004804:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004808:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800480c:	fa93 f3a3 	rbit	r3, r3
 8004810:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004814:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004818:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800481c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004820:	fa93 f3a3 	rbit	r3, r3
 8004824:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004828:	4b3b      	ldr	r3, [pc, #236]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004830:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004834:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004838:	fa92 f2a2 	rbit	r2, r2
 800483c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004840:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004844:	fab2 f282 	clz	r2, r2
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	f042 0220 	orr.w	r2, r2, #32
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	f002 021f 	and.w	r2, r2, #31
 8004854:	2101      	movs	r1, #1
 8004856:	fa01 f202 	lsl.w	r2, r1, r2
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ab      	beq.n	80047b8 <HAL_RCC_OscConfig+0x1d0>
 8004860:	e05d      	b.n	800491e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7fd f8e9 	bl	8001a38 <HAL_GetTick>
 8004866:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800486c:	f7fd f8e4 	bl	8001a38 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b64      	cmp	r3, #100	@ 0x64
 800487a:	d902      	bls.n	8004882 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	f000 bee9 	b.w	8005654 <HAL_RCC_OscConfig+0x106c>
 8004882:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004886:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800488e:	fa93 f3a3 	rbit	r3, r3
 8004892:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004896:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489a:	fab3 f383 	clz	r3, r3
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d102      	bne.n	80048b4 <HAL_RCC_OscConfig+0x2cc>
 80048ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	e015      	b.n	80048e0 <HAL_RCC_OscConfig+0x2f8>
 80048b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048b8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80048c0:	fa93 f3a3 	rbit	r3, r3
 80048c4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80048c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048cc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80048d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80048d4:	fa93 f3a3 	rbit	r3, r3
 80048d8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80048dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004918 <HAL_RCC_OscConfig+0x330>)
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80048e4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80048e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80048ec:	fa92 f2a2 	rbit	r2, r2
 80048f0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80048f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80048f8:	fab2 f282 	clz	r2, r2
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	f042 0220 	orr.w	r2, r2, #32
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	f002 021f 	and.w	r2, r2, #31
 8004908:	2101      	movs	r1, #1
 800490a:	fa01 f202 	lsl.w	r2, r1, r2
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1ab      	bne.n	800486c <HAL_RCC_OscConfig+0x284>
 8004914:	e003      	b.n	800491e <HAL_RCC_OscConfig+0x336>
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800491e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004922:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 817d 	beq.w	8004c2e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004934:	4ba6      	ldr	r3, [pc, #664]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004940:	4ba3      	ldr	r3, [pc, #652]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 030c 	and.w	r3, r3, #12
 8004948:	2b08      	cmp	r3, #8
 800494a:	d172      	bne.n	8004a32 <HAL_RCC_OscConfig+0x44a>
 800494c:	4ba0      	ldr	r3, [pc, #640]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d16c      	bne.n	8004a32 <HAL_RCC_OscConfig+0x44a>
 8004958:	2302      	movs	r3, #2
 800495a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004962:	fa93 f3a3 	rbit	r3, r3
 8004966:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800496a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	d102      	bne.n	8004988 <HAL_RCC_OscConfig+0x3a0>
 8004982:	4b93      	ldr	r3, [pc, #588]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	e013      	b.n	80049b0 <HAL_RCC_OscConfig+0x3c8>
 8004988:	2302      	movs	r3, #2
 800498a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800499a:	2302      	movs	r3, #2
 800499c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80049a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80049ac:	4b88      	ldr	r3, [pc, #544]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	2202      	movs	r2, #2
 80049b2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80049b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80049ba:	fa92 f2a2 	rbit	r2, r2
 80049be:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80049c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80049c6:	fab2 f282 	clz	r2, r2
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	f042 0220 	orr.w	r2, r2, #32
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	f002 021f 	and.w	r2, r2, #31
 80049d6:	2101      	movs	r1, #1
 80049d8:	fa01 f202 	lsl.w	r2, r1, r2
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCC_OscConfig+0x410>
 80049e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d002      	beq.n	80049f8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f000 be2e 	b.w	8005654 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f8:	4b75      	ldr	r3, [pc, #468]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	21f8      	movs	r1, #248	@ 0xf8
 8004a0e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a12:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004a16:	fa91 f1a1 	rbit	r1, r1
 8004a1a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004a1e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004a22:	fab1 f181 	clz	r1, r1
 8004a26:	b2c9      	uxtb	r1, r1
 8004a28:	408b      	lsls	r3, r1
 8004a2a:	4969      	ldr	r1, [pc, #420]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a30:	e0fd      	b.n	8004c2e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8088 	beq.w	8004b54 <HAL_RCC_OscConfig+0x56c>
 8004a44:	2301      	movs	r3, #1
 8004a46:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004a4e:	fa93 f3a3 	rbit	r3, r3
 8004a52:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004a56:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a5a:	fab3 f383 	clz	r3, r3
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a64:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fc ffe2 	bl	8001a38 <HAL_GetTick>
 8004a74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fc ffdd 	bl	8001a38 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d902      	bls.n	8004a90 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	f000 bde2 	b.w	8005654 <HAL_RCC_OscConfig+0x106c>
 8004a90:	2302      	movs	r3, #2
 8004a92:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a96:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004a9a:	fa93 f3a3 	rbit	r3, r3
 8004a9e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004aa2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa6:	fab3 f383 	clz	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f043 0301 	orr.w	r3, r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d102      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4d8>
 8004aba:	4b45      	ldr	r3, [pc, #276]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	e013      	b.n	8004ae8 <HAL_RCC_OscConfig+0x500>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004aca:	fa93 f3a3 	rbit	r3, r3
 8004ace:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004ad8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004aee:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004af2:	fa92 f2a2 	rbit	r2, r2
 8004af6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004afa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004afe:	fab2 f282 	clz	r2, r2
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	f042 0220 	orr.w	r2, r2, #32
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	f002 021f 	and.w	r2, r2, #31
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f202 	lsl.w	r2, r1, r2
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0af      	beq.n	8004a7a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	21f8      	movs	r1, #248	@ 0xf8
 8004b30:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b34:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004b38:	fa91 f1a1 	rbit	r1, r1
 8004b3c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004b40:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004b44:	fab1 f181 	clz	r1, r1
 8004b48:	b2c9      	uxtb	r1, r1
 8004b4a:	408b      	lsls	r3, r1
 8004b4c:	4920      	ldr	r1, [pc, #128]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]
 8004b52:	e06c      	b.n	8004c2e <HAL_RCC_OscConfig+0x646>
 8004b54:	2301      	movs	r3, #1
 8004b56:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004b66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fc ff5a 	bl	8001a38 <HAL_GetTick>
 8004b84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b8a:	f7fc ff55 	bl	8001a38 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d902      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	f000 bd5a 	b.w	8005654 <HAL_RCC_OscConfig+0x106c>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004baa:	fa93 f3a3 	rbit	r3, r3
 8004bae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb6:	fab3 f383 	clz	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d104      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x5ec>
 8004bca:	4b01      	ldr	r3, [pc, #4]	@ (8004bd0 <HAL_RCC_OscConfig+0x5e8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	e015      	b.n	8004bfc <HAL_RCC_OscConfig+0x614>
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004be6:	2302      	movs	r3, #2
 8004be8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004bec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004bf0:	fa93 f3a3 	rbit	r3, r3
 8004bf4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004bf8:	4bc8      	ldr	r3, [pc, #800]	@ (8004f1c <HAL_RCC_OscConfig+0x934>)
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004c02:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004c06:	fa92 f2a2 	rbit	r2, r2
 8004c0a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004c0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004c12:	fab2 f282 	clz	r2, r2
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	f042 0220 	orr.w	r2, r2, #32
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	f002 021f 	and.w	r2, r2, #31
 8004c22:	2101      	movs	r1, #1
 8004c24:	fa01 f202 	lsl.w	r2, r1, r2
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ad      	bne.n	8004b8a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8110 	beq.w	8004e64 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d079      	beq.n	8004d48 <HAL_RCC_OscConfig+0x760>
 8004c54:	2301      	movs	r3, #1
 8004c56:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c5e:	fa93 f3a3 	rbit	r3, r3
 8004c62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	4bab      	ldr	r3, [pc, #684]	@ (8004f20 <HAL_RCC_OscConfig+0x938>)
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7e:	f7fc fedb 	bl	8001a38 <HAL_GetTick>
 8004c82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c88:	f7fc fed6 	bl	8001a38 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d902      	bls.n	8004c9e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	f000 bcdb 	b.w	8005654 <HAL_RCC_OscConfig+0x106c>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004ca8:	fa93 f3a3 	rbit	r3, r3
 8004cac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004cb8:	2202      	movs	r2, #2
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	fa93 f2a3 	rbit	r2, r3
 8004cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cdc:	2202      	movs	r2, #2
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	fa93 f2a3 	rbit	r2, r3
 8004cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cf2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004cf6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf8:	4b88      	ldr	r3, [pc, #544]	@ (8004f1c <HAL_RCC_OscConfig+0x934>)
 8004cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004d04:	2102      	movs	r1, #2
 8004d06:	6019      	str	r1, [r3, #0]
 8004d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	fa93 f1a3 	rbit	r1, r3
 8004d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004d1e:	6019      	str	r1, [r3, #0]
  return result;
 8004d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0a0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x6a0>
 8004d46:	e08d      	b.n	8004e64 <HAL_RCC_OscConfig+0x87c>
 8004d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d50:	2201      	movs	r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	fa93 f2a3 	rbit	r2, r3
 8004d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004d6a:	601a      	str	r2, [r3, #0]
  return result;
 8004d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004d74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b68      	ldr	r3, [pc, #416]	@ (8004f20 <HAL_RCC_OscConfig+0x938>)
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	461a      	mov	r2, r3
 8004d86:	2300      	movs	r3, #0
 8004d88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8a:	f7fc fe55 	bl	8001a38 <HAL_GetTick>
 8004d8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fc fe50 	bl	8001a38 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d902      	bls.n	8004daa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	f000 bc55 	b.w	8005654 <HAL_RCC_OscConfig+0x106c>
 8004daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004db2:	2202      	movs	r2, #2
 8004db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	fa93 f2a3 	rbit	r2, r3
 8004dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	fa93 f2a3 	rbit	r2, r3
 8004de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004df6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	fa93 f2a3 	rbit	r2, r3
 8004e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e10:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004e14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e16:	4b41      	ldr	r3, [pc, #260]	@ (8004f1c <HAL_RCC_OscConfig+0x934>)
 8004e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004e22:	2102      	movs	r1, #2
 8004e24:	6019      	str	r1, [r3, #0]
 8004e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	fa93 f1a3 	rbit	r1, r3
 8004e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004e3c:	6019      	str	r1, [r3, #0]
  return result;
 8004e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e42:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	fab3 f383 	clz	r3, r3
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2101      	movs	r1, #1
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d197      	bne.n	8004d94 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 81a1 	beq.w	80051bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e80:	4b26      	ldr	r3, [pc, #152]	@ (8004f1c <HAL_RCC_OscConfig+0x934>)
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d116      	bne.n	8004eba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8c:	4b23      	ldr	r3, [pc, #140]	@ (8004f1c <HAL_RCC_OscConfig+0x934>)
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	4a22      	ldr	r2, [pc, #136]	@ (8004f1c <HAL_RCC_OscConfig+0x934>)
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	61d3      	str	r3, [r2, #28]
 8004e98:	4b20      	ldr	r3, [pc, #128]	@ (8004f1c <HAL_RCC_OscConfig+0x934>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eae:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004eb2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eba:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <HAL_RCC_OscConfig+0x93c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d11a      	bne.n	8004efc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ec6:	4b17      	ldr	r3, [pc, #92]	@ (8004f24 <HAL_RCC_OscConfig+0x93c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a16      	ldr	r2, [pc, #88]	@ (8004f24 <HAL_RCC_OscConfig+0x93c>)
 8004ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed2:	f7fc fdb1 	bl	8001a38 <HAL_GetTick>
 8004ed6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eda:	e009      	b.n	8004ef0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004edc:	f7fc fdac 	bl	8001a38 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b64      	cmp	r3, #100	@ 0x64
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e3b1      	b.n	8005654 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <HAL_RCC_OscConfig+0x93c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ef      	beq.n	8004edc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d10d      	bne.n	8004f28 <HAL_RCC_OscConfig+0x940>
 8004f0c:	4b03      	ldr	r3, [pc, #12]	@ (8004f1c <HAL_RCC_OscConfig+0x934>)
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	4a02      	ldr	r2, [pc, #8]	@ (8004f1c <HAL_RCC_OscConfig+0x934>)
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	6213      	str	r3, [r2, #32]
 8004f18:	e03c      	b.n	8004f94 <HAL_RCC_OscConfig+0x9ac>
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	10908120 	.word	0x10908120
 8004f24:	40007000 	.word	0x40007000
 8004f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10c      	bne.n	8004f52 <HAL_RCC_OscConfig+0x96a>
 8004f38:	4bc1      	ldr	r3, [pc, #772]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	4ac0      	ldr	r2, [pc, #768]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	6213      	str	r3, [r2, #32]
 8004f44:	4bbe      	ldr	r3, [pc, #760]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	4abd      	ldr	r2, [pc, #756]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f4a:	f023 0304 	bic.w	r3, r3, #4
 8004f4e:	6213      	str	r3, [r2, #32]
 8004f50:	e020      	b.n	8004f94 <HAL_RCC_OscConfig+0x9ac>
 8004f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b05      	cmp	r3, #5
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x994>
 8004f62:	4bb7      	ldr	r3, [pc, #732]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	4ab6      	ldr	r2, [pc, #728]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	6213      	str	r3, [r2, #32]
 8004f6e:	4bb4      	ldr	r3, [pc, #720]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	4ab3      	ldr	r2, [pc, #716]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	6213      	str	r3, [r2, #32]
 8004f7a:	e00b      	b.n	8004f94 <HAL_RCC_OscConfig+0x9ac>
 8004f7c:	4bb0      	ldr	r3, [pc, #704]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4aaf      	ldr	r2, [pc, #700]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	6213      	str	r3, [r2, #32]
 8004f88:	4bad      	ldr	r3, [pc, #692]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4aac      	ldr	r2, [pc, #688]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8004f8e:	f023 0304 	bic.w	r3, r3, #4
 8004f92:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8081 	beq.w	80050a8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa6:	f7fc fd47 	bl	8001a38 <HAL_GetTick>
 8004faa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb0:	f7fc fd42 	bl	8001a38 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e345      	b.n	8005654 <HAL_RCC_OscConfig+0x106c>
 8004fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fcc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	fa93 f2a3 	rbit	r2, r3
 8004fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ff0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ffc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	fa93 f2a3 	rbit	r2, r3
 8005006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800500a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800500e:	601a      	str	r2, [r3, #0]
  return result;
 8005010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005014:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005018:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f043 0302 	orr.w	r3, r3, #2
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d102      	bne.n	8005034 <HAL_RCC_OscConfig+0xa4c>
 800502e:	4b84      	ldr	r3, [pc, #528]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	e013      	b.n	800505c <HAL_RCC_OscConfig+0xa74>
 8005034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005038:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800503c:	2202      	movs	r2, #2
 800503e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005044:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	fa93 f2a3 	rbit	r2, r3
 800504e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005052:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	4b79      	ldr	r3, [pc, #484]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 800505a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005060:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005064:	2102      	movs	r1, #2
 8005066:	6011      	str	r1, [r2, #0]
 8005068:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800506c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	fa92 f1a2 	rbit	r1, r2
 8005076:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800507a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800507e:	6011      	str	r1, [r2, #0]
  return result;
 8005080:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005084:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	fab2 f282 	clz	r2, r2
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	f002 021f 	and.w	r2, r2, #31
 800509a:	2101      	movs	r1, #1
 800509c:	fa01 f202 	lsl.w	r2, r1, r2
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d084      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x9c8>
 80050a6:	e07f      	b.n	80051a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a8:	f7fc fcc6 	bl	8001a38 <HAL_GetTick>
 80050ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b0:	e00b      	b.n	80050ca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7fc fcc1 	bl	8001a38 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e2c4      	b.n	8005654 <HAL_RCC_OscConfig+0x106c>
 80050ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ce:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80050d2:	2202      	movs	r2, #2
 80050d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	fa93 f2a3 	rbit	r2, r3
 80050e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050e8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050f2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80050f6:	2202      	movs	r2, #2
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	fa93 f2a3 	rbit	r2, r3
 8005108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800510c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005110:	601a      	str	r2, [r3, #0]
  return result;
 8005112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005116:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800511a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511c:	fab3 f383 	clz	r3, r3
 8005120:	b2db      	uxtb	r3, r3
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	b2db      	uxtb	r3, r3
 8005126:	f043 0302 	orr.w	r3, r3, #2
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d102      	bne.n	8005136 <HAL_RCC_OscConfig+0xb4e>
 8005130:	4b43      	ldr	r3, [pc, #268]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	e013      	b.n	800515e <HAL_RCC_OscConfig+0xb76>
 8005136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800513a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800513e:	2202      	movs	r2, #2
 8005140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005146:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	fa93 f2a3 	rbit	r2, r3
 8005150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005154:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	4b39      	ldr	r3, [pc, #228]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005162:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005166:	2102      	movs	r1, #2
 8005168:	6011      	str	r1, [r2, #0]
 800516a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800516e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	fa92 f1a2 	rbit	r1, r2
 8005178:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800517c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005180:	6011      	str	r1, [r2, #0]
  return result;
 8005182:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005186:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	fab2 f282 	clz	r2, r2
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	f002 021f 	and.w	r2, r2, #31
 800519c:	2101      	movs	r1, #1
 800519e:	fa01 f202 	lsl.w	r2, r1, r2
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d184      	bne.n	80050b2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d105      	bne.n	80051bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b0:	4b23      	ldr	r3, [pc, #140]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	4a22      	ldr	r2, [pc, #136]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 80051b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8242 	beq.w	8005652 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005240 <HAL_RCC_OscConfig+0xc58>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	f000 8213 	beq.w	8005602 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	f040 8162 	bne.w	80054b2 <HAL_RCC_OscConfig+0xeca>
 80051ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051f2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80051f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005200:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	fa93 f2a3 	rbit	r2, r3
 800520a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800520e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005212:	601a      	str	r2, [r3, #0]
  return result;
 8005214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005218:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800521c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521e:	fab3 f383 	clz	r3, r3
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005228:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	461a      	mov	r2, r3
 8005230:	2300      	movs	r3, #0
 8005232:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005234:	f7fc fc00 	bl	8001a38 <HAL_GetTick>
 8005238:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800523c:	e00c      	b.n	8005258 <HAL_RCC_OscConfig+0xc70>
 800523e:	bf00      	nop
 8005240:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005244:	f7fc fbf8 	bl	8001a38 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e1fd      	b.n	8005654 <HAL_RCC_OscConfig+0x106c>
 8005258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800525c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005260:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800526a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	fa93 f2a3 	rbit	r2, r3
 8005274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005278:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800527c:	601a      	str	r2, [r3, #0]
  return result;
 800527e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005282:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005286:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005288:	fab3 f383 	clz	r3, r3
 800528c:	b2db      	uxtb	r3, r3
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <HAL_RCC_OscConfig+0xcba>
 800529c:	4bb0      	ldr	r3, [pc, #704]	@ (8005560 <HAL_RCC_OscConfig+0xf78>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	e027      	b.n	80052f2 <HAL_RCC_OscConfig+0xd0a>
 80052a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80052aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052b4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	fa93 f2a3 	rbit	r2, r3
 80052be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052c2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052cc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80052d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052da:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	fa93 f2a3 	rbit	r2, r3
 80052e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	4b9c      	ldr	r3, [pc, #624]	@ (8005560 <HAL_RCC_OscConfig+0xf78>)
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052f6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80052fa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80052fe:	6011      	str	r1, [r2, #0]
 8005300:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005304:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	fa92 f1a2 	rbit	r1, r2
 800530e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005312:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005316:	6011      	str	r1, [r2, #0]
  return result;
 8005318:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800531c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	fab2 f282 	clz	r2, r2
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	f042 0220 	orr.w	r2, r2, #32
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	f002 021f 	and.w	r2, r2, #31
 8005332:	2101      	movs	r1, #1
 8005334:	fa01 f202 	lsl.w	r2, r1, r2
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d182      	bne.n	8005244 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800533e:	4b88      	ldr	r3, [pc, #544]	@ (8005560 <HAL_RCC_OscConfig+0xf78>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800534a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005356:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	430b      	orrs	r3, r1
 8005360:	497f      	ldr	r1, [pc, #508]	@ (8005560 <HAL_RCC_OscConfig+0xf78>)
 8005362:	4313      	orrs	r3, r2
 8005364:	604b      	str	r3, [r1, #4]
 8005366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800536a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800536e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005378:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	fa93 f2a3 	rbit	r2, r3
 8005382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005386:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800538a:	601a      	str	r2, [r3, #0]
  return result;
 800538c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005390:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005394:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005396:	fab3 f383 	clz	r3, r3
 800539a:	b2db      	uxtb	r3, r3
 800539c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80053a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	461a      	mov	r2, r3
 80053a8:	2301      	movs	r3, #1
 80053aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ac:	f7fc fb44 	bl	8001a38 <HAL_GetTick>
 80053b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053b4:	e009      	b.n	80053ca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b6:	f7fc fb3f 	bl	8001a38 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e144      	b.n	8005654 <HAL_RCC_OscConfig+0x106c>
 80053ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053ce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80053d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053dc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	fa93 f2a3 	rbit	r2, r3
 80053e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053ea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80053ee:	601a      	str	r2, [r3, #0]
  return result;
 80053f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053f4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80053f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053fa:	fab3 f383 	clz	r3, r3
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b01      	cmp	r3, #1
 800540c:	d102      	bne.n	8005414 <HAL_RCC_OscConfig+0xe2c>
 800540e:	4b54      	ldr	r3, [pc, #336]	@ (8005560 <HAL_RCC_OscConfig+0xf78>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	e027      	b.n	8005464 <HAL_RCC_OscConfig+0xe7c>
 8005414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005418:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800541c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005426:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	fa93 f2a3 	rbit	r2, r3
 8005430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005434:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800543e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005442:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800544c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	fa93 f2a3 	rbit	r2, r3
 8005456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800545a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	4b3f      	ldr	r3, [pc, #252]	@ (8005560 <HAL_RCC_OscConfig+0xf78>)
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005468:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800546c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005470:	6011      	str	r1, [r2, #0]
 8005472:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005476:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	fa92 f1a2 	rbit	r1, r2
 8005480:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005484:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005488:	6011      	str	r1, [r2, #0]
  return result;
 800548a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800548e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	fab2 f282 	clz	r2, r2
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	f042 0220 	orr.w	r2, r2, #32
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	f002 021f 	and.w	r2, r2, #31
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f202 	lsl.w	r2, r1, r2
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d082      	beq.n	80053b6 <HAL_RCC_OscConfig+0xdce>
 80054b0:	e0cf      	b.n	8005652 <HAL_RCC_OscConfig+0x106a>
 80054b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054b6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80054ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054c4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	fa93 f2a3 	rbit	r2, r3
 80054ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054d2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80054d6:	601a      	str	r2, [r3, #0]
  return result;
 80054d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054dc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80054e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e2:	fab3 f383 	clz	r3, r3
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80054ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	461a      	mov	r2, r3
 80054f4:	2300      	movs	r3, #0
 80054f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f8:	f7fc fa9e 	bl	8001a38 <HAL_GetTick>
 80054fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005500:	e009      	b.n	8005516 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005502:	f7fc fa99 	bl	8001a38 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e09e      	b.n	8005654 <HAL_RCC_OscConfig+0x106c>
 8005516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800551a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800551e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005528:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	fa93 f2a3 	rbit	r2, r3
 8005532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005536:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800553a:	601a      	str	r2, [r3, #0]
  return result;
 800553c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005540:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005544:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005546:	fab3 f383 	clz	r3, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b01      	cmp	r3, #1
 8005558:	d104      	bne.n	8005564 <HAL_RCC_OscConfig+0xf7c>
 800555a:	4b01      	ldr	r3, [pc, #4]	@ (8005560 <HAL_RCC_OscConfig+0xf78>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	e029      	b.n	80055b4 <HAL_RCC_OscConfig+0xfcc>
 8005560:	40021000 	.word	0x40021000
 8005564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005568:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800556c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005576:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	fa93 f2a3 	rbit	r2, r3
 8005580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005584:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800558e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005592:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800559c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	fa93 f2a3 	rbit	r2, r3
 80055a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055aa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005660 <HAL_RCC_OscConfig+0x1078>)
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055b8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80055bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80055c0:	6011      	str	r1, [r2, #0]
 80055c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055c6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	fa92 f1a2 	rbit	r1, r2
 80055d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055d4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80055d8:	6011      	str	r1, [r2, #0]
  return result;
 80055da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055de:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	fab2 f282 	clz	r2, r2
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	f042 0220 	orr.w	r2, r2, #32
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	f002 021f 	and.w	r2, r2, #31
 80055f4:	2101      	movs	r1, #1
 80055f6:	fa01 f202 	lsl.w	r2, r1, r2
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d180      	bne.n	8005502 <HAL_RCC_OscConfig+0xf1a>
 8005600:	e027      	b.n	8005652 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005606:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e01e      	b.n	8005654 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005616:	4b12      	ldr	r3, [pc, #72]	@ (8005660 <HAL_RCC_OscConfig+0x1078>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800561e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005622:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800562a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	429a      	cmp	r2, r3
 8005634:	d10b      	bne.n	800564e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005636:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800563a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800563e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005642:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800564a:	429a      	cmp	r2, r3
 800564c:	d001      	beq.n	8005652 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	40021000 	.word	0x40021000

08005664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b09e      	sub	sp, #120	@ 0x78
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e162      	b.n	8005942 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800567c:	4b90      	ldr	r3, [pc, #576]	@ (80058c0 <HAL_RCC_ClockConfig+0x25c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d910      	bls.n	80056ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568a:	4b8d      	ldr	r3, [pc, #564]	@ (80058c0 <HAL_RCC_ClockConfig+0x25c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 0207 	bic.w	r2, r3, #7
 8005692:	498b      	ldr	r1, [pc, #556]	@ (80058c0 <HAL_RCC_ClockConfig+0x25c>)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	4313      	orrs	r3, r2
 8005698:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b89      	ldr	r3, [pc, #548]	@ (80058c0 <HAL_RCC_ClockConfig+0x25c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e14a      	b.n	8005942 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b8:	4b82      	ldr	r3, [pc, #520]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	497f      	ldr	r1, [pc, #508]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80dc 	beq.w	8005890 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d13c      	bne.n	800575a <HAL_RCC_ClockConfig+0xf6>
 80056e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80056e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056e8:	fa93 f3a3 	rbit	r3, r3
 80056ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80056ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f0:	fab3 f383 	clz	r3, r3
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d102      	bne.n	800570a <HAL_RCC_ClockConfig+0xa6>
 8005704:	4b6f      	ldr	r3, [pc, #444]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	e00f      	b.n	800572a <HAL_RCC_ClockConfig+0xc6>
 800570a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800570e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005710:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005712:	fa93 f3a3 	rbit	r3, r3
 8005716:	667b      	str	r3, [r7, #100]	@ 0x64
 8005718:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800571c:	663b      	str	r3, [r7, #96]	@ 0x60
 800571e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005720:	fa93 f3a3 	rbit	r3, r3
 8005724:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005726:	4b67      	ldr	r3, [pc, #412]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 8005728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800572e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005730:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005732:	fa92 f2a2 	rbit	r2, r2
 8005736:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005738:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800573a:	fab2 f282 	clz	r2, r2
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	f042 0220 	orr.w	r2, r2, #32
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	f002 021f 	and.w	r2, r2, #31
 800574a:	2101      	movs	r1, #1
 800574c:	fa01 f202 	lsl.w	r2, r1, r2
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d17b      	bne.n	800584e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e0f3      	b.n	8005942 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d13c      	bne.n	80057dc <HAL_RCC_ClockConfig+0x178>
 8005762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005766:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800576a:	fa93 f3a3 	rbit	r3, r3
 800576e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005772:	fab3 f383 	clz	r3, r3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f043 0301 	orr.w	r3, r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d102      	bne.n	800578c <HAL_RCC_ClockConfig+0x128>
 8005786:	4b4f      	ldr	r3, [pc, #316]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	e00f      	b.n	80057ac <HAL_RCC_ClockConfig+0x148>
 800578c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005790:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005794:	fa93 f3a3 	rbit	r3, r3
 8005798:	647b      	str	r3, [r7, #68]	@ 0x44
 800579a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800579e:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a2:	fa93 f3a3 	rbit	r3, r3
 80057a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057a8:	4b46      	ldr	r3, [pc, #280]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 80057aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80057b0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80057b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057b4:	fa92 f2a2 	rbit	r2, r2
 80057b8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80057ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057bc:	fab2 f282 	clz	r2, r2
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	f042 0220 	orr.w	r2, r2, #32
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	f002 021f 	and.w	r2, r2, #31
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f202 	lsl.w	r2, r1, r2
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d13a      	bne.n	800584e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0b2      	b.n	8005942 <HAL_RCC_ClockConfig+0x2de>
 80057dc:	2302      	movs	r3, #2
 80057de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	fa93 f3a3 	rbit	r3, r3
 80057e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80057e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ea:	fab3 f383 	clz	r3, r3
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d102      	bne.n	8005804 <HAL_RCC_ClockConfig+0x1a0>
 80057fe:	4b31      	ldr	r3, [pc, #196]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	e00d      	b.n	8005820 <HAL_RCC_ClockConfig+0x1bc>
 8005804:	2302      	movs	r3, #2
 8005806:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580a:	fa93 f3a3 	rbit	r3, r3
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005810:	2302      	movs	r3, #2
 8005812:	623b      	str	r3, [r7, #32]
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	fa93 f3a3 	rbit	r3, r3
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	4b29      	ldr	r3, [pc, #164]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	2202      	movs	r2, #2
 8005822:	61ba      	str	r2, [r7, #24]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	fa92 f2a2 	rbit	r2, r2
 800582a:	617a      	str	r2, [r7, #20]
  return result;
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	fab2 f282 	clz	r2, r2
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	f042 0220 	orr.w	r2, r2, #32
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	f002 021f 	and.w	r2, r2, #31
 800583e:	2101      	movs	r1, #1
 8005840:	fa01 f202 	lsl.w	r2, r1, r2
 8005844:	4013      	ands	r3, r2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e079      	b.n	8005942 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800584e:	4b1d      	ldr	r3, [pc, #116]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f023 0203 	bic.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	491a      	ldr	r1, [pc, #104]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 800585c:	4313      	orrs	r3, r2
 800585e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005860:	f7fc f8ea 	bl	8001a38 <HAL_GetTick>
 8005864:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	e00a      	b.n	800587e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005868:	f7fc f8e6 	bl	8001a38 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e061      	b.n	8005942 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587e:	4b11      	ldr	r3, [pc, #68]	@ (80058c4 <HAL_RCC_ClockConfig+0x260>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f003 020c 	and.w	r2, r3, #12
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	429a      	cmp	r2, r3
 800588e:	d1eb      	bne.n	8005868 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005890:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <HAL_RCC_ClockConfig+0x25c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d214      	bcs.n	80058c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589e:	4b08      	ldr	r3, [pc, #32]	@ (80058c0 <HAL_RCC_ClockConfig+0x25c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 0207 	bic.w	r2, r3, #7
 80058a6:	4906      	ldr	r1, [pc, #24]	@ (80058c0 <HAL_RCC_ClockConfig+0x25c>)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ae:	4b04      	ldr	r3, [pc, #16]	@ (80058c0 <HAL_RCC_ClockConfig+0x25c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d005      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e040      	b.n	8005942 <HAL_RCC_ClockConfig+0x2de>
 80058c0:	40022000 	.word	0x40022000
 80058c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d4:	4b1d      	ldr	r3, [pc, #116]	@ (800594c <HAL_RCC_ClockConfig+0x2e8>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	491a      	ldr	r1, [pc, #104]	@ (800594c <HAL_RCC_ClockConfig+0x2e8>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058f2:	4b16      	ldr	r3, [pc, #88]	@ (800594c <HAL_RCC_ClockConfig+0x2e8>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4912      	ldr	r1, [pc, #72]	@ (800594c <HAL_RCC_ClockConfig+0x2e8>)
 8005902:	4313      	orrs	r3, r2
 8005904:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005906:	f000 f829 	bl	800595c <HAL_RCC_GetSysClockFreq>
 800590a:	4601      	mov	r1, r0
 800590c:	4b0f      	ldr	r3, [pc, #60]	@ (800594c <HAL_RCC_ClockConfig+0x2e8>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005914:	22f0      	movs	r2, #240	@ 0xf0
 8005916:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	fa92 f2a2 	rbit	r2, r2
 800591e:	60fa      	str	r2, [r7, #12]
  return result;
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	fab2 f282 	clz	r2, r2
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	40d3      	lsrs	r3, r2
 800592a:	4a09      	ldr	r2, [pc, #36]	@ (8005950 <HAL_RCC_ClockConfig+0x2ec>)
 800592c:	5cd3      	ldrb	r3, [r2, r3]
 800592e:	fa21 f303 	lsr.w	r3, r1, r3
 8005932:	4a08      	ldr	r2, [pc, #32]	@ (8005954 <HAL_RCC_ClockConfig+0x2f0>)
 8005934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005936:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <HAL_RCC_ClockConfig+0x2f4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7fc f838 	bl	80019b0 <HAL_InitTick>
  
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3778      	adds	r7, #120	@ 0x78
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40021000 	.word	0x40021000
 8005950:	0800e270 	.word	0x0800e270
 8005954:	20000000 	.word	0x20000000
 8005958:	20000004 	.word	0x20000004

0800595c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	2300      	movs	r3, #0
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	2300      	movs	r3, #0
 8005970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005976:	4b1e      	ldr	r3, [pc, #120]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 030c 	and.w	r3, r3, #12
 8005982:	2b04      	cmp	r3, #4
 8005984:	d002      	beq.n	800598c <HAL_RCC_GetSysClockFreq+0x30>
 8005986:	2b08      	cmp	r3, #8
 8005988:	d003      	beq.n	8005992 <HAL_RCC_GetSysClockFreq+0x36>
 800598a:	e026      	b.n	80059da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800598c:	4b19      	ldr	r3, [pc, #100]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800598e:	613b      	str	r3, [r7, #16]
      break;
 8005990:	e026      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	0c9b      	lsrs	r3, r3, #18
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	4a17      	ldr	r2, [pc, #92]	@ (80059f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800599c:	5cd3      	ldrb	r3, [r2, r3]
 800599e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80059a0:	4b13      	ldr	r3, [pc, #76]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80059a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	4a14      	ldr	r2, [pc, #80]	@ (80059fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80059aa:	5cd3      	ldrb	r3, [r2, r3]
 80059ac:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80059b8:	4a0e      	ldr	r2, [pc, #56]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e004      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	613b      	str	r3, [r7, #16]
      break;
 80059d8:	e002      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059da:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80059dc:	613b      	str	r3, [r7, #16]
      break;
 80059de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059e0:	693b      	ldr	r3, [r7, #16]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40021000 	.word	0x40021000
 80059f4:	007a1200 	.word	0x007a1200
 80059f8:	0800e280 	.word	0x0800e280
 80059fc:	0800e290 	.word	0x0800e290
 8005a00:	003d0900 	.word	0x003d0900

08005a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b092      	sub	sp, #72	@ 0x48
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80d4 	beq.w	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a28:	4b4e      	ldr	r3, [pc, #312]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10e      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a34:	4b4b      	ldr	r3, [pc, #300]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	4a4a      	ldr	r2, [pc, #296]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a3e:	61d3      	str	r3, [r2, #28]
 8005a40:	4b48      	ldr	r3, [pc, #288]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a52:	4b45      	ldr	r3, [pc, #276]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d118      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a5e:	4b42      	ldr	r3, [pc, #264]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a41      	ldr	r2, [pc, #260]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a6a:	f7fb ffe5 	bl	8001a38 <HAL_GetTick>
 8005a6e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a70:	e008      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a72:	f7fb ffe1 	bl	8001a38 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b64      	cmp	r3, #100	@ 0x64
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e169      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a84:	4b38      	ldr	r3, [pc, #224]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a90:	4b34      	ldr	r3, [pc, #208]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8084 	beq.w	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d07c      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005abe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	fa93 f3a3 	rbit	r3, r3
 8005ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aca:	fab3 f383 	clz	r3, r3
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4b26      	ldr	r3, [pc, #152]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2301      	movs	r3, #1
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	fa93 f3a3 	rbit	r3, r3
 8005aea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005aee:	fab3 f383 	clz	r3, r3
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	4b1d      	ldr	r3, [pc, #116]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	461a      	mov	r2, r3
 8005afe:	2300      	movs	r3, #0
 8005b00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b02:	4a18      	ldr	r2, [pc, #96]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d04b      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b12:	f7fb ff91 	bl	8001a38 <HAL_GetTick>
 8005b16:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b18:	e00a      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1a:	f7fb ff8d 	bl	8001a38 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e113      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005b30:	2302      	movs	r3, #2
 8005b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b36:	fa93 f3a3 	rbit	r3, r3
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	fa93 f3a3 	rbit	r3, r3
 8005b46:	61fb      	str	r3, [r7, #28]
  return result;
 8005b48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b4a:	fab3 f383 	clz	r3, r3
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	095b      	lsrs	r3, r3, #5
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f043 0302 	orr.w	r3, r3, #2
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d108      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005b5e:	4b01      	ldr	r3, [pc, #4]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	e00d      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005b64:	40021000 	.word	0x40021000
 8005b68:	40007000 	.word	0x40007000
 8005b6c:	10908100 	.word	0x10908100
 8005b70:	2302      	movs	r3, #2
 8005b72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	fa93 f3a3 	rbit	r3, r3
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	4b78      	ldr	r3, [pc, #480]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	2202      	movs	r2, #2
 8005b82:	613a      	str	r2, [r7, #16]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	fa92 f2a2 	rbit	r2, r2
 8005b8a:	60fa      	str	r2, [r7, #12]
  return result;
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	fab2 f282 	clz	r2, r2
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	f002 021f 	and.w	r2, r2, #31
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0b7      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005baa:	4b6d      	ldr	r3, [pc, #436]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	496a      	ldr	r1, [pc, #424]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d105      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc4:	4b66      	ldr	r3, [pc, #408]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	4a65      	ldr	r2, [pc, #404]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bdc:	4b60      	ldr	r3, [pc, #384]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be0:	f023 0203 	bic.w	r2, r3, #3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	495d      	ldr	r1, [pc, #372]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bfa:	4b59      	ldr	r3, [pc, #356]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	4956      	ldr	r1, [pc, #344]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d008      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c18:	4b51      	ldr	r3, [pc, #324]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	494e      	ldr	r1, [pc, #312]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d008      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c36:	4b4a      	ldr	r3, [pc, #296]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3a:	f023 0210 	bic.w	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	4947      	ldr	r1, [pc, #284]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005c54:	4b42      	ldr	r3, [pc, #264]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	493f      	ldr	r1, [pc, #252]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c72:	4b3b      	ldr	r3, [pc, #236]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c76:	f023 0220 	bic.w	r2, r3, #32
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	4938      	ldr	r1, [pc, #224]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c90:	4b33      	ldr	r3, [pc, #204]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	4930      	ldr	r1, [pc, #192]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cae:	4b2c      	ldr	r3, [pc, #176]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	4929      	ldr	r1, [pc, #164]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ccc:	4b24      	ldr	r3, [pc, #144]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	4921      	ldr	r1, [pc, #132]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005cea:	4b1d      	ldr	r3, [pc, #116]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cee:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	491a      	ldr	r1, [pc, #104]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005d08:	4b15      	ldr	r3, [pc, #84]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	4912      	ldr	r1, [pc, #72]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d26:	4b0e      	ldr	r3, [pc, #56]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d32:	490b      	ldr	r1, [pc, #44]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005d44:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d48:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d50:	4903      	ldr	r1, [pc, #12]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3748      	adds	r7, #72	@ 0x48
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40021000 	.word	0x40021000

08005d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e09d      	b.n	8005eb2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d108      	bne.n	8005d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d86:	d009      	beq.n	8005d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	61da      	str	r2, [r3, #28]
 8005d8e:	e005      	b.n	8005d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fb fc58 	bl	800166c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ddc:	d902      	bls.n	8005de4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e002      	b.n	8005dea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005de8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005df2:	d007      	beq.n	8005e04 <HAL_SPI_Init+0xa0>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dfc:	d002      	beq.n	8005e04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e46:	ea42 0103 	orr.w	r1, r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	0c1b      	lsrs	r3, r3, #16
 8005e60:	f003 0204 	and.w	r2, r3, #4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e80:	ea42 0103 	orr.w	r1, r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ea0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b088      	sub	sp, #32
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	603b      	str	r3, [r7, #0]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_SPI_Transmit+0x22>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e15f      	b.n	800619c <HAL_SPI_Transmit+0x2e2>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee4:	f7fb fda8 	bl	8001a38 <HAL_GetTick>
 8005ee8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d002      	beq.n	8005f00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005efa:	2302      	movs	r3, #2
 8005efc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005efe:	e148      	b.n	8006192 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_SPI_Transmit+0x52>
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f10:	e13f      	b.n	8006192 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2203      	movs	r2, #3
 8005f16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	88fa      	ldrh	r2, [r7, #6]
 8005f2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	88fa      	ldrh	r2, [r7, #6]
 8005f30:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f5c:	d10f      	bne.n	8005f7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f88:	2b40      	cmp	r3, #64	@ 0x40
 8005f8a:	d007      	beq.n	8005f9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fa4:	d94f      	bls.n	8006046 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Transmit+0xfa>
 8005fae:	8afb      	ldrh	r3, [r7, #22]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d142      	bne.n	800603a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb8:	881a      	ldrh	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc4:	1c9a      	adds	r2, r3, #2
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fd8:	e02f      	b.n	800603a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d112      	bne.n	800600e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	881a      	ldrh	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff8:	1c9a      	adds	r2, r3, #2
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800600c:	e015      	b.n	800603a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800600e:	f7fb fd13 	bl	8001a38 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d803      	bhi.n	8006026 <HAL_SPI_Transmit+0x16c>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d102      	bne.n	800602c <HAL_SPI_Transmit+0x172>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006038:	e0ab      	b.n	8006192 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1ca      	bne.n	8005fda <HAL_SPI_Transmit+0x120>
 8006044:	e080      	b.n	8006148 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_SPI_Transmit+0x19a>
 800604e:	8afb      	ldrh	r3, [r7, #22]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d174      	bne.n	800613e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b01      	cmp	r3, #1
 800605c:	d912      	bls.n	8006084 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006062:	881a      	ldrh	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606e:	1c9a      	adds	r2, r3, #2
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b02      	subs	r3, #2
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006082:	e05c      	b.n	800613e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	7812      	ldrb	r2, [r2, #0]
 8006090:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80060aa:	e048      	b.n	800613e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d12b      	bne.n	8006112 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d912      	bls.n	80060ea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d4:	1c9a      	adds	r2, r3, #2
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b02      	subs	r3, #2
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060e8:	e029      	b.n	800613e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	7812      	ldrb	r2, [r2, #0]
 80060f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006110:	e015      	b.n	800613e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006112:	f7fb fc91 	bl	8001a38 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d803      	bhi.n	800612a <HAL_SPI_Transmit+0x270>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d102      	bne.n	8006130 <HAL_SPI_Transmit+0x276>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800613c:	e029      	b.n	8006192 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1b1      	bne.n	80060ac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fcf9 	bl	8006b44 <SPI_EndRxTxTransaction>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006166:	2300      	movs	r3, #0
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e003      	b.n	8006192 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800619a:	7ffb      	ldrb	r3, [r7, #31]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80061c4:	2302      	movs	r3, #2
 80061c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061c8:	e11a      	b.n	8006400 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061d2:	d112      	bne.n	80061fa <HAL_SPI_Receive+0x56>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10e      	bne.n	80061fa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2204      	movs	r2, #4
 80061e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	4613      	mov	r3, r2
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f90e 	bl	8006412 <HAL_SPI_TransmitReceive>
 80061f6:	4603      	mov	r3, r0
 80061f8:	e107      	b.n	800640a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_SPI_Receive+0x64>
 8006204:	2302      	movs	r3, #2
 8006206:	e100      	b.n	800640a <HAL_SPI_Receive+0x266>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006210:	f7fb fc12 	bl	8001a38 <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_SPI_Receive+0x7e>
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d102      	bne.n	8006228 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006226:	e0eb      	b.n	8006400 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2204      	movs	r2, #4
 800622c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	88fa      	ldrh	r2, [r7, #6]
 8006240:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	88fa      	ldrh	r2, [r7, #6]
 8006248:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006272:	d908      	bls.n	8006286 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006282:	605a      	str	r2, [r3, #4]
 8006284:	e007      	b.n	8006296 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006294:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800629e:	d10f      	bne.n	80062c0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ca:	2b40      	cmp	r3, #64	@ 0x40
 80062cc:	d007      	beq.n	80062de <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062e6:	d86f      	bhi.n	80063c8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80062e8:	e034      	b.n	8006354 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d117      	bne.n	8006328 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f103 020c 	add.w	r2, r3, #12
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006326:	e015      	b.n	8006354 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006328:	f7fb fb86 	bl	8001a38 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d803      	bhi.n	8006340 <HAL_SPI_Receive+0x19c>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d102      	bne.n	8006346 <HAL_SPI_Receive+0x1a2>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006352:	e055      	b.n	8006400 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1c4      	bne.n	80062ea <HAL_SPI_Receive+0x146>
 8006360:	e038      	b.n	80063d4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b01      	cmp	r3, #1
 800636e:	d115      	bne.n	800639c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	b292      	uxth	r2, r2
 800637c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	1c9a      	adds	r2, r3, #2
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800639a:	e015      	b.n	80063c8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800639c:	f7fb fb4c 	bl	8001a38 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d803      	bhi.n	80063b4 <HAL_SPI_Receive+0x210>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d102      	bne.n	80063ba <HAL_SPI_Receive+0x216>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80063c6:	e01b      	b.n	8006400 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1c6      	bne.n	8006362 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fb5b 	bl	8006a94 <SPI_EndRxTransaction>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	75fb      	strb	r3, [r7, #23]
 80063f6:	e003      	b.n	8006400 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b08a      	sub	sp, #40	@ 0x28
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006420:	2301      	movs	r3, #1
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x26>
 8006434:	2302      	movs	r3, #2
 8006436:	e20a      	b.n	800684e <HAL_SPI_TransmitReceive+0x43c>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006440:	f7fb fafa 	bl	8001a38 <HAL_GetTick>
 8006444:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800644c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006454:	887b      	ldrh	r3, [r7, #2]
 8006456:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800645c:	7efb      	ldrb	r3, [r7, #27]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d00e      	beq.n	8006480 <HAL_SPI_TransmitReceive+0x6e>
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006468:	d106      	bne.n	8006478 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <HAL_SPI_TransmitReceive+0x66>
 8006472:	7efb      	ldrb	r3, [r7, #27]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d003      	beq.n	8006480 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006478:	2302      	movs	r3, #2
 800647a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800647e:	e1e0      	b.n	8006842 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <HAL_SPI_TransmitReceive+0x80>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_SPI_TransmitReceive+0x80>
 800648c:	887b      	ldrh	r3, [r7, #2]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006498:	e1d3      	b.n	8006842 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d003      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2205      	movs	r2, #5
 80064aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	887a      	ldrh	r2, [r7, #2]
 80064be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	887a      	ldrh	r2, [r7, #2]
 80064c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	887a      	ldrh	r2, [r7, #2]
 80064d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	887a      	ldrh	r2, [r7, #2]
 80064da:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064f0:	d802      	bhi.n	80064f8 <HAL_SPI_TransmitReceive+0xe6>
 80064f2:	8a3b      	ldrh	r3, [r7, #16]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d908      	bls.n	800650a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006506:	605a      	str	r2, [r3, #4]
 8006508:	e007      	b.n	800651a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006518:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006524:	2b40      	cmp	r3, #64	@ 0x40
 8006526:	d007      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006540:	f240 8081 	bls.w	8006646 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_SPI_TransmitReceive+0x140>
 800654c:	8a7b      	ldrh	r3, [r7, #18]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d16d      	bne.n	800662e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006556:	881a      	ldrh	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006562:	1c9a      	adds	r2, r3, #2
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006576:	e05a      	b.n	800662e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b02      	cmp	r3, #2
 8006584:	d11b      	bne.n	80065be <HAL_SPI_TransmitReceive+0x1ac>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d016      	beq.n	80065be <HAL_SPI_TransmitReceive+0x1ac>
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	2b01      	cmp	r3, #1
 8006594:	d113      	bne.n	80065be <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659a:	881a      	ldrh	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a6:	1c9a      	adds	r2, r3, #2
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d11c      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x1f4>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d016      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	b292      	uxth	r2, r2
 80065e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	1c9a      	adds	r2, r3, #2
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006602:	2301      	movs	r3, #1
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006606:	f7fb fa17 	bl	8001a38 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006612:	429a      	cmp	r2, r3
 8006614:	d80b      	bhi.n	800662e <HAL_SPI_TransmitReceive+0x21c>
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661c:	d007      	beq.n	800662e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800662c:	e109      	b.n	8006842 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d19f      	bne.n	8006578 <HAL_SPI_TransmitReceive+0x166>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d199      	bne.n	8006578 <HAL_SPI_TransmitReceive+0x166>
 8006644:	e0e3      	b.n	800680e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_SPI_TransmitReceive+0x244>
 800664e:	8a7b      	ldrh	r3, [r7, #18]
 8006650:	2b01      	cmp	r3, #1
 8006652:	f040 80cf 	bne.w	80067f4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d912      	bls.n	8006686 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006664:	881a      	ldrh	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	1c9a      	adds	r2, r3, #2
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b02      	subs	r3, #2
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006684:	e0b6      	b.n	80067f4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	330c      	adds	r3, #12
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ac:	e0a2      	b.n	80067f4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d134      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x314>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d02f      	beq.n	8006726 <HAL_SPI_TransmitReceive+0x314>
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d12c      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d912      	bls.n	80066fc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066da:	881a      	ldrh	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e6:	1c9a      	adds	r2, r3, #2
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b02      	subs	r3, #2
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80066fa:	e012      	b.n	8006722 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	330c      	adds	r3, #12
 8006706:	7812      	ldrb	r2, [r2, #0]
 8006708:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	d148      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x3b4>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d042      	beq.n	80067c6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006746:	b29b      	uxth	r3, r3
 8006748:	2b01      	cmp	r3, #1
 800674a:	d923      	bls.n	8006794 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	b292      	uxth	r2, r2
 8006758:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675e:	1c9a      	adds	r2, r3, #2
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b02      	subs	r3, #2
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b01      	cmp	r3, #1
 8006780:	d81f      	bhi.n	80067c2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	e016      	b.n	80067c2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f103 020c 	add.w	r2, r3, #12
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067c2:	2301      	movs	r3, #1
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067c6:	f7fb f937 	bl	8001a38 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d803      	bhi.n	80067de <HAL_SPI_TransmitReceive+0x3cc>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d102      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x3d2>
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d107      	bne.n	80067f4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80067f2:	e026      	b.n	8006842 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f47f af57 	bne.w	80066ae <HAL_SPI_TransmitReceive+0x29c>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	f47f af50 	bne.w	80066ae <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f996 	bl	8006b44 <SPI_EndRxTxTransaction>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2220      	movs	r2, #32
 8006828:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006838:	e003      	b.n	8006842 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800684a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800684e:	4618      	mov	r0, r3
 8006850:	3728      	adds	r7, #40	@ 0x28
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006868:	f7fb f8e6 	bl	8001a38 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4413      	add	r3, r2
 8006876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006878:	f7fb f8de 	bl	8001a38 <HAL_GetTick>
 800687c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800687e:	4b39      	ldr	r3, [pc, #228]	@ (8006964 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	015b      	lsls	r3, r3, #5
 8006884:	0d1b      	lsrs	r3, r3, #20
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	fb02 f303 	mul.w	r3, r2, r3
 800688c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688e:	e054      	b.n	800693a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d050      	beq.n	800693a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006898:	f7fb f8ce 	bl	8001a38 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d902      	bls.n	80068ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d13d      	bne.n	800692a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80068bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068c6:	d111      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068d0:	d004      	beq.n	80068dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068da:	d107      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068f4:	d10f      	bne.n	8006916 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e017      	b.n	800695a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	3b01      	subs	r3, #1
 8006938:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4013      	ands	r3, r2
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	429a      	cmp	r2, r3
 8006948:	bf0c      	ite	eq
 800694a:	2301      	moveq	r3, #1
 800694c:	2300      	movne	r3, #0
 800694e:	b2db      	uxtb	r3, r3
 8006950:	461a      	mov	r2, r3
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	429a      	cmp	r2, r3
 8006956:	d19b      	bne.n	8006890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3720      	adds	r7, #32
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000000 	.word	0x20000000

08006968 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	@ 0x28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800697a:	f7fb f85d 	bl	8001a38 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	4413      	add	r3, r2
 8006988:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800698a:	f7fb f855 	bl	8001a38 <HAL_GetTick>
 800698e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006998:	4b3d      	ldr	r3, [pc, #244]	@ (8006a90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	00da      	lsls	r2, r3, #3
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	0d1b      	lsrs	r3, r3, #20
 80069a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069aa:	fb02 f303 	mul.w	r3, r2, r3
 80069ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80069b0:	e060      	b.n	8006a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80069b8:	d107      	bne.n	80069ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d050      	beq.n	8006a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069d2:	f7fb f831 	bl	8001a38 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069de:	429a      	cmp	r2, r3
 80069e0:	d902      	bls.n	80069e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d13d      	bne.n	8006a64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80069f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a00:	d111      	bne.n	8006a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a0a:	d004      	beq.n	8006a16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a14:	d107      	bne.n	8006a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a2e:	d10f      	bne.n	8006a50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e010      	b.n	8006a86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d196      	bne.n	80069b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3728      	adds	r7, #40	@ 0x28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000000 	.word	0x20000000

08006a94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aa8:	d111      	bne.n	8006ace <SPI_EndRxTransaction+0x3a>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ab2:	d004      	beq.n	8006abe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006abc:	d107      	bne.n	8006ace <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006acc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2180      	movs	r1, #128	@ 0x80
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff febd 	bl	8006858 <SPI_WaitFlagStateUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d007      	beq.n	8006af4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ae8:	f043 0220 	orr.w	r2, r3, #32
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e023      	b.n	8006b3c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006afc:	d11d      	bne.n	8006b3a <SPI_EndRxTransaction+0xa6>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b06:	d004      	beq.n	8006b12 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b10:	d113      	bne.n	8006b3a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7ff ff22 	bl	8006968 <SPI_WaitFifoStateUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b2e:	f043 0220 	orr.w	r2, r3, #32
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e000      	b.n	8006b3c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f7ff ff03 	bl	8006968 <SPI_WaitFifoStateUntilTimeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d007      	beq.n	8006b78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b6c:	f043 0220 	orr.w	r2, r3, #32
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e027      	b.n	8006bc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2180      	movs	r1, #128	@ 0x80
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff fe68 	bl	8006858 <SPI_WaitFlagStateUntilTimeout>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b92:	f043 0220 	orr.w	r2, r3, #32
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e014      	b.n	8006bc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7ff fedc 	bl	8006968 <SPI_WaitFifoStateUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bba:	f043 0220 	orr.w	r2, r3, #32
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e000      	b.n	8006bc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006be0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006be4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c06:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006c0a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	1d3b      	adds	r3, r7, #4
 8006c3e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b09d      	sub	sp, #116	@ 0x74
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c96:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	78db      	ldrb	r3, [r3, #3]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d81f      	bhi.n	8006ce2 <USB_ActivateEndpoint+0x72>
 8006ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca8 <USB_ActivateEndpoint+0x38>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006cd5 	.word	0x08006cd5
 8006cb0:	08006ceb 	.word	0x08006ceb
 8006cb4:	08006cc7 	.word	0x08006cc7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006cb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006cc4:	e012      	b.n	8006cec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006cc6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006cce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006cd2:	e00b      	b.n	8006cec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006cd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006cdc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006ce0:	e004      	b.n	8006cec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006ce8:	e000      	b.n	8006cec <USB_ActivateEndpoint+0x7c>
      break;
 8006cea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	b21b      	sxth	r3, r3
 8006d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d26:	b21a      	sxth	r2, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	b21b      	sxth	r3, r3
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	b21b      	sxth	r3, r3
 8006d32:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	7b1b      	ldrb	r3, [r3, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f040 8178 	bne.w	8007052 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 8084 	beq.w	8006e74 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	61bb      	str	r3, [r7, #24]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	011a      	lsls	r2, r3, #4
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	88db      	ldrh	r3, [r3, #6]
 8006d94:	085b      	lsrs	r3, r3, #1
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	827b      	strh	r3, [r7, #18]
 8006dae:	8a7b      	ldrh	r3, [r7, #18]
 8006db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01b      	beq.n	8006df0 <USB_ActivateEndpoint+0x180>
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dce:	823b      	strh	r3, [r7, #16]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	441a      	add	r2, r3
 8006dda:	8a3b      	ldrh	r3, [r7, #16]
 8006ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	78db      	ldrb	r3, [r3, #3]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d020      	beq.n	8006e3a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e0e:	81bb      	strh	r3, [r7, #12]
 8006e10:	89bb      	ldrh	r3, [r7, #12]
 8006e12:	f083 0320 	eor.w	r3, r3, #32
 8006e16:	81bb      	strh	r3, [r7, #12]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	441a      	add	r2, r3
 8006e22:	89bb      	ldrh	r3, [r7, #12]
 8006e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8013      	strh	r3, [r2, #0]
 8006e38:	e2d5      	b.n	80073e6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e50:	81fb      	strh	r3, [r7, #14]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	441a      	add	r2, r3
 8006e5c:	89fb      	ldrh	r3, [r7, #14]
 8006e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]
 8006e72:	e2b8      	b.n	80073e6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	461a      	mov	r2, r3
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	4413      	add	r3, r2
 8006e86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	011a      	lsls	r2, r3, #4
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	88db      	ldrh	r3, [r3, #6]
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb8:	4413      	add	r3, r2
 8006eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	011a      	lsls	r2, r3, #4
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <USB_ActivateEndpoint+0x28a>
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	e039      	b.n	8006f6e <USB_ActivateEndpoint+0x2fe>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f00:	d818      	bhi.n	8006f34 <USB_ActivateEndpoint+0x2c4>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <USB_ActivateEndpoint+0x2ac>
 8006f16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f18:	3301      	adds	r3, #1
 8006f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	029b      	lsls	r3, r3, #10
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	e01c      	b.n	8006f6e <USB_ActivateEndpoint+0x2fe>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <USB_ActivateEndpoint+0x2de>
 8006f48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	029b      	lsls	r3, r3, #10
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006f7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01b      	beq.n	8006fbe <USB_ActivateEndpoint+0x34e>
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9c:	843b      	strh	r3, [r7, #32]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	8c3b      	ldrh	r3, [r7, #32]
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d124      	bne.n	8007010 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fdc:	83bb      	strh	r3, [r7, #28]
 8006fde:	8bbb      	ldrh	r3, [r7, #28]
 8006fe0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fe4:	83bb      	strh	r3, [r7, #28]
 8006fe6:	8bbb      	ldrh	r3, [r7, #28]
 8006fe8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006fec:	83bb      	strh	r3, [r7, #28]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	441a      	add	r2, r3
 8006ff8:	8bbb      	ldrh	r3, [r7, #28]
 8006ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700a:	b29b      	uxth	r3, r3
 800700c:	8013      	strh	r3, [r2, #0]
 800700e:	e1ea      	b.n	80073e6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007026:	83fb      	strh	r3, [r7, #30]
 8007028:	8bfb      	ldrh	r3, [r7, #30]
 800702a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800702e:	83fb      	strh	r3, [r7, #30]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	441a      	add	r2, r3
 800703a:	8bfb      	ldrh	r3, [r7, #30]
 800703c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800704c:	b29b      	uxth	r3, r3
 800704e:	8013      	strh	r3, [r2, #0]
 8007050:	e1c9      	b.n	80073e6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	78db      	ldrb	r3, [r3, #3]
 8007056:	2b02      	cmp	r3, #2
 8007058:	d11e      	bne.n	8007098 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800706c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007070:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	441a      	add	r2, r3
 800707e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800708a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800708e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007092:	b29b      	uxth	r3, r3
 8007094:	8013      	strh	r3, [r2, #0]
 8007096:	e01d      	b.n	80070d4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80070aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	441a      	add	r2, r3
 80070bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80070c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070de:	b29b      	uxth	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070e4:	4413      	add	r3, r2
 80070e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	011a      	lsls	r2, r3, #4
 80070ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	891b      	ldrh	r3, [r3, #8]
 80070fc:	085b      	lsrs	r3, r3, #1
 80070fe:	b29b      	uxth	r3, r3
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007106:	801a      	strh	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	657b      	str	r3, [r7, #84]	@ 0x54
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007112:	b29b      	uxth	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007118:	4413      	add	r3, r2
 800711a:	657b      	str	r3, [r7, #84]	@ 0x54
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	011a      	lsls	r2, r3, #4
 8007122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007124:	4413      	add	r3, r2
 8007126:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800712a:	653b      	str	r3, [r7, #80]	@ 0x50
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	895b      	ldrh	r3, [r3, #10]
 8007130:	085b      	lsrs	r3, r3, #1
 8007132:	b29b      	uxth	r3, r3
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800713a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 8093 	bne.w	800726c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007156:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800715a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d01b      	beq.n	800719a <USB_ActivateEndpoint+0x52a>
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007178:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	441a      	add	r2, r3
 8007184:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800718a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800718e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80071a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80071aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01b      	beq.n	80071ea <USB_ActivateEndpoint+0x57a>
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	441a      	add	r2, r3
 80071d4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80071d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007200:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007202:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007204:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007208:	873b      	strh	r3, [r7, #56]	@ 0x38
 800720a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800720c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007210:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	441a      	add	r2, r3
 800721c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800721e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800722a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800722e:	b29b      	uxth	r3, r3
 8007230:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007248:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	441a      	add	r2, r3
 8007254:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800725a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800725e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007266:	b29b      	uxth	r3, r3
 8007268:	8013      	strh	r3, [r2, #0]
 800726a:	e0bc      	b.n	80073e6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800727c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01d      	beq.n	80072c4 <USB_ActivateEndpoint+0x654>
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800729a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	441a      	add	r2, r3
 80072ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80072b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80072d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80072d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01d      	beq.n	800731c <USB_ActivateEndpoint+0x6ac>
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	441a      	add	r2, r3
 8007304:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800730c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007314:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007318:	b29b      	uxth	r3, r3
 800731a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	78db      	ldrb	r3, [r3, #3]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d024      	beq.n	800736e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800733a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800733e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007342:	f083 0320 	eor.w	r3, r3, #32
 8007346:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	441a      	add	r2, r3
 8007354:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800735c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007368:	b29b      	uxth	r3, r3
 800736a:	8013      	strh	r3, [r2, #0]
 800736c:	e01d      	b.n	80073aa <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007384:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800739a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800739e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	441a      	add	r2, r3
 80073ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80073d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80073e6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3774      	adds	r7, #116	@ 0x74
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop

080073f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b08d      	sub	sp, #52	@ 0x34
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	7b1b      	ldrb	r3, [r3, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f040 808e 	bne.w	8007528 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d044      	beq.n	800749e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	81bb      	strh	r3, [r7, #12]
 8007422:	89bb      	ldrh	r3, [r7, #12]
 8007424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01b      	beq.n	8007464 <USB_DeactivateEndpoint+0x6c>
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800743e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007442:	817b      	strh	r3, [r7, #10]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	441a      	add	r2, r3
 800744e:	897b      	ldrh	r3, [r7, #10]
 8007450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800745c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007460:	b29b      	uxth	r3, r3
 8007462:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800747a:	813b      	strh	r3, [r7, #8]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	893b      	ldrh	r3, [r7, #8]
 8007488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800748c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007498:	b29b      	uxth	r3, r3
 800749a:	8013      	strh	r3, [r2, #0]
 800749c:	e192      	b.n	80077c4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	827b      	strh	r3, [r7, #18]
 80074ac:	8a7b      	ldrh	r3, [r7, #18]
 80074ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d01b      	beq.n	80074ee <USB_DeactivateEndpoint+0xf6>
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074cc:	823b      	strh	r3, [r7, #16]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	441a      	add	r2, r3
 80074d8:	8a3b      	ldrh	r3, [r7, #16]
 80074da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007504:	81fb      	strh	r3, [r7, #14]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	441a      	add	r2, r3
 8007510:	89fb      	ldrh	r3, [r7, #14]
 8007512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800751a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800751e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007522:	b29b      	uxth	r3, r3
 8007524:	8013      	strh	r3, [r2, #0]
 8007526:	e14d      	b.n	80077c4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 80a5 	bne.w	800767c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	843b      	strh	r3, [r7, #32]
 8007540:	8c3b      	ldrh	r3, [r7, #32]
 8007542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d01b      	beq.n	8007582 <USB_DeactivateEndpoint+0x18a>
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800755c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007560:	83fb      	strh	r3, [r7, #30]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	441a      	add	r2, r3
 800756c:	8bfb      	ldrh	r3, [r7, #30]
 800756e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007576:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800757a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800757e:	b29b      	uxth	r3, r3
 8007580:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	83bb      	strh	r3, [r7, #28]
 8007590:	8bbb      	ldrh	r3, [r7, #28]
 8007592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007596:	2b00      	cmp	r3, #0
 8007598:	d01b      	beq.n	80075d2 <USB_DeactivateEndpoint+0x1da>
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b0:	837b      	strh	r3, [r7, #26]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	8b7b      	ldrh	r3, [r7, #26]
 80075be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e8:	833b      	strh	r3, [r7, #24]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	441a      	add	r2, r3
 80075f4:	8b3b      	ldrh	r3, [r7, #24]
 80075f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007602:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007606:	b29b      	uxth	r3, r3
 8007608:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800761c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007620:	82fb      	strh	r3, [r7, #22]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	441a      	add	r2, r3
 800762c:	8afb      	ldrh	r3, [r7, #22]
 800762e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800763a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763e:	b29b      	uxth	r3, r3
 8007640:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007658:	82bb      	strh	r3, [r7, #20]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	441a      	add	r2, r3
 8007664:	8abb      	ldrh	r3, [r7, #20]
 8007666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800766e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007676:	b29b      	uxth	r3, r3
 8007678:	8013      	strh	r3, [r2, #0]
 800767a:	e0a3      	b.n	80077c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800768a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800768c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01b      	beq.n	80076cc <USB_DeactivateEndpoint+0x2d4>
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076aa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	441a      	add	r2, r3
 80076b6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80076b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80076da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80076dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01b      	beq.n	800771c <USB_DeactivateEndpoint+0x324>
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	441a      	add	r2, r3
 8007706:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800770c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007714:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007718:	b29b      	uxth	r3, r3
 800771a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800772e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007732:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	441a      	add	r2, r3
 800773e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007748:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800774c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007750:	b29b      	uxth	r3, r3
 8007752:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800776a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	441a      	add	r2, r3
 8007776:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800777c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007788:	b29b      	uxth	r3, r3
 800778a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800779e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	441a      	add	r2, r3
 80077ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80077b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3734      	adds	r7, #52	@ 0x34
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b0c2      	sub	sp, #264	@ 0x108
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077e0:	6018      	str	r0, [r3, #0]
 80077e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	f040 86b7 	bne.w	800856c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80077fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	429a      	cmp	r2, r3
 8007818:	d908      	bls.n	800782c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800781a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800782a:	e007      	b.n	800783c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800782c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800783c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	7b1b      	ldrb	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d13a      	bne.n	80078c2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800784c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6959      	ldr	r1, [r3, #20]
 8007858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	88da      	ldrh	r2, [r3, #6]
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007868:	b29b      	uxth	r3, r3
 800786a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800786e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007872:	6800      	ldr	r0, [r0, #0]
 8007874:	f001 fc8d 	bl	8009192 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007892:	b29b      	uxth	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	4413      	add	r3, r2
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	011a      	lsls	r2, r3, #4
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	4413      	add	r3, r2
 80078ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	f000 be1f 	b.w	8008500 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80078c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	78db      	ldrb	r3, [r3, #3]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	f040 8462 	bne.w	8008198 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80078d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6a1a      	ldr	r2, [r3, #32]
 80078e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	f240 83df 	bls.w	80080b0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80078f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007918:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	441a      	add	r2, r3
 8007936:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800793a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800793e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007942:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800794a:	b29b      	uxth	r3, r3
 800794c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800794e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a1a      	ldr	r2, [r3, #32]
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800796c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29b      	uxth	r3, r3
 800798a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 81c7 	beq.w	8007d22 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	633b      	str	r3, [r7, #48]	@ 0x30
 80079a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	785b      	ldrb	r3, [r3, #1]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d177      	bne.n	8007aa0 <USB_EPStartXfer+0x2ce>
 80079b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d0:	4413      	add	r3, r2
 80079d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	011a      	lsls	r2, r3, #4
 80079e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e4:	4413      	add	r3, r2
 80079e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <USB_EPStartXfer+0x248>
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a16:	801a      	strh	r2, [r3, #0]
 8007a18:	e067      	b.n	8007aea <USB_EPStartXfer+0x318>
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a20:	d81c      	bhi.n	8007a5c <USB_EPStartXfer+0x28a>
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a26:	085b      	lsrs	r3, r3, #1
 8007a28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <USB_EPStartXfer+0x270>
 8007a38:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	029b      	lsls	r3, r3, #10
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	4313      	orrs	r3, r2
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	e046      	b.n	8007aea <USB_EPStartXfer+0x318>
 8007a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6a:	f003 031f 	and.w	r3, r3, #31
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <USB_EPStartXfer+0x2aa>
 8007a72:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a76:	3b01      	subs	r3, #1
 8007a78:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	029b      	lsls	r3, r3, #10
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	801a      	strh	r2, [r3, #0]
 8007a9e:	e024      	b.n	8007aea <USB_EPStartXfer+0x318>
 8007aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d11c      	bne.n	8007aea <USB_EPStartXfer+0x318>
 8007ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac4:	4413      	add	r3, r2
 8007ac6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	011a      	lsls	r2, r3, #4
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad8:	4413      	add	r3, r2
 8007ada:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	895b      	ldrh	r3, [r3, #10]
 8007af6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6959      	ldr	r1, [r3, #20]
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b18:	6800      	ldr	r0, [r0, #0]
 8007b1a:	f001 fb3a 	bl	8009192 <USB_WritePMA>
            ep->xfer_buff += len;
 8007b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695a      	ldr	r2, [r3, #20]
 8007b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2e:	441a      	add	r2, r3
 8007b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6a1a      	ldr	r2, [r3, #32]
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d90f      	bls.n	8007b78 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6a1a      	ldr	r2, [r3, #32]
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b68:	1ad2      	subs	r2, r2, r3
 8007b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	621a      	str	r2, [r3, #32]
 8007b76:	e00e      	b.n	8007b96 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2200      	movs	r2, #0
 8007b94:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	785b      	ldrb	r3, [r3, #1]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d177      	bne.n	8007c96 <USB_EPStartXfer+0x4c4>
 8007ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	61bb      	str	r3, [r7, #24]
 8007bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	011a      	lsls	r2, r3, #4
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10a      	bne.n	8007c10 <USB_EPStartXfer+0x43e>
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	801a      	strh	r2, [r3, #0]
 8007c0e:	e06d      	b.n	8007cec <USB_EPStartXfer+0x51a>
 8007c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c14:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c16:	d81c      	bhi.n	8007c52 <USB_EPStartXfer+0x480>
 8007c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1c:	085b      	lsrs	r3, r3, #1
 8007c1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d004      	beq.n	8007c38 <USB_EPStartXfer+0x466>
 8007c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c32:	3301      	adds	r3, #1
 8007c34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	029b      	lsls	r3, r3, #10
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	801a      	strh	r2, [r3, #0]
 8007c50:	e04c      	b.n	8007cec <USB_EPStartXfer+0x51a>
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c60:	f003 031f 	and.w	r3, r3, #31
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d104      	bne.n	8007c72 <USB_EPStartXfer+0x4a0>
 8007c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	029b      	lsls	r3, r3, #10
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	4313      	orrs	r3, r2
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	e02a      	b.n	8007cec <USB_EPStartXfer+0x51a>
 8007c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	785b      	ldrb	r3, [r3, #1]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d122      	bne.n	8007cec <USB_EPStartXfer+0x51a>
 8007ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	623b      	str	r3, [r7, #32]
 8007cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	623b      	str	r3, [r7, #32]
 8007cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	011a      	lsls	r2, r3, #4
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	891b      	ldrh	r3, [r3, #8]
 8007cf8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6959      	ldr	r1, [r3, #20]
 8007d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d12:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d16:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d1a:	6800      	ldr	r0, [r0, #0]
 8007d1c:	f001 fa39 	bl	8009192 <USB_WritePMA>
 8007d20:	e3ee      	b.n	8008500 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d177      	bne.n	8007e22 <USB_EPStartXfer+0x650>
 8007d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	461a      	mov	r2, r3
 8007d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d52:	4413      	add	r3, r2
 8007d54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	011a      	lsls	r2, r3, #4
 8007d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d66:	4413      	add	r3, r2
 8007d68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d7c:	801a      	strh	r2, [r3, #0]
 8007d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <USB_EPStartXfer+0x5ca>
 8007d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d98:	801a      	strh	r2, [r3, #0]
 8007d9a:	e06d      	b.n	8007e78 <USB_EPStartXfer+0x6a6>
 8007d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007da2:	d81c      	bhi.n	8007dde <USB_EPStartXfer+0x60c>
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da8:	085b      	lsrs	r3, r3, #1
 8007daa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <USB_EPStartXfer+0x5f2>
 8007dba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	029b      	lsls	r3, r3, #10
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	e04c      	b.n	8007e78 <USB_EPStartXfer+0x6a6>
 8007dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de2:	095b      	lsrs	r3, r3, #5
 8007de4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <USB_EPStartXfer+0x62c>
 8007df4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	029b      	lsls	r3, r3, #10
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e1e:	801a      	strh	r2, [r3, #0]
 8007e20:	e02a      	b.n	8007e78 <USB_EPStartXfer+0x6a6>
 8007e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d122      	bne.n	8007e78 <USB_EPStartXfer+0x6a6>
 8007e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e52:	4413      	add	r3, r2
 8007e54:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	011a      	lsls	r2, r3, #4
 8007e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e66:	4413      	add	r3, r2
 8007e68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	891b      	ldrh	r3, [r3, #8]
 8007e84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6959      	ldr	r1, [r3, #20]
 8007e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e9e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ea2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ea6:	6800      	ldr	r0, [r0, #0]
 8007ea8:	f001 f973 	bl	8009192 <USB_WritePMA>
            ep->xfer_buff += len;
 8007eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695a      	ldr	r2, [r3, #20]
 8007eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebc:	441a      	add	r2, r3
 8007ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6a1a      	ldr	r2, [r3, #32]
 8007ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d90f      	bls.n	8007f06 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6a1a      	ldr	r2, [r3, #32]
 8007ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef6:	1ad2      	subs	r2, r2, r3
 8007ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	621a      	str	r2, [r3, #32]
 8007f04:	e00e      	b.n	8007f24 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2200      	movs	r2, #0
 8007f22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	785b      	ldrb	r3, [r3, #1]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d177      	bne.n	8008030 <USB_EPStartXfer+0x85e>
 8007f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	4413      	add	r3, r2
 8007f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	011a      	lsls	r2, r3, #4
 8007f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f74:	4413      	add	r3, r2
 8007f76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8a:	801a      	strh	r2, [r3, #0]
 8007f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10a      	bne.n	8007faa <USB_EPStartXfer+0x7d8>
 8007f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa6:	801a      	strh	r2, [r3, #0]
 8007fa8:	e067      	b.n	800807a <USB_EPStartXfer+0x8a8>
 8007faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fae:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fb0:	d81c      	bhi.n	8007fec <USB_EPStartXfer+0x81a>
 8007fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb6:	085b      	lsrs	r3, r3, #1
 8007fb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <USB_EPStartXfer+0x800>
 8007fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fcc:	3301      	adds	r3, #1
 8007fce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	029b      	lsls	r3, r3, #10
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe8:	801a      	strh	r2, [r3, #0]
 8007fea:	e046      	b.n	800807a <USB_EPStartXfer+0x8a8>
 8007fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff0:	095b      	lsrs	r3, r3, #5
 8007ff2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffa:	f003 031f 	and.w	r3, r3, #31
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d104      	bne.n	800800c <USB_EPStartXfer+0x83a>
 8008002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008006:	3b01      	subs	r3, #1
 8008008:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800800c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29a      	uxth	r2, r3
 8008012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008016:	b29b      	uxth	r3, r3
 8008018:	029b      	lsls	r3, r3, #10
 800801a:	b29b      	uxth	r3, r3
 800801c:	4313      	orrs	r3, r2
 800801e:	b29b      	uxth	r3, r3
 8008020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008028:	b29a      	uxth	r2, r3
 800802a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802c:	801a      	strh	r2, [r3, #0]
 800802e:	e024      	b.n	800807a <USB_EPStartXfer+0x8a8>
 8008030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d11c      	bne.n	800807a <USB_EPStartXfer+0x8a8>
 8008040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008044:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800804e:	b29b      	uxth	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008054:	4413      	add	r3, r2
 8008056:	643b      	str	r3, [r7, #64]	@ 0x40
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	011a      	lsls	r2, r3, #4
 8008066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008068:	4413      	add	r3, r2
 800806a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800806e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008074:	b29a      	uxth	r2, r3
 8008076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008078:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800807a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800807e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	895b      	ldrh	r3, [r3, #10]
 8008086:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800808a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800808e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6959      	ldr	r1, [r3, #20]
 8008096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809a:	b29b      	uxth	r3, r3
 800809c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80080a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80080a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80080a8:	6800      	ldr	r0, [r0, #0]
 80080aa:	f001 f872 	bl	8009192 <USB_WritePMA>
 80080ae:	e227      	b.n	8008500 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80080b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80080c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80080e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080e6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80080ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	441a      	add	r2, r3
 8008104:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008108:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800810c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008118:	b29b      	uxth	r3, r3
 800811a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800811c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008136:	b29b      	uxth	r3, r3
 8008138:	461a      	mov	r2, r3
 800813a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800813c:	4413      	add	r3, r2
 800813e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	011a      	lsls	r2, r3, #4
 800814e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008150:	4413      	add	r3, r2
 8008152:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008156:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815c:	b29a      	uxth	r2, r3
 800815e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008160:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	891b      	ldrh	r3, [r3, #8]
 800816e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6959      	ldr	r1, [r3, #20]
 800817e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008182:	b29b      	uxth	r3, r3
 8008184:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008188:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800818c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008190:	6800      	ldr	r0, [r0, #0]
 8008192:	f000 fffe 	bl	8009192 <USB_WritePMA>
 8008196:	e1b3      	b.n	8008500 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800819c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6a1a      	ldr	r2, [r3, #32]
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a8:	1ad2      	subs	r2, r2, r3
 80081aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 80c6 	beq.w	800836a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80081ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d177      	bne.n	80082ea <USB_EPStartXfer+0xb18>
 80081fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008214:	b29b      	uxth	r3, r3
 8008216:	461a      	mov	r2, r3
 8008218:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800821a:	4413      	add	r3, r2
 800821c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800821e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	011a      	lsls	r2, r3, #4
 800822c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800822e:	4413      	add	r3, r2
 8008230:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008234:	667b      	str	r3, [r7, #100]	@ 0x64
 8008236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008240:	b29a      	uxth	r2, r3
 8008242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008244:	801a      	strh	r2, [r3, #0]
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10a      	bne.n	8008264 <USB_EPStartXfer+0xa92>
 800824e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800825c:	b29a      	uxth	r2, r3
 800825e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008260:	801a      	strh	r2, [r3, #0]
 8008262:	e067      	b.n	8008334 <USB_EPStartXfer+0xb62>
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008268:	2b3e      	cmp	r3, #62	@ 0x3e
 800826a:	d81c      	bhi.n	80082a6 <USB_EPStartXfer+0xad4>
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008270:	085b      	lsrs	r3, r3, #1
 8008272:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d004      	beq.n	800828c <USB_EPStartXfer+0xaba>
 8008282:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008286:	3301      	adds	r3, #1
 8008288:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800828c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	b29a      	uxth	r2, r3
 8008292:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008296:	b29b      	uxth	r3, r3
 8008298:	029b      	lsls	r3, r3, #10
 800829a:	b29b      	uxth	r3, r3
 800829c:	4313      	orrs	r3, r2
 800829e:	b29a      	uxth	r2, r3
 80082a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082a2:	801a      	strh	r2, [r3, #0]
 80082a4:	e046      	b.n	8008334 <USB_EPStartXfer+0xb62>
 80082a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082aa:	095b      	lsrs	r3, r3, #5
 80082ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b4:	f003 031f 	and.w	r3, r3, #31
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d104      	bne.n	80082c6 <USB_EPStartXfer+0xaf4>
 80082bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80082c0:	3b01      	subs	r3, #1
 80082c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	029b      	lsls	r3, r3, #10
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	4313      	orrs	r3, r2
 80082d8:	b29b      	uxth	r3, r3
 80082da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082e6:	801a      	strh	r2, [r3, #0]
 80082e8:	e024      	b.n	8008334 <USB_EPStartXfer+0xb62>
 80082ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d11c      	bne.n	8008334 <USB_EPStartXfer+0xb62>
 80082fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008308:	b29b      	uxth	r3, r3
 800830a:	461a      	mov	r2, r3
 800830c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800830e:	4413      	add	r3, r2
 8008310:	673b      	str	r3, [r7, #112]	@ 0x70
 8008312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	011a      	lsls	r2, r3, #4
 8008320:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008322:	4413      	add	r3, r2
 8008324:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008328:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800832a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832e:	b29a      	uxth	r2, r3
 8008330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008332:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	895b      	ldrh	r3, [r3, #10]
 8008340:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6959      	ldr	r1, [r3, #20]
 8008350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008354:	b29b      	uxth	r3, r3
 8008356:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800835a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800835e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008362:	6800      	ldr	r0, [r0, #0]
 8008364:	f000 ff15 	bl	8009192 <USB_WritePMA>
 8008368:	e0ca      	b.n	8008500 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800836a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800836e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	785b      	ldrb	r3, [r3, #1]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d177      	bne.n	800846a <USB_EPStartXfer+0xc98>
 800837a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008394:	b29b      	uxth	r3, r3
 8008396:	461a      	mov	r2, r3
 8008398:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800839a:	4413      	add	r3, r2
 800839c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800839e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	011a      	lsls	r2, r3, #4
 80083ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083ae:	4413      	add	r3, r2
 80083b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80083b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083c4:	801a      	strh	r2, [r3, #0]
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <USB_EPStartXfer+0xc12>
 80083ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083dc:	b29a      	uxth	r2, r3
 80083de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083e0:	801a      	strh	r2, [r3, #0]
 80083e2:	e073      	b.n	80084cc <USB_EPStartXfer+0xcfa>
 80083e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80083ea:	d81c      	bhi.n	8008426 <USB_EPStartXfer+0xc54>
 80083ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f0:	085b      	lsrs	r3, r3, #1
 80083f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <USB_EPStartXfer+0xc3a>
 8008402:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008406:	3301      	adds	r3, #1
 8008408:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800840c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b29a      	uxth	r2, r3
 8008412:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008416:	b29b      	uxth	r3, r3
 8008418:	029b      	lsls	r3, r3, #10
 800841a:	b29b      	uxth	r3, r3
 800841c:	4313      	orrs	r3, r2
 800841e:	b29a      	uxth	r2, r3
 8008420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	e052      	b.n	80084cc <USB_EPStartXfer+0xcfa>
 8008426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008434:	f003 031f 	and.w	r3, r3, #31
 8008438:	2b00      	cmp	r3, #0
 800843a:	d104      	bne.n	8008446 <USB_EPStartXfer+0xc74>
 800843c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008440:	3b01      	subs	r3, #1
 8008442:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008446:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	b29a      	uxth	r2, r3
 800844c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008450:	b29b      	uxth	r3, r3
 8008452:	029b      	lsls	r3, r3, #10
 8008454:	b29b      	uxth	r3, r3
 8008456:	4313      	orrs	r3, r2
 8008458:	b29b      	uxth	r3, r3
 800845a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800845e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008462:	b29a      	uxth	r2, r3
 8008464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008466:	801a      	strh	r2, [r3, #0]
 8008468:	e030      	b.n	80084cc <USB_EPStartXfer+0xcfa>
 800846a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d128      	bne.n	80084cc <USB_EPStartXfer+0xcfa>
 800847a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008496:	b29b      	uxth	r3, r3
 8008498:	461a      	mov	r2, r3
 800849a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800849e:	4413      	add	r3, r2
 80084a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	011a      	lsls	r2, r3, #4
 80084b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084b6:	4413      	add	r3, r2
 80084b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80084ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80084cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	891b      	ldrh	r3, [r3, #8]
 80084d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6959      	ldr	r1, [r3, #20]
 80084e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80084f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80084f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80084fa:	6800      	ldr	r0, [r0, #0]
 80084fc:	f000 fe49 	bl	8009192 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008526:	817b      	strh	r3, [r7, #10]
 8008528:	897b      	ldrh	r3, [r7, #10]
 800852a:	f083 0310 	eor.w	r3, r3, #16
 800852e:	817b      	strh	r3, [r7, #10]
 8008530:	897b      	ldrh	r3, [r7, #10]
 8008532:	f083 0320 	eor.w	r3, r3, #32
 8008536:	817b      	strh	r3, [r7, #10]
 8008538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	441a      	add	r2, r3
 8008552:	897b      	ldrh	r3, [r7, #10]
 8008554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800855c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008564:	b29b      	uxth	r3, r3
 8008566:	8013      	strh	r3, [r2, #0]
 8008568:	f000 bcdf 	b.w	8008f2a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800856c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	7b1b      	ldrb	r3, [r3, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	f040 80bc 	bne.w	80086f6 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800857e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	429a      	cmp	r2, r3
 8008598:	d917      	bls.n	80085ca <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800859a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80085aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	699a      	ldr	r2, [r3, #24]
 80085b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ba:	1ad2      	subs	r2, r2, r3
 80085bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	619a      	str	r2, [r3, #24]
 80085c8:	e00e      	b.n	80085e8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80085ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80085da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2200      	movs	r2, #0
 80085e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80085e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008604:	b29b      	uxth	r3, r3
 8008606:	461a      	mov	r2, r3
 8008608:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800860c:	4413      	add	r3, r2
 800860e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	011a      	lsls	r2, r3, #4
 8008620:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008624:	4413      	add	r3, r2
 8008626:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800862a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800862e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	b29b      	uxth	r3, r3
 8008636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800863a:	b29a      	uxth	r2, r3
 800863c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008640:	801a      	strh	r2, [r3, #0]
 8008642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10d      	bne.n	8008666 <USB_EPStartXfer+0xe94>
 800864a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800865a:	b29a      	uxth	r2, r3
 800865c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008660:	801a      	strh	r2, [r3, #0]
 8008662:	f000 bc28 	b.w	8008eb6 <USB_EPStartXfer+0x16e4>
 8008666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866a:	2b3e      	cmp	r3, #62	@ 0x3e
 800866c:	d81f      	bhi.n	80086ae <USB_EPStartXfer+0xedc>
 800866e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008672:	085b      	lsrs	r3, r3, #1
 8008674:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <USB_EPStartXfer+0xebc>
 8008684:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008688:	3301      	adds	r3, #1
 800868a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800868e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29a      	uxth	r2, r3
 8008696:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800869a:	b29b      	uxth	r3, r3
 800869c:	029b      	lsls	r3, r3, #10
 800869e:	b29b      	uxth	r3, r3
 80086a0:	4313      	orrs	r3, r2
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086a8:	801a      	strh	r2, [r3, #0]
 80086aa:	f000 bc04 	b.w	8008eb6 <USB_EPStartXfer+0x16e4>
 80086ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80086b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086bc:	f003 031f 	and.w	r3, r3, #31
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <USB_EPStartXfer+0xefc>
 80086c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80086c8:	3b01      	subs	r3, #1
 80086ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80086ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80086da:	b29b      	uxth	r3, r3
 80086dc:	029b      	lsls	r3, r3, #10
 80086de:	b29b      	uxth	r3, r3
 80086e0:	4313      	orrs	r3, r2
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	e3df      	b.n	8008eb6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80086f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	78db      	ldrb	r3, [r3, #3]
 8008702:	2b02      	cmp	r3, #2
 8008704:	f040 8218 	bne.w	8008b38 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	785b      	ldrb	r3, [r3, #1]
 8008714:	2b00      	cmp	r3, #0
 8008716:	f040 809d 	bne.w	8008854 <USB_EPStartXfer+0x1082>
 800871a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008736:	b29b      	uxth	r3, r3
 8008738:	461a      	mov	r2, r3
 800873a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800873e:	4413      	add	r3, r2
 8008740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	011a      	lsls	r2, r3, #4
 8008752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008756:	4413      	add	r3, r2
 8008758:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800875c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800876c:	b29a      	uxth	r2, r3
 800876e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008772:	801a      	strh	r2, [r3, #0]
 8008774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10c      	bne.n	800879e <USB_EPStartXfer+0xfcc>
 8008784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29b      	uxth	r3, r3
 800878c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008794:	b29a      	uxth	r2, r3
 8008796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800879a:	801a      	strh	r2, [r3, #0]
 800879c:	e08f      	b.n	80088be <USB_EPStartXfer+0x10ec>
 800879e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80087ac:	d826      	bhi.n	80087fc <USB_EPStartXfer+0x102a>
 80087ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	085b      	lsrs	r3, r3, #1
 80087bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d004      	beq.n	80087de <USB_EPStartXfer+0x100c>
 80087d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d8:	3301      	adds	r3, #1
 80087da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	029b      	lsls	r3, r3, #10
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	4313      	orrs	r3, r2
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087f8:	801a      	strh	r2, [r3, #0]
 80087fa:	e060      	b.n	80088be <USB_EPStartXfer+0x10ec>
 80087fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	095b      	lsrs	r3, r3, #5
 800880a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800880e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f003 031f 	and.w	r3, r3, #31
 800881e:	2b00      	cmp	r3, #0
 8008820:	d104      	bne.n	800882c <USB_EPStartXfer+0x105a>
 8008822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008826:	3b01      	subs	r3, #1
 8008828:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800882c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	b29a      	uxth	r2, r3
 8008834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008838:	b29b      	uxth	r3, r3
 800883a:	029b      	lsls	r3, r3, #10
 800883c:	b29b      	uxth	r3, r3
 800883e:	4313      	orrs	r3, r2
 8008840:	b29b      	uxth	r3, r3
 8008842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800884a:	b29a      	uxth	r2, r3
 800884c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	e034      	b.n	80088be <USB_EPStartXfer+0x10ec>
 8008854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d12c      	bne.n	80088be <USB_EPStartXfer+0x10ec>
 8008864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008880:	b29b      	uxth	r3, r3
 8008882:	461a      	mov	r2, r3
 8008884:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008888:	4413      	add	r3, r2
 800888a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800888e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	011a      	lsls	r2, r3, #4
 800889c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088a0:	4413      	add	r3, r2
 80088a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80088a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80088bc:	801a      	strh	r2, [r3, #0]
 80088be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	785b      	ldrb	r3, [r3, #1]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f040 809d 	bne.w	8008a18 <USB_EPStartXfer+0x1246>
 80088de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008902:	4413      	add	r3, r2
 8008904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800890c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	011a      	lsls	r2, r3, #4
 8008916:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800891a:	4413      	add	r3, r2
 800891c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008924:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008930:	b29a      	uxth	r2, r3
 8008932:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008936:	801a      	strh	r2, [r3, #0]
 8008938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800893c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10c      	bne.n	8008962 <USB_EPStartXfer+0x1190>
 8008948:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008958:	b29a      	uxth	r2, r3
 800895a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800895e:	801a      	strh	r2, [r3, #0]
 8008960:	e088      	b.n	8008a74 <USB_EPStartXfer+0x12a2>
 8008962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008970:	d826      	bhi.n	80089c0 <USB_EPStartXfer+0x11ee>
 8008972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	085b      	lsrs	r3, r3, #1
 8008980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d004      	beq.n	80089a2 <USB_EPStartXfer+0x11d0>
 8008998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800899c:	3301      	adds	r3, #1
 800899e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	029b      	lsls	r3, r3, #10
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	4313      	orrs	r3, r2
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089bc:	801a      	strh	r2, [r3, #0]
 80089be:	e059      	b.n	8008a74 <USB_EPStartXfer+0x12a2>
 80089c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	095b      	lsrs	r3, r3, #5
 80089ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d104      	bne.n	80089f0 <USB_EPStartXfer+0x121e>
 80089e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089ea:	3b01      	subs	r3, #1
 80089ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80089f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	029b      	lsls	r3, r3, #10
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	4313      	orrs	r3, r2
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a14:	801a      	strh	r2, [r3, #0]
 8008a16:	e02d      	b.n	8008a74 <USB_EPStartXfer+0x12a2>
 8008a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	785b      	ldrb	r3, [r3, #1]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d125      	bne.n	8008a74 <USB_EPStartXfer+0x12a2>
 8008a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a3e:	4413      	add	r3, r2
 8008a40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	011a      	lsls	r2, r3, #4
 8008a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a56:	4413      	add	r3, r2
 8008a58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a72:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 8218 	beq.w	8008eb6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008aa6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <USB_EPStartXfer+0x12ec>
 8008ab2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10d      	bne.n	8008ada <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008abe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f040 81f5 	bne.w	8008eb6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008acc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f040 81ee 	bne.w	8008eb6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b00:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	441a      	add	r2, r3
 8008b1e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	8013      	strh	r3, [r2, #0]
 8008b36:	e1be      	b.n	8008eb6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	78db      	ldrb	r3, [r3, #3]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	f040 81b4 	bne.w	8008eb2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	699a      	ldr	r2, [r3, #24]
 8008b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d917      	bls.n	8008b96 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8008b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699a      	ldr	r2, [r3, #24]
 8008b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b86:	1ad2      	subs	r2, r2, r3
 8008b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	619a      	str	r2, [r3, #24]
 8008b94:	e00e      	b.n	8008bb4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8008b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f040 8085 	bne.w	8008cd0 <USB_EPStartXfer+0x14fe>
 8008bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	461a      	mov	r2, r3
 8008be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008bea:	4413      	add	r3, r2
 8008bec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	011a      	lsls	r2, r3, #4
 8008bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c02:	4413      	add	r3, r2
 8008c04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c1e:	801a      	strh	r2, [r3, #0]
 8008c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10c      	bne.n	8008c42 <USB_EPStartXfer+0x1470>
 8008c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c3e:	801a      	strh	r2, [r3, #0]
 8008c40:	e077      	b.n	8008d32 <USB_EPStartXfer+0x1560>
 8008c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c46:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c48:	d81e      	bhi.n	8008c88 <USB_EPStartXfer+0x14b6>
 8008c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c4e:	085b      	lsrs	r3, r3, #1
 8008c50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d004      	beq.n	8008c6a <USB_EPStartXfer+0x1498>
 8008c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c64:	3301      	adds	r3, #1
 8008c66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	029b      	lsls	r3, r3, #10
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c84:	801a      	strh	r2, [r3, #0]
 8008c86:	e054      	b.n	8008d32 <USB_EPStartXfer+0x1560>
 8008c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c96:	f003 031f 	and.w	r3, r3, #31
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d104      	bne.n	8008ca8 <USB_EPStartXfer+0x14d6>
 8008c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ca8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	029b      	lsls	r3, r3, #10
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ccc:	801a      	strh	r2, [r3, #0]
 8008cce:	e030      	b.n	8008d32 <USB_EPStartXfer+0x1560>
 8008cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	785b      	ldrb	r3, [r3, #1]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d128      	bne.n	8008d32 <USB_EPStartXfer+0x1560>
 8008ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	461a      	mov	r2, r3
 8008d00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d04:	4413      	add	r3, r2
 8008d06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	011a      	lsls	r2, r3, #4
 8008d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008d30:	801a      	strh	r2, [r3, #0]
 8008d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	785b      	ldrb	r3, [r3, #1]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 8085 	bne.w	8008e5c <USB_EPStartXfer+0x168a>
 8008d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	461a      	mov	r2, r3
 8008d72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008d76:	4413      	add	r3, r2
 8008d78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	011a      	lsls	r2, r3, #4
 8008d8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008d8e:	4413      	add	r3, r2
 8008d90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008d94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008daa:	801a      	strh	r2, [r3, #0]
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10c      	bne.n	8008dce <USB_EPStartXfer+0x15fc>
 8008db4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	e073      	b.n	8008eb6 <USB_EPStartXfer+0x16e4>
 8008dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008dd4:	d81e      	bhi.n	8008e14 <USB_EPStartXfer+0x1642>
 8008dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dda:	085b      	lsrs	r3, r3, #1
 8008ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de4:	f003 0301 	and.w	r3, r3, #1
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d004      	beq.n	8008df6 <USB_EPStartXfer+0x1624>
 8008dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008df0:	3301      	adds	r3, #1
 8008df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	029b      	lsls	r3, r3, #10
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e10:	801a      	strh	r2, [r3, #0]
 8008e12:	e050      	b.n	8008eb6 <USB_EPStartXfer+0x16e4>
 8008e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e18:	095b      	lsrs	r3, r3, #5
 8008e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e22:	f003 031f 	and.w	r3, r3, #31
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <USB_EPStartXfer+0x1662>
 8008e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	029b      	lsls	r3, r3, #10
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	4313      	orrs	r3, r2
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e58:	801a      	strh	r2, [r3, #0]
 8008e5a:	e02c      	b.n	8008eb6 <USB_EPStartXfer+0x16e4>
 8008e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d124      	bne.n	8008eb6 <USB_EPStartXfer+0x16e4>
 8008e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008e82:	4413      	add	r3, r2
 8008e84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	011a      	lsls	r2, r3, #4
 8008e96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008eae:	801a      	strh	r2, [r3, #0]
 8008eb0:	e001      	b.n	8008eb6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e03a      	b.n	8008f2c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008edc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008ee0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ee4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ee8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008eec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ef0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008ef4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	441a      	add	r2, r3
 8008f12:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b085      	sub	sp, #20
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d020      	beq.n	8008f8a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f5e:	81bb      	strh	r3, [r7, #12]
 8008f60:	89bb      	ldrh	r3, [r7, #12]
 8008f62:	f083 0310 	eor.w	r3, r3, #16
 8008f66:	81bb      	strh	r3, [r7, #12]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	441a      	add	r2, r3
 8008f72:	89bb      	ldrh	r3, [r7, #12]
 8008f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	8013      	strh	r3, [r2, #0]
 8008f88:	e01f      	b.n	8008fca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fa0:	81fb      	strh	r3, [r7, #14]
 8008fa2:	89fb      	ldrh	r3, [r7, #14]
 8008fa4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008fa8:	81fb      	strh	r3, [r7, #14]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	441a      	add	r2, r3
 8008fb4:	89fb      	ldrh	r3, [r7, #14]
 8008fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	7b1b      	ldrb	r3, [r3, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f040 809d 	bne.w	8009126 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	785b      	ldrb	r3, [r3, #1]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d04c      	beq.n	800908e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	823b      	strh	r3, [r7, #16]
 8009002:	8a3b      	ldrh	r3, [r7, #16]
 8009004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01b      	beq.n	8009044 <USB_EPClearStall+0x6c>
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29b      	uxth	r3, r3
 800901a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800901e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009022:	81fb      	strh	r3, [r7, #14]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	441a      	add	r2, r3
 800902e:	89fb      	ldrh	r3, [r7, #14]
 8009030:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009034:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800903c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009040:	b29b      	uxth	r3, r3
 8009042:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	78db      	ldrb	r3, [r3, #3]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d06c      	beq.n	8009126 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	b29b      	uxth	r3, r3
 800905a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800905e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009062:	81bb      	strh	r3, [r7, #12]
 8009064:	89bb      	ldrh	r3, [r7, #12]
 8009066:	f083 0320 	eor.w	r3, r3, #32
 800906a:	81bb      	strh	r3, [r7, #12]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	441a      	add	r2, r3
 8009076:	89bb      	ldrh	r3, [r7, #12]
 8009078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800907c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009088:	b29b      	uxth	r3, r3
 800908a:	8013      	strh	r3, [r2, #0]
 800908c:	e04b      	b.n	8009126 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	881b      	ldrh	r3, [r3, #0]
 800909a:	82fb      	strh	r3, [r7, #22]
 800909c:	8afb      	ldrh	r3, [r7, #22]
 800909e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d01b      	beq.n	80090de <USB_EPClearStall+0x106>
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	881b      	ldrh	r3, [r3, #0]
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090bc:	82bb      	strh	r3, [r7, #20]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	441a      	add	r2, r3
 80090c8:	8abb      	ldrh	r3, [r7, #20]
 80090ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090da:	b29b      	uxth	r3, r3
 80090dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090f4:	827b      	strh	r3, [r7, #18]
 80090f6:	8a7b      	ldrh	r3, [r7, #18]
 80090f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80090fc:	827b      	strh	r3, [r7, #18]
 80090fe:	8a7b      	ldrh	r3, [r7, #18]
 8009100:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009104:	827b      	strh	r3, [r7, #18]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	441a      	add	r2, r3
 8009110:	8a7b      	ldrh	r3, [r7, #18]
 8009112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800911a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800911e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009122:	b29b      	uxth	r3, r3
 8009124:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	371c      	adds	r7, #28
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009140:	78fb      	ldrb	r3, [r7, #3]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d103      	bne.n	800914e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2280      	movs	r2, #128	@ 0x80
 800914a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009172:	b480      	push	{r7}
 8009174:	b085      	sub	sp, #20
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009180:	b29b      	uxth	r3, r3
 8009182:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009184:	68fb      	ldr	r3, [r7, #12]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009192:	b480      	push	{r7}
 8009194:	b08b      	sub	sp, #44	@ 0x2c
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	4611      	mov	r1, r2
 800919e:	461a      	mov	r2, r3
 80091a0:	460b      	mov	r3, r1
 80091a2:	80fb      	strh	r3, [r7, #6]
 80091a4:	4613      	mov	r3, r2
 80091a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80091a8:	88bb      	ldrh	r3, [r7, #4]
 80091aa:	3301      	adds	r3, #1
 80091ac:	085b      	lsrs	r3, r3, #1
 80091ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091b8:	88fb      	ldrh	r3, [r7, #6]
 80091ba:	005a      	lsls	r2, r3, #1
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80091c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ca:	e01e      	b.n	800920a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	3301      	adds	r3, #1
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	021b      	lsls	r3, r3, #8
 80091da:	b21a      	sxth	r2, r3
 80091dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	b21b      	sxth	r3, r3
 80091e4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	8a7a      	ldrh	r2, [r7, #18]
 80091ea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	3302      	adds	r3, #2
 80091f0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	3302      	adds	r3, #2
 80091f6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	3301      	adds	r3, #1
 80091fc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	3301      	adds	r3, #1
 8009202:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009206:	3b01      	subs	r3, #1
 8009208:	627b      	str	r3, [r7, #36]	@ 0x24
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1dd      	bne.n	80091cc <USB_WritePMA+0x3a>
  }
}
 8009210:	bf00      	nop
 8009212:	bf00      	nop
 8009214:	372c      	adds	r7, #44	@ 0x2c
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800921e:	b480      	push	{r7}
 8009220:	b08b      	sub	sp, #44	@ 0x2c
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	4611      	mov	r1, r2
 800922a:	461a      	mov	r2, r3
 800922c:	460b      	mov	r3, r1
 800922e:	80fb      	strh	r3, [r7, #6]
 8009230:	4613      	mov	r3, r2
 8009232:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009234:	88bb      	ldrh	r3, [r7, #4]
 8009236:	085b      	lsrs	r3, r3, #1
 8009238:	b29b      	uxth	r3, r3
 800923a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009244:	88fb      	ldrh	r3, [r7, #6]
 8009246:	005a      	lsls	r2, r3, #1
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	4413      	add	r3, r2
 800924c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009250:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	627b      	str	r3, [r7, #36]	@ 0x24
 8009256:	e01b      	b.n	8009290 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	3302      	adds	r3, #2
 8009264:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	b2da      	uxtb	r2, r3
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	3301      	adds	r3, #1
 8009272:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	b2da      	uxtb	r2, r3
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	3301      	adds	r3, #1
 8009282:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	3302      	adds	r3, #2
 8009288:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	3b01      	subs	r3, #1
 800928e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e0      	bne.n	8009258 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009296:	88bb      	ldrh	r3, [r7, #4]
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	b29b      	uxth	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d007      	beq.n	80092b2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	701a      	strb	r2, [r3, #0]
  }
}
 80092b2:	bf00      	nop
 80092b4:	372c      	adds	r7, #44	@ 0x2c
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	460b      	mov	r3, r1
 80092c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7c1b      	ldrb	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d115      	bne.n	8009302 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80092d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092da:	2202      	movs	r2, #2
 80092dc:	2181      	movs	r1, #129	@ 0x81
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 feb3 	bl	800b04a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092ee:	2202      	movs	r2, #2
 80092f0:	2101      	movs	r1, #1
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 fea9 	bl	800b04a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009300:	e012      	b.n	8009328 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009302:	2340      	movs	r3, #64	@ 0x40
 8009304:	2202      	movs	r2, #2
 8009306:	2181      	movs	r1, #129	@ 0x81
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 fe9e 	bl	800b04a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009314:	2340      	movs	r3, #64	@ 0x40
 8009316:	2202      	movs	r2, #2
 8009318:	2101      	movs	r1, #1
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 fe95 	bl	800b04a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009328:	2308      	movs	r3, #8
 800932a:	2203      	movs	r2, #3
 800932c:	2182      	movs	r1, #130	@ 0x82
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f001 fe8b 	bl	800b04a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800933a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800933e:	f001 ffab 	bl	800b298 <USBD_static_malloc>
 8009342:	4602      	mov	r2, r0
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009354:	2301      	movs	r3, #1
 8009356:	73fb      	strb	r3, [r7, #15]
 8009358:	e026      	b.n	80093a8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009360:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	7c1b      	ldrb	r3, [r3, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d109      	bne.n	8009398 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800938a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800938e:	2101      	movs	r1, #1
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f001 ff4b 	bl	800b22c <USBD_LL_PrepareReceive>
 8009396:	e007      	b.n	80093a8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800939e:	2340      	movs	r3, #64	@ 0x40
 80093a0:	2101      	movs	r1, #1
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 ff42 	bl	800b22c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80093c2:	2181      	movs	r1, #129	@ 0x81
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 fe66 	bl	800b096 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80093d0:	2101      	movs	r1, #1
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f001 fe5f 	bl	800b096 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80093e0:	2182      	movs	r1, #130	@ 0x82
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 fe57 	bl	800b096 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00e      	beq.n	8009416 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009408:	4618      	mov	r0, r3
 800940a:	f001 ff53 	bl	800b2b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009430:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009436:	2300      	movs	r3, #0
 8009438:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009446:	2b00      	cmp	r3, #0
 8009448:	d039      	beq.n	80094be <USBD_CDC_Setup+0x9e>
 800944a:	2b20      	cmp	r3, #32
 800944c:	d17f      	bne.n	800954e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	88db      	ldrh	r3, [r3, #6]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d029      	beq.n	80094aa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	b25b      	sxtb	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	da11      	bge.n	8009484 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800946c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	88d2      	ldrh	r2, [r2, #6]
 8009472:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009474:	6939      	ldr	r1, [r7, #16]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	88db      	ldrh	r3, [r3, #6]
 800947a:	461a      	mov	r2, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 fa0f 	bl	800a8a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009482:	e06b      	b.n	800955c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	785a      	ldrb	r2, [r3, #1]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	88db      	ldrh	r3, [r3, #6]
 8009492:	b2da      	uxtb	r2, r3
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800949a:	6939      	ldr	r1, [r7, #16]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	88db      	ldrh	r3, [r3, #6]
 80094a0:	461a      	mov	r2, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f001 fa2a 	bl	800a8fc <USBD_CtlPrepareRx>
      break;
 80094a8:	e058      	b.n	800955c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	7850      	ldrb	r0, [r2, #1]
 80094b6:	2200      	movs	r2, #0
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	4798      	blx	r3
      break;
 80094bc:	e04e      	b.n	800955c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	785b      	ldrb	r3, [r3, #1]
 80094c2:	2b0b      	cmp	r3, #11
 80094c4:	d02e      	beq.n	8009524 <USBD_CDC_Setup+0x104>
 80094c6:	2b0b      	cmp	r3, #11
 80094c8:	dc38      	bgt.n	800953c <USBD_CDC_Setup+0x11c>
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <USBD_CDC_Setup+0xb4>
 80094ce:	2b0a      	cmp	r3, #10
 80094d0:	d014      	beq.n	80094fc <USBD_CDC_Setup+0xdc>
 80094d2:	e033      	b.n	800953c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d107      	bne.n	80094ee <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80094de:	f107 030c 	add.w	r3, r7, #12
 80094e2:	2202      	movs	r2, #2
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f001 f9da 	bl	800a8a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094ec:	e02e      	b.n	800954c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 f96a 	bl	800a7ca <USBD_CtlError>
            ret = USBD_FAIL;
 80094f6:	2302      	movs	r3, #2
 80094f8:	75fb      	strb	r3, [r7, #23]
          break;
 80094fa:	e027      	b.n	800954c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009502:	2b03      	cmp	r3, #3
 8009504:	d107      	bne.n	8009516 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009506:	f107 030f 	add.w	r3, r7, #15
 800950a:	2201      	movs	r2, #1
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 f9c6 	bl	800a8a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009514:	e01a      	b.n	800954c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 f956 	bl	800a7ca <USBD_CtlError>
            ret = USBD_FAIL;
 800951e:	2302      	movs	r3, #2
 8009520:	75fb      	strb	r3, [r7, #23]
          break;
 8009522:	e013      	b.n	800954c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800952a:	2b03      	cmp	r3, #3
 800952c:	d00d      	beq.n	800954a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f001 f94a 	bl	800a7ca <USBD_CtlError>
            ret = USBD_FAIL;
 8009536:	2302      	movs	r3, #2
 8009538:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800953a:	e006      	b.n	800954a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 f943 	bl	800a7ca <USBD_CtlError>
          ret = USBD_FAIL;
 8009544:	2302      	movs	r3, #2
 8009546:	75fb      	strb	r3, [r7, #23]
          break;
 8009548:	e000      	b.n	800954c <USBD_CDC_Setup+0x12c>
          break;
 800954a:	bf00      	nop
      }
      break;
 800954c:	e006      	b.n	800955c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 f93a 	bl	800a7ca <USBD_CtlError>
      ret = USBD_FAIL;
 8009556:	2302      	movs	r3, #2
 8009558:	75fb      	strb	r3, [r7, #23]
      break;
 800955a:	bf00      	nop
  }

  return ret;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3718      	adds	r7, #24
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009578:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009580:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009588:	2b00      	cmp	r3, #0
 800958a:	d03a      	beq.n	8009602 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	4613      	mov	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	331c      	adds	r3, #28
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d029      	beq.n	80095f6 <USBD_CDC_DataIn+0x90>
 80095a2:	78fa      	ldrb	r2, [r7, #3]
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	440b      	add	r3, r1
 80095b0:	331c      	adds	r3, #28
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	78f9      	ldrb	r1, [r7, #3]
 80095b6:	68b8      	ldr	r0, [r7, #8]
 80095b8:	460b      	mov	r3, r1
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	4403      	add	r3, r0
 80095c2:	3320      	adds	r3, #32
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80095ca:	fb01 f303 	mul.w	r3, r1, r3
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d110      	bne.n	80095f6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80095d4:	78fa      	ldrb	r2, [r7, #3]
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4613      	mov	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	331c      	adds	r3, #28
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095e8:	78f9      	ldrb	r1, [r7, #3]
 80095ea:	2300      	movs	r3, #0
 80095ec:	2200      	movs	r2, #0
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f001 fdf9 	bl	800b1e6 <USBD_LL_Transmit>
 80095f4:	e003      	b.n	80095fe <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	e000      	b.n	8009604 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009602:	2302      	movs	r3, #2
  }
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800961e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 fe24 	bl	800b272 <USBD_LL_GetRxDataSize>
 800962a:	4602      	mov	r2, r0
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00d      	beq.n	8009658 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009650:	4611      	mov	r1, r2
 8009652:	4798      	blx	r3

    return USBD_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	e000      	b.n	800965a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009658:	2302      	movs	r3, #2
  }
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009670:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009678:	2b00      	cmp	r3, #0
 800967a:	d014      	beq.n	80096a6 <USBD_CDC_EP0_RxReady+0x44>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009682:	2bff      	cmp	r3, #255	@ 0xff
 8009684:	d00f      	beq.n	80096a6 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009694:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800969c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	22ff      	movs	r2, #255	@ 0xff
 80096a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2243      	movs	r2, #67	@ 0x43
 80096bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80096be:	4b03      	ldr	r3, [pc, #12]	@ (80096cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	20000094 	.word	0x20000094

080096d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2243      	movs	r2, #67	@ 0x43
 80096dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80096de:	4b03      	ldr	r3, [pc, #12]	@ (80096ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	20000050 	.word	0x20000050

080096f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2243      	movs	r2, #67	@ 0x43
 80096fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80096fe:	4b03      	ldr	r3, [pc, #12]	@ (800970c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009700:	4618      	mov	r0, r3
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	200000d8 	.word	0x200000d8

08009710 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	220a      	movs	r2, #10
 800971c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800971e:	4b03      	ldr	r3, [pc, #12]	@ (800972c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	2000000c 	.word	0x2000000c

08009730 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800973a:	2302      	movs	r3, #2
 800973c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009750:	7bfb      	ldrb	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr

0800975e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800975e:	b480      	push	{r7}
 8009760:	b087      	sub	sp, #28
 8009762:	af00      	add	r7, sp, #0
 8009764:	60f8      	str	r0, [r7, #12]
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	4613      	mov	r3, r2
 800976a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009772:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800977c:	88fa      	ldrh	r2, [r7, #6]
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	371c      	adds	r7, #28
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009792:	b480      	push	{r7}
 8009794:	b085      	sub	sp, #20
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01c      	beq.n	800980e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d115      	bne.n	800980a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	2181      	movs	r1, #129	@ 0x81
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 fcf0 	bl	800b1e6 <USBD_LL_Transmit>

      return USBD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	e002      	b.n	8009810 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800980a:	2301      	movs	r3, #1
 800980c:	e000      	b.n	8009810 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800980e:	2302      	movs	r3, #2
  }
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009826:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800982e:	2b00      	cmp	r3, #0
 8009830:	d017      	beq.n	8009862 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	7c1b      	ldrb	r3, [r3, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d109      	bne.n	800984e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009840:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009844:	2101      	movs	r1, #1
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f001 fcf0 	bl	800b22c <USBD_LL_PrepareReceive>
 800984c:	e007      	b.n	800985e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009854:	2340      	movs	r3, #64	@ 0x40
 8009856:	2101      	movs	r1, #1
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f001 fce7 	bl	800b22c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	e000      	b.n	8009864 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009862:	2302      	movs	r3, #2
  }
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	4613      	mov	r3, r2
 8009878:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d101      	bne.n	8009884 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009880:	2302      	movs	r3, #2
 8009882:	e01a      	b.n	80098ba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	79fa      	ldrb	r2, [r7, #7]
 80098b0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f001 fb54 	bl	800af60 <USBD_LL_Init>

  return USBD_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b085      	sub	sp, #20
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d006      	beq.n	80098e4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]
 80098e2:	e001      	b.n	80098e8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80098e4:	2302      	movs	r3, #2
 80098e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 fb88 	bl	800b014 <USBD_LL_Start>

  return USBD_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800990e:	b480      	push	{r7}
 8009910:	b083      	sub	sp, #12
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009930:	2302      	movs	r3, #2
 8009932:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00c      	beq.n	8009958 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	4611      	mov	r1, r2
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	4798      	blx	r3
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009958:	7bfb      	ldrb	r3, [r7, #15]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	78fa      	ldrb	r2, [r7, #3]
 8009978:	4611      	mov	r1, r2
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	4798      	blx	r3

  return USBD_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fedb 	bl	800a756 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80099bc:	f003 031f 	and.w	r3, r3, #31
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d016      	beq.n	80099f2 <USBD_LL_SetupStage+0x6a>
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d81c      	bhi.n	8009a02 <USBD_LL_SetupStage+0x7a>
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <USBD_LL_SetupStage+0x4a>
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d008      	beq.n	80099e2 <USBD_LL_SetupStage+0x5a>
 80099d0:	e017      	b.n	8009a02 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f9ce 	bl	8009d7c <USBD_StdDevReq>
      break;
 80099e0:	e01a      	b.n	8009a18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fa30 	bl	8009e50 <USBD_StdItfReq>
      break;
 80099f0:	e012      	b.n	8009a18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa70 	bl	8009ee0 <USBD_StdEPReq>
      break;
 8009a00:	e00a      	b.n	8009a18 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009a08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f001 fb5f 	bl	800b0d4 <USBD_LL_StallEP>
      break;
 8009a16:	bf00      	nop
  }

  return USBD_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b086      	sub	sp, #24
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	607a      	str	r2, [r7, #4]
 8009a2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d14b      	bne.n	8009ace <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009a3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a44:	2b03      	cmp	r3, #3
 8009a46:	d134      	bne.n	8009ab2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d919      	bls.n	8009a88 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	68da      	ldr	r2, [r3, #12]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	1ad2      	subs	r2, r2, r3
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d203      	bcs.n	8009a76 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	e002      	b.n	8009a7c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 ff59 	bl	800a938 <USBD_CtlContinueRx>
 8009a86:	e038      	b.n	8009afa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00a      	beq.n	8009aaa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d105      	bne.n	8009aaa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 ff56 	bl	800a95c <USBD_CtlSendStatus>
 8009ab0:	e023      	b.n	8009afa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ab8:	2b05      	cmp	r3, #5
 8009aba:	d11e      	bne.n	8009afa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f001 fb04 	bl	800b0d4 <USBD_LL_StallEP>
 8009acc:	e015      	b.n	8009afa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00d      	beq.n	8009af6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009ae0:	2b03      	cmp	r3, #3
 8009ae2:	d108      	bne.n	8009af6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	7afa      	ldrb	r2, [r7, #11]
 8009aee:	4611      	mov	r1, r2
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	4798      	blx	r3
 8009af4:	e001      	b.n	8009afa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009af6:	2302      	movs	r3, #2
 8009af8:	e000      	b.n	8009afc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b12:	7afb      	ldrb	r3, [r7, #11]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d17f      	bne.n	8009c18 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3314      	adds	r3, #20
 8009b1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d15c      	bne.n	8009be2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d915      	bls.n	8009b60 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	1ad2      	subs	r2, r2, r3
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6879      	ldr	r1, [r7, #4]
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 fec3 	bl	800a8d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b52:	2300      	movs	r3, #0
 8009b54:	2200      	movs	r2, #0
 8009b56:	2100      	movs	r1, #0
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f001 fb67 	bl	800b22c <USBD_LL_PrepareReceive>
 8009b5e:	e04e      	b.n	8009bfe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	697a      	ldr	r2, [r7, #20]
 8009b66:	6912      	ldr	r2, [r2, #16]
 8009b68:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b6c:	fb01 f202 	mul.w	r2, r1, r2
 8009b70:	1a9b      	subs	r3, r3, r2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d11c      	bne.n	8009bb0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	689a      	ldr	r2, [r3, #8]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d316      	bcc.n	8009bb0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	689a      	ldr	r2, [r3, #8]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d20f      	bcs.n	8009bb0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b90:	2200      	movs	r2, #0
 8009b92:	2100      	movs	r1, #0
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 fe9f 	bl	800a8d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f001 fb3f 	bl	800b22c <USBD_LL_PrepareReceive>
 8009bae:	e026      	b.n	8009bfe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00a      	beq.n	8009bd2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d105      	bne.n	8009bd2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009bd2:	2180      	movs	r1, #128	@ 0x80
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f001 fa7d 	bl	800b0d4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 fed1 	bl	800a982 <USBD_CtlReceiveStatus>
 8009be0:	e00d      	b.n	8009bfe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d004      	beq.n	8009bf6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d103      	bne.n	8009bfe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009bf6:	2180      	movs	r1, #128	@ 0x80
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f001 fa6b 	bl	800b0d4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d11d      	bne.n	8009c44 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7ff fe80 	bl	800990e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009c16:	e015      	b.n	8009c44 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00d      	beq.n	8009c40 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d108      	bne.n	8009c40 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	7afa      	ldrb	r2, [r7, #11]
 8009c38:	4611      	mov	r1, r2
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	4798      	blx	r3
 8009c3e:	e001      	b.n	8009c44 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c40:	2302      	movs	r3, #2
 8009c42:	e000      	b.n	8009c46 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b082      	sub	sp, #8
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c56:	2340      	movs	r3, #64	@ 0x40
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 f9f4 	bl	800b04a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2240      	movs	r2, #64	@ 0x40
 8009c6e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c72:	2340      	movs	r3, #64	@ 0x40
 8009c74:	2200      	movs	r2, #0
 8009c76:	2180      	movs	r1, #128	@ 0x80
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 f9e6 	bl	800b04a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2240      	movs	r2, #64	@ 0x40
 8009c88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	6852      	ldr	r2, [r2, #4]
 8009cbe:	b2d2      	uxtb	r2, r2
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	4798      	blx	r3
  }

  return USBD_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	78fa      	ldrb	r2, [r7, #3]
 8009ce0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2204      	movs	r2, #4
 8009d08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d105      	bne.n	8009d38 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b082      	sub	sp, #8
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d10b      	bne.n	8009d70 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d005      	beq.n	8009d70 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
	...

08009d7c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d92:	2b40      	cmp	r3, #64	@ 0x40
 8009d94:	d005      	beq.n	8009da2 <USBD_StdDevReq+0x26>
 8009d96:	2b40      	cmp	r3, #64	@ 0x40
 8009d98:	d84f      	bhi.n	8009e3a <USBD_StdDevReq+0xbe>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d009      	beq.n	8009db2 <USBD_StdDevReq+0x36>
 8009d9e:	2b20      	cmp	r3, #32
 8009da0:	d14b      	bne.n	8009e3a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	4798      	blx	r3
      break;
 8009db0:	e048      	b.n	8009e44 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	785b      	ldrb	r3, [r3, #1]
 8009db6:	2b09      	cmp	r3, #9
 8009db8:	d839      	bhi.n	8009e2e <USBD_StdDevReq+0xb2>
 8009dba:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc0 <USBD_StdDevReq+0x44>)
 8009dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc0:	08009e11 	.word	0x08009e11
 8009dc4:	08009e25 	.word	0x08009e25
 8009dc8:	08009e2f 	.word	0x08009e2f
 8009dcc:	08009e1b 	.word	0x08009e1b
 8009dd0:	08009e2f 	.word	0x08009e2f
 8009dd4:	08009df3 	.word	0x08009df3
 8009dd8:	08009de9 	.word	0x08009de9
 8009ddc:	08009e2f 	.word	0x08009e2f
 8009de0:	08009e07 	.word	0x08009e07
 8009de4:	08009dfd 	.word	0x08009dfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f9dc 	bl	800a1a8 <USBD_GetDescriptor>
          break;
 8009df0:	e022      	b.n	8009e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fb3f 	bl	800a478 <USBD_SetAddress>
          break;
 8009dfa:	e01d      	b.n	8009e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fb7e 	bl	800a500 <USBD_SetConfig>
          break;
 8009e04:	e018      	b.n	8009e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fc07 	bl	800a61c <USBD_GetConfig>
          break;
 8009e0e:	e013      	b.n	8009e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fc37 	bl	800a686 <USBD_GetStatus>
          break;
 8009e18:	e00e      	b.n	8009e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fc65 	bl	800a6ec <USBD_SetFeature>
          break;
 8009e22:	e009      	b.n	8009e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fc74 	bl	800a714 <USBD_ClrFeature>
          break;
 8009e2c:	e004      	b.n	8009e38 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fcca 	bl	800a7ca <USBD_CtlError>
          break;
 8009e36:	bf00      	nop
      }
      break;
 8009e38:	e004      	b.n	8009e44 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fcc4 	bl	800a7ca <USBD_CtlError>
      break;
 8009e42:	bf00      	nop
  }

  return ret;
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop

08009e50 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e66:	2b40      	cmp	r3, #64	@ 0x40
 8009e68:	d005      	beq.n	8009e76 <USBD_StdItfReq+0x26>
 8009e6a:	2b40      	cmp	r3, #64	@ 0x40
 8009e6c:	d82e      	bhi.n	8009ecc <USBD_StdItfReq+0x7c>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <USBD_StdItfReq+0x26>
 8009e72:	2b20      	cmp	r3, #32
 8009e74:	d12a      	bne.n	8009ecc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d81d      	bhi.n	8009ebe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	889b      	ldrh	r3, [r3, #4]
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d813      	bhi.n	8009eb4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	4798      	blx	r3
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	88db      	ldrh	r3, [r3, #6]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d110      	bne.n	8009ec8 <USBD_StdItfReq+0x78>
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10d      	bne.n	8009ec8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fd55 	bl	800a95c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009eb2:	e009      	b.n	8009ec8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fc87 	bl	800a7ca <USBD_CtlError>
          break;
 8009ebc:	e004      	b.n	8009ec8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fc82 	bl	800a7ca <USBD_CtlError>
          break;
 8009ec6:	e000      	b.n	8009eca <USBD_StdItfReq+0x7a>
          break;
 8009ec8:	bf00      	nop
      }
      break;
 8009eca:	e004      	b.n	8009ed6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fc7b 	bl	800a7ca <USBD_CtlError>
      break;
 8009ed4:	bf00      	nop
  }

  return USBD_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	889b      	ldrh	r3, [r3, #4]
 8009ef2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009efc:	2b40      	cmp	r3, #64	@ 0x40
 8009efe:	d007      	beq.n	8009f10 <USBD_StdEPReq+0x30>
 8009f00:	2b40      	cmp	r3, #64	@ 0x40
 8009f02:	f200 8146 	bhi.w	800a192 <USBD_StdEPReq+0x2b2>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <USBD_StdEPReq+0x40>
 8009f0a:	2b20      	cmp	r3, #32
 8009f0c:	f040 8141 	bne.w	800a192 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	4798      	blx	r3
      break;
 8009f1e:	e13d      	b.n	800a19c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f28:	2b20      	cmp	r3, #32
 8009f2a:	d10a      	bne.n	8009f42 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	4798      	blx	r3
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
 8009f40:	e12d      	b.n	800a19e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	785b      	ldrb	r3, [r3, #1]
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d007      	beq.n	8009f5a <USBD_StdEPReq+0x7a>
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	f300 811b 	bgt.w	800a186 <USBD_StdEPReq+0x2a6>
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d072      	beq.n	800a03a <USBD_StdEPReq+0x15a>
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d03a      	beq.n	8009fce <USBD_StdEPReq+0xee>
 8009f58:	e115      	b.n	800a186 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d002      	beq.n	8009f6a <USBD_StdEPReq+0x8a>
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	d015      	beq.n	8009f94 <USBD_StdEPReq+0xb4>
 8009f68:	e02b      	b.n	8009fc2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00c      	beq.n	8009f8a <USBD_StdEPReq+0xaa>
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	2b80      	cmp	r3, #128	@ 0x80
 8009f74:	d009      	beq.n	8009f8a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 f8aa 	bl	800b0d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f80:	2180      	movs	r1, #128	@ 0x80
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 f8a6 	bl	800b0d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f88:	e020      	b.n	8009fcc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fc1c 	bl	800a7ca <USBD_CtlError>
              break;
 8009f92:	e01b      	b.n	8009fcc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	885b      	ldrh	r3, [r3, #2]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10e      	bne.n	8009fba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009f9c:	7bbb      	ldrb	r3, [r7, #14]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00b      	beq.n	8009fba <USBD_StdEPReq+0xda>
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	2b80      	cmp	r3, #128	@ 0x80
 8009fa6:	d008      	beq.n	8009fba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	88db      	ldrh	r3, [r3, #6]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d104      	bne.n	8009fba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f001 f88d 	bl	800b0d4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fcce 	bl	800a95c <USBD_CtlSendStatus>

              break;
 8009fc0:	e004      	b.n	8009fcc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fc00 	bl	800a7ca <USBD_CtlError>
              break;
 8009fca:	bf00      	nop
          }
          break;
 8009fcc:	e0e0      	b.n	800a190 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d002      	beq.n	8009fde <USBD_StdEPReq+0xfe>
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d015      	beq.n	800a008 <USBD_StdEPReq+0x128>
 8009fdc:	e026      	b.n	800a02c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00c      	beq.n	8009ffe <USBD_StdEPReq+0x11e>
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	2b80      	cmp	r3, #128	@ 0x80
 8009fe8:	d009      	beq.n	8009ffe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f001 f870 	bl	800b0d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ff4:	2180      	movs	r1, #128	@ 0x80
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f001 f86c 	bl	800b0d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ffc:	e01c      	b.n	800a038 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fbe2 	bl	800a7ca <USBD_CtlError>
              break;
 800a006:	e017      	b.n	800a038 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	885b      	ldrh	r3, [r3, #2]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d112      	bne.n	800a036 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a010:	7bbb      	ldrb	r3, [r7, #14]
 800a012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a016:	2b00      	cmp	r3, #0
 800a018:	d004      	beq.n	800a024 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f001 f877 	bl	800b112 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fc99 	bl	800a95c <USBD_CtlSendStatus>
              }
              break;
 800a02a:	e004      	b.n	800a036 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fbcb 	bl	800a7ca <USBD_CtlError>
              break;
 800a034:	e000      	b.n	800a038 <USBD_StdEPReq+0x158>
              break;
 800a036:	bf00      	nop
          }
          break;
 800a038:	e0aa      	b.n	800a190 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a040:	2b02      	cmp	r3, #2
 800a042:	d002      	beq.n	800a04a <USBD_StdEPReq+0x16a>
 800a044:	2b03      	cmp	r3, #3
 800a046:	d032      	beq.n	800a0ae <USBD_StdEPReq+0x1ce>
 800a048:	e097      	b.n	800a17a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a04a:	7bbb      	ldrb	r3, [r7, #14]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d007      	beq.n	800a060 <USBD_StdEPReq+0x180>
 800a050:	7bbb      	ldrb	r3, [r7, #14]
 800a052:	2b80      	cmp	r3, #128	@ 0x80
 800a054:	d004      	beq.n	800a060 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a056:	6839      	ldr	r1, [r7, #0]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fbb6 	bl	800a7ca <USBD_CtlError>
                break;
 800a05e:	e091      	b.n	800a184 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a064:	2b00      	cmp	r3, #0
 800a066:	da0b      	bge.n	800a080 <USBD_StdEPReq+0x1a0>
 800a068:	7bbb      	ldrb	r3, [r7, #14]
 800a06a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	3310      	adds	r3, #16
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	4413      	add	r3, r2
 800a07c:	3304      	adds	r3, #4
 800a07e:	e00b      	b.n	800a098 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a080:	7bbb      	ldrb	r3, [r7, #14]
 800a082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a086:	4613      	mov	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	4413      	add	r3, r2
 800a096:	3304      	adds	r3, #4
 800a098:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2200      	movs	r2, #0
 800a09e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fbfa 	bl	800a8a0 <USBD_CtlSendData>
              break;
 800a0ac:	e06a      	b.n	800a184 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	da11      	bge.n	800a0da <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	f003 020f 	and.w	r2, r3, #15
 800a0bc:	6879      	ldr	r1, [r7, #4]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	440b      	add	r3, r1
 800a0c8:	3318      	adds	r3, #24
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d117      	bne.n	800a100 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fb79 	bl	800a7ca <USBD_CtlError>
                  break;
 800a0d8:	e054      	b.n	800a184 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a0da:	7bbb      	ldrb	r3, [r7, #14]
 800a0dc:	f003 020f 	and.w	r2, r3, #15
 800a0e0:	6879      	ldr	r1, [r7, #4]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4413      	add	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	440b      	add	r3, r1
 800a0ec:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d104      	bne.n	800a100 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0f6:	6839      	ldr	r1, [r7, #0]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fb66 	bl	800a7ca <USBD_CtlError>
                  break;
 800a0fe:	e041      	b.n	800a184 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a104:	2b00      	cmp	r3, #0
 800a106:	da0b      	bge.n	800a120 <USBD_StdEPReq+0x240>
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a10e:	4613      	mov	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	3310      	adds	r3, #16
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	4413      	add	r3, r2
 800a11c:	3304      	adds	r3, #4
 800a11e:	e00b      	b.n	800a138 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a120:	7bbb      	ldrb	r3, [r7, #14]
 800a122:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a126:	4613      	mov	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	4413      	add	r3, r2
 800a136:	3304      	adds	r3, #4
 800a138:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <USBD_StdEPReq+0x266>
 800a140:	7bbb      	ldrb	r3, [r7, #14]
 800a142:	2b80      	cmp	r3, #128	@ 0x80
 800a144:	d103      	bne.n	800a14e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	e00e      	b.n	800a16c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
 800a150:	4619      	mov	r1, r3
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fffc 	bl	800b150 <USBD_LL_IsStallEP>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	2201      	movs	r2, #1
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	e002      	b.n	800a16c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	2200      	movs	r2, #0
 800a16a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2202      	movs	r2, #2
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fb94 	bl	800a8a0 <USBD_CtlSendData>
              break;
 800a178:	e004      	b.n	800a184 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fb24 	bl	800a7ca <USBD_CtlError>
              break;
 800a182:	bf00      	nop
          }
          break;
 800a184:	e004      	b.n	800a190 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fb1e 	bl	800a7ca <USBD_CtlError>
          break;
 800a18e:	bf00      	nop
      }
      break;
 800a190:	e004      	b.n	800a19c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fb18 	bl	800a7ca <USBD_CtlError>
      break;
 800a19a:	bf00      	nop
  }

  return ret;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	885b      	ldrh	r3, [r3, #2]
 800a1c2:	0a1b      	lsrs	r3, r3, #8
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	2b06      	cmp	r3, #6
 800a1ca:	f200 8128 	bhi.w	800a41e <USBD_GetDescriptor+0x276>
 800a1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d4 <USBD_GetDescriptor+0x2c>)
 800a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d4:	0800a1f1 	.word	0x0800a1f1
 800a1d8:	0800a209 	.word	0x0800a209
 800a1dc:	0800a249 	.word	0x0800a249
 800a1e0:	0800a41f 	.word	0x0800a41f
 800a1e4:	0800a41f 	.word	0x0800a41f
 800a1e8:	0800a3bf 	.word	0x0800a3bf
 800a1ec:	0800a3eb 	.word	0x0800a3eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	7c12      	ldrb	r2, [r2, #16]
 800a1fc:	f107 0108 	add.w	r1, r7, #8
 800a200:	4610      	mov	r0, r2
 800a202:	4798      	blx	r3
 800a204:	60f8      	str	r0, [r7, #12]
      break;
 800a206:	e112      	b.n	800a42e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7c1b      	ldrb	r3, [r3, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10d      	bne.n	800a22c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a218:	f107 0208 	add.w	r2, r7, #8
 800a21c:	4610      	mov	r0, r2
 800a21e:	4798      	blx	r3
 800a220:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3301      	adds	r3, #1
 800a226:	2202      	movs	r2, #2
 800a228:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a22a:	e100      	b.n	800a42e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a234:	f107 0208 	add.w	r2, r7, #8
 800a238:	4610      	mov	r0, r2
 800a23a:	4798      	blx	r3
 800a23c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3301      	adds	r3, #1
 800a242:	2202      	movs	r2, #2
 800a244:	701a      	strb	r2, [r3, #0]
      break;
 800a246:	e0f2      	b.n	800a42e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	885b      	ldrh	r3, [r3, #2]
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b05      	cmp	r3, #5
 800a250:	f200 80ac 	bhi.w	800a3ac <USBD_GetDescriptor+0x204>
 800a254:	a201      	add	r2, pc, #4	@ (adr r2, 800a25c <USBD_GetDescriptor+0xb4>)
 800a256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25a:	bf00      	nop
 800a25c:	0800a275 	.word	0x0800a275
 800a260:	0800a2a9 	.word	0x0800a2a9
 800a264:	0800a2dd 	.word	0x0800a2dd
 800a268:	0800a311 	.word	0x0800a311
 800a26c:	0800a345 	.word	0x0800a345
 800a270:	0800a379 	.word	0x0800a379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00b      	beq.n	800a298 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	7c12      	ldrb	r2, [r2, #16]
 800a28c:	f107 0108 	add.w	r1, r7, #8
 800a290:	4610      	mov	r0, r2
 800a292:	4798      	blx	r3
 800a294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a296:	e091      	b.n	800a3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa95 	bl	800a7ca <USBD_CtlError>
            err++;
 800a2a0:	7afb      	ldrb	r3, [r7, #11]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2a6:	e089      	b.n	800a3bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00b      	beq.n	800a2cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	7c12      	ldrb	r2, [r2, #16]
 800a2c0:	f107 0108 	add.w	r1, r7, #8
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4798      	blx	r3
 800a2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ca:	e077      	b.n	800a3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fa7b 	bl	800a7ca <USBD_CtlError>
            err++;
 800a2d4:	7afb      	ldrb	r3, [r7, #11]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2da:	e06f      	b.n	800a3bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00b      	beq.n	800a300 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	7c12      	ldrb	r2, [r2, #16]
 800a2f4:	f107 0108 	add.w	r1, r7, #8
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	4798      	blx	r3
 800a2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2fe:	e05d      	b.n	800a3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fa61 	bl	800a7ca <USBD_CtlError>
            err++;
 800a308:	7afb      	ldrb	r3, [r7, #11]
 800a30a:	3301      	adds	r3, #1
 800a30c:	72fb      	strb	r3, [r7, #11]
          break;
 800a30e:	e055      	b.n	800a3bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00b      	beq.n	800a334 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	7c12      	ldrb	r2, [r2, #16]
 800a328:	f107 0108 	add.w	r1, r7, #8
 800a32c:	4610      	mov	r0, r2
 800a32e:	4798      	blx	r3
 800a330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a332:	e043      	b.n	800a3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fa47 	bl	800a7ca <USBD_CtlError>
            err++;
 800a33c:	7afb      	ldrb	r3, [r7, #11]
 800a33e:	3301      	adds	r3, #1
 800a340:	72fb      	strb	r3, [r7, #11]
          break;
 800a342:	e03b      	b.n	800a3bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	7c12      	ldrb	r2, [r2, #16]
 800a35c:	f107 0108 	add.w	r1, r7, #8
 800a360:	4610      	mov	r0, r2
 800a362:	4798      	blx	r3
 800a364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a366:	e029      	b.n	800a3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fa2d 	bl	800a7ca <USBD_CtlError>
            err++;
 800a370:	7afb      	ldrb	r3, [r7, #11]
 800a372:	3301      	adds	r3, #1
 800a374:	72fb      	strb	r3, [r7, #11]
          break;
 800a376:	e021      	b.n	800a3bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00b      	beq.n	800a39c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	7c12      	ldrb	r2, [r2, #16]
 800a390:	f107 0108 	add.w	r1, r7, #8
 800a394:	4610      	mov	r0, r2
 800a396:	4798      	blx	r3
 800a398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a39a:	e00f      	b.n	800a3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fa13 	bl	800a7ca <USBD_CtlError>
            err++;
 800a3a4:	7afb      	ldrb	r3, [r7, #11]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3aa:	e007      	b.n	800a3bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fa0b 	bl	800a7ca <USBD_CtlError>
          err++;
 800a3b4:	7afb      	ldrb	r3, [r7, #11]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a3ba:	e038      	b.n	800a42e <USBD_GetDescriptor+0x286>
 800a3bc:	e037      	b.n	800a42e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	7c1b      	ldrb	r3, [r3, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d109      	bne.n	800a3da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ce:	f107 0208 	add.w	r2, r7, #8
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	4798      	blx	r3
 800a3d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3d8:	e029      	b.n	800a42e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f9f4 	bl	800a7ca <USBD_CtlError>
        err++;
 800a3e2:	7afb      	ldrb	r3, [r7, #11]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	72fb      	strb	r3, [r7, #11]
      break;
 800a3e8:	e021      	b.n	800a42e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	7c1b      	ldrb	r3, [r3, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10d      	bne.n	800a40e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3fa:	f107 0208 	add.w	r2, r7, #8
 800a3fe:	4610      	mov	r0, r2
 800a400:	4798      	blx	r3
 800a402:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3301      	adds	r3, #1
 800a408:	2207      	movs	r2, #7
 800a40a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a40c:	e00f      	b.n	800a42e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f9da 	bl	800a7ca <USBD_CtlError>
        err++;
 800a416:	7afb      	ldrb	r3, [r7, #11]
 800a418:	3301      	adds	r3, #1
 800a41a:	72fb      	strb	r3, [r7, #11]
      break;
 800a41c:	e007      	b.n	800a42e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f9d2 	bl	800a7ca <USBD_CtlError>
      err++;
 800a426:	7afb      	ldrb	r3, [r7, #11]
 800a428:	3301      	adds	r3, #1
 800a42a:	72fb      	strb	r3, [r7, #11]
      break;
 800a42c:	bf00      	nop
  }

  if (err != 0U)
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d11c      	bne.n	800a46e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a434:	893b      	ldrh	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d011      	beq.n	800a45e <USBD_GetDescriptor+0x2b6>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	88db      	ldrh	r3, [r3, #6]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00d      	beq.n	800a45e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	88da      	ldrh	r2, [r3, #6]
 800a446:	893b      	ldrh	r3, [r7, #8]
 800a448:	4293      	cmp	r3, r2
 800a44a:	bf28      	it	cs
 800a44c:	4613      	movcs	r3, r2
 800a44e:	b29b      	uxth	r3, r3
 800a450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a452:	893b      	ldrh	r3, [r7, #8]
 800a454:	461a      	mov	r2, r3
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fa21 	bl	800a8a0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	88db      	ldrh	r3, [r3, #6]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d104      	bne.n	800a470 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fa78 	bl	800a95c <USBD_CtlSendStatus>
 800a46c:	e000      	b.n	800a470 <USBD_GetDescriptor+0x2c8>
    return;
 800a46e:	bf00      	nop
    }
  }
}
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop

0800a478 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	889b      	ldrh	r3, [r3, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d130      	bne.n	800a4ec <USBD_SetAddress+0x74>
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	88db      	ldrh	r3, [r3, #6]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d12c      	bne.n	800a4ec <USBD_SetAddress+0x74>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	885b      	ldrh	r3, [r3, #2]
 800a496:	2b7f      	cmp	r3, #127	@ 0x7f
 800a498:	d828      	bhi.n	800a4ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	885b      	ldrh	r3, [r3, #2]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d104      	bne.n	800a4ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f989 	bl	800a7ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b8:	e01d      	b.n	800a4f6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	7bfa      	ldrb	r2, [r7, #15]
 800a4be:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fe6e 	bl	800b1a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fa45 	bl	800a95c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d004      	beq.n	800a4e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4e0:	e009      	b.n	800a4f6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ea:	e004      	b.n	800a4f6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f96b 	bl	800a7ca <USBD_CtlError>
  }
}
 800a4f4:	bf00      	nop
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	885b      	ldrh	r3, [r3, #2]
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	4b41      	ldr	r3, [pc, #260]	@ (800a618 <USBD_SetConfig+0x118>)
 800a512:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a514:	4b40      	ldr	r3, [pc, #256]	@ (800a618 <USBD_SetConfig+0x118>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d904      	bls.n	800a526 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a51c:	6839      	ldr	r1, [r7, #0]
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f953 	bl	800a7ca <USBD_CtlError>
 800a524:	e075      	b.n	800a612 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d002      	beq.n	800a536 <USBD_SetConfig+0x36>
 800a530:	2b03      	cmp	r3, #3
 800a532:	d023      	beq.n	800a57c <USBD_SetConfig+0x7c>
 800a534:	e062      	b.n	800a5fc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a536:	4b38      	ldr	r3, [pc, #224]	@ (800a618 <USBD_SetConfig+0x118>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d01a      	beq.n	800a574 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a53e:	4b36      	ldr	r3, [pc, #216]	@ (800a618 <USBD_SetConfig+0x118>)
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2203      	movs	r2, #3
 800a54c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a550:	4b31      	ldr	r3, [pc, #196]	@ (800a618 <USBD_SetConfig+0x118>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7ff f9e4 	bl	8009924 <USBD_SetClassConfig>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d104      	bne.n	800a56c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f930 	bl	800a7ca <USBD_CtlError>
            return;
 800a56a:	e052      	b.n	800a612 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f9f5 	bl	800a95c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a572:	e04e      	b.n	800a612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f9f1 	bl	800a95c <USBD_CtlSendStatus>
        break;
 800a57a:	e04a      	b.n	800a612 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a57c:	4b26      	ldr	r3, [pc, #152]	@ (800a618 <USBD_SetConfig+0x118>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d112      	bne.n	800a5aa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2202      	movs	r2, #2
 800a588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a58c:	4b22      	ldr	r3, [pc, #136]	@ (800a618 <USBD_SetConfig+0x118>)
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	461a      	mov	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a596:	4b20      	ldr	r3, [pc, #128]	@ (800a618 <USBD_SetConfig+0x118>)
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7ff f9e0 	bl	8009962 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f9da 	bl	800a95c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5a8:	e033      	b.n	800a612 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a5aa:	4b1b      	ldr	r3, [pc, #108]	@ (800a618 <USBD_SetConfig+0x118>)
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d01d      	beq.n	800a5f4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff f9ce 	bl	8009962 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a5c6:	4b14      	ldr	r3, [pc, #80]	@ (800a618 <USBD_SetConfig+0x118>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a5d0:	4b11      	ldr	r3, [pc, #68]	@ (800a618 <USBD_SetConfig+0x118>)
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff f9a4 	bl	8009924 <USBD_SetClassConfig>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d104      	bne.n	800a5ec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f8f0 	bl	800a7ca <USBD_CtlError>
            return;
 800a5ea:	e012      	b.n	800a612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f9b5 	bl	800a95c <USBD_CtlSendStatus>
        break;
 800a5f2:	e00e      	b.n	800a612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f9b1 	bl	800a95c <USBD_CtlSendStatus>
        break;
 800a5fa:	e00a      	b.n	800a612 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f8e3 	bl	800a7ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a604:	4b04      	ldr	r3, [pc, #16]	@ (800a618 <USBD_SetConfig+0x118>)
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7ff f9a9 	bl	8009962 <USBD_ClrClassConfig>
        break;
 800a610:	bf00      	nop
    }
  }
}
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000438 	.word	0x20000438

0800a61c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	88db      	ldrh	r3, [r3, #6]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d004      	beq.n	800a638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f8ca 	bl	800a7ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a636:	e022      	b.n	800a67e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a63e:	2b02      	cmp	r3, #2
 800a640:	dc02      	bgt.n	800a648 <USBD_GetConfig+0x2c>
 800a642:	2b00      	cmp	r3, #0
 800a644:	dc03      	bgt.n	800a64e <USBD_GetConfig+0x32>
 800a646:	e015      	b.n	800a674 <USBD_GetConfig+0x58>
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d00b      	beq.n	800a664 <USBD_GetConfig+0x48>
 800a64c:	e012      	b.n	800a674 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	3308      	adds	r3, #8
 800a658:	2201      	movs	r2, #1
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f91f 	bl	800a8a0 <USBD_CtlSendData>
        break;
 800a662:	e00c      	b.n	800a67e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	3304      	adds	r3, #4
 800a668:	2201      	movs	r2, #1
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f917 	bl	800a8a0 <USBD_CtlSendData>
        break;
 800a672:	e004      	b.n	800a67e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f8a7 	bl	800a7ca <USBD_CtlError>
        break;
 800a67c:	bf00      	nop
}
 800a67e:	bf00      	nop
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b082      	sub	sp, #8
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a696:	3b01      	subs	r3, #1
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d81e      	bhi.n	800a6da <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	88db      	ldrh	r3, [r3, #6]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d004      	beq.n	800a6ae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f88f 	bl	800a7ca <USBD_CtlError>
        break;
 800a6ac:	e01a      	b.n	800a6e4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d005      	beq.n	800a6ca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f043 0202 	orr.w	r2, r3, #2
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	330c      	adds	r3, #12
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f8e4 	bl	800a8a0 <USBD_CtlSendData>
      break;
 800a6d8:	e004      	b.n	800a6e4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a6da:	6839      	ldr	r1, [r7, #0]
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f874 	bl	800a7ca <USBD_CtlError>
      break;
 800a6e2:	bf00      	nop
  }
}
 800a6e4:	bf00      	nop
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	885b      	ldrh	r3, [r3, #2]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d106      	bne.n	800a70c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f928 	bl	800a95c <USBD_CtlSendStatus>
  }
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a724:	3b01      	subs	r3, #1
 800a726:	2b02      	cmp	r3, #2
 800a728:	d80b      	bhi.n	800a742 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	885b      	ldrh	r3, [r3, #2]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d10c      	bne.n	800a74c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f90e 	bl	800a95c <USBD_CtlSendStatus>
      }
      break;
 800a740:	e004      	b.n	800a74c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f840 	bl	800a7ca <USBD_CtlError>
      break;
 800a74a:	e000      	b.n	800a74e <USBD_ClrFeature+0x3a>
      break;
 800a74c:	bf00      	nop
  }
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	781a      	ldrb	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	785a      	ldrb	r2, [r3, #1]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	3302      	adds	r3, #2
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	3303      	adds	r3, #3
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	021b      	lsls	r3, r3, #8
 800a780:	b29b      	uxth	r3, r3
 800a782:	4413      	add	r3, r2
 800a784:	b29a      	uxth	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	3304      	adds	r3, #4
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	461a      	mov	r2, r3
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	3305      	adds	r3, #5
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	021b      	lsls	r3, r3, #8
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	4413      	add	r3, r2
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	3306      	adds	r3, #6
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	3307      	adds	r3, #7
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	021b      	lsls	r3, r3, #8
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	4413      	add	r3, r2
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	80da      	strh	r2, [r3, #6]

}
 800a7be:	bf00      	nop
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a7d4:	2180      	movs	r1, #128	@ 0x80
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fc7c 	bl	800b0d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a7dc:	2100      	movs	r1, #0
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fc78 	bl	800b0d4 <USBD_LL_StallEP>
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d032      	beq.n	800a868 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 f834 	bl	800a870 <USBD_GetLen>
 800a808:	4603      	mov	r3, r0
 800a80a:	3301      	adds	r3, #1
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	b29a      	uxth	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a816:	7dfb      	ldrb	r3, [r7, #23]
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	75fa      	strb	r2, [r7, #23]
 800a81c:	461a      	mov	r2, r3
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	4413      	add	r3, r2
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	7812      	ldrb	r2, [r2, #0]
 800a826:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	75fa      	strb	r2, [r7, #23]
 800a82e:	461a      	mov	r2, r3
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	4413      	add	r3, r2
 800a834:	2203      	movs	r2, #3
 800a836:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a838:	e012      	b.n	800a860 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	60fa      	str	r2, [r7, #12]
 800a840:	7dfa      	ldrb	r2, [r7, #23]
 800a842:	1c51      	adds	r1, r2, #1
 800a844:	75f9      	strb	r1, [r7, #23]
 800a846:	4611      	mov	r1, r2
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	440a      	add	r2, r1
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a850:	7dfb      	ldrb	r3, [r7, #23]
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	75fa      	strb	r2, [r7, #23]
 800a856:	461a      	mov	r2, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4413      	add	r3, r2
 800a85c:	2200      	movs	r2, #0
 800a85e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e8      	bne.n	800a83a <USBD_GetString+0x4e>
    }
  }
}
 800a868:	bf00      	nop
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a878:	2300      	movs	r3, #0
 800a87a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a87c:	e005      	b.n	800a88a <USBD_GetLen+0x1a>
  {
    len++;
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
 800a880:	3301      	adds	r3, #1
 800a882:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3301      	adds	r3, #1
 800a888:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1f5      	bne.n	800a87e <USBD_GetLen+0xe>
  }

  return len;
 800a892:	7bfb      	ldrb	r3, [r7, #15]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2202      	movs	r2, #2
 800a8b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a8b6:	88fa      	ldrh	r2, [r7, #6]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a8bc:	88fa      	ldrh	r2, [r7, #6]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8c2:	88fb      	ldrh	r3, [r7, #6]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 fc8c 	bl	800b1e6 <USBD_LL_Transmit>

  return USBD_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8e6:	88fb      	ldrh	r3, [r7, #6]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 fc7a 	bl	800b1e6 <USBD_LL_Transmit>

  return USBD_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	4613      	mov	r3, r2
 800a908:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2203      	movs	r2, #3
 800a90e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a912:	88fa      	ldrh	r2, [r7, #6]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a91a:	88fa      	ldrh	r2, [r7, #6]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a922:	88fb      	ldrh	r3, [r7, #6]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	2100      	movs	r1, #0
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 fc7f 	bl	800b22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4613      	mov	r3, r2
 800a944:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a946:	88fb      	ldrh	r3, [r7, #6]
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	2100      	movs	r1, #0
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 fc6d 	bl	800b22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2204      	movs	r2, #4
 800a968:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a96c:	2300      	movs	r3, #0
 800a96e:	2200      	movs	r2, #0
 800a970:	2100      	movs	r1, #0
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fc37 	bl	800b1e6 <USBD_LL_Transmit>

  return USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2205      	movs	r2, #5
 800a98e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a992:	2300      	movs	r3, #0
 800a994:	2200      	movs	r2, #0
 800a996:	2100      	movs	r1, #0
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fc47 	bl	800b22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4912      	ldr	r1, [pc, #72]	@ (800a9f8 <MX_USB_DEVICE_Init+0x50>)
 800a9b0:	4812      	ldr	r0, [pc, #72]	@ (800a9fc <MX_USB_DEVICE_Init+0x54>)
 800a9b2:	f7fe ff5b 	bl	800986c <USBD_Init>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a9bc:	f7f6 fde8 	bl	8001590 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a9c0:	490f      	ldr	r1, [pc, #60]	@ (800aa00 <MX_USB_DEVICE_Init+0x58>)
 800a9c2:	480e      	ldr	r0, [pc, #56]	@ (800a9fc <MX_USB_DEVICE_Init+0x54>)
 800a9c4:	f7fe ff7d 	bl	80098c2 <USBD_RegisterClass>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9ce:	f7f6 fddf 	bl	8001590 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a9d2:	490c      	ldr	r1, [pc, #48]	@ (800aa04 <MX_USB_DEVICE_Init+0x5c>)
 800a9d4:	4809      	ldr	r0, [pc, #36]	@ (800a9fc <MX_USB_DEVICE_Init+0x54>)
 800a9d6:	f7fe feab 	bl	8009730 <USBD_CDC_RegisterInterface>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a9e0:	f7f6 fdd6 	bl	8001590 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a9e4:	4805      	ldr	r0, [pc, #20]	@ (800a9fc <MX_USB_DEVICE_Init+0x54>)
 800a9e6:	f7fe ff86 	bl	80098f6 <USBD_Start>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a9f0:	f7f6 fdce 	bl	8001590 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9f4:	bf00      	nop
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	2000012c 	.word	0x2000012c
 800a9fc:	2000043c 	.word	0x2000043c
 800aa00:	20000018 	.word	0x20000018
 800aa04:	2000011c 	.word	0x2000011c

0800aa08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4905      	ldr	r1, [pc, #20]	@ (800aa24 <CDC_Init_FS+0x1c>)
 800aa10:	4805      	ldr	r0, [pc, #20]	@ (800aa28 <CDC_Init_FS+0x20>)
 800aa12:	f7fe fea4 	bl	800975e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa16:	4905      	ldr	r1, [pc, #20]	@ (800aa2c <CDC_Init_FS+0x24>)
 800aa18:	4803      	ldr	r0, [pc, #12]	@ (800aa28 <CDC_Init_FS+0x20>)
 800aa1a:	f7fe feba 	bl	8009792 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	20000b00 	.word	0x20000b00
 800aa28:	2000043c 	.word	0x2000043c
 800aa2c:	20000700 	.word	0x20000700

0800aa30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa30:	b480      	push	{r7}
 800aa32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	4603      	mov	r3, r0
 800aa48:	6039      	str	r1, [r7, #0]
 800aa4a:	71fb      	strb	r3, [r7, #7]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa50:	79fb      	ldrb	r3, [r7, #7]
 800aa52:	2b23      	cmp	r3, #35	@ 0x23
 800aa54:	d84a      	bhi.n	800aaec <CDC_Control_FS+0xac>
 800aa56:	a201      	add	r2, pc, #4	@ (adr r2, 800aa5c <CDC_Control_FS+0x1c>)
 800aa58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5c:	0800aaed 	.word	0x0800aaed
 800aa60:	0800aaed 	.word	0x0800aaed
 800aa64:	0800aaed 	.word	0x0800aaed
 800aa68:	0800aaed 	.word	0x0800aaed
 800aa6c:	0800aaed 	.word	0x0800aaed
 800aa70:	0800aaed 	.word	0x0800aaed
 800aa74:	0800aaed 	.word	0x0800aaed
 800aa78:	0800aaed 	.word	0x0800aaed
 800aa7c:	0800aaed 	.word	0x0800aaed
 800aa80:	0800aaed 	.word	0x0800aaed
 800aa84:	0800aaed 	.word	0x0800aaed
 800aa88:	0800aaed 	.word	0x0800aaed
 800aa8c:	0800aaed 	.word	0x0800aaed
 800aa90:	0800aaed 	.word	0x0800aaed
 800aa94:	0800aaed 	.word	0x0800aaed
 800aa98:	0800aaed 	.word	0x0800aaed
 800aa9c:	0800aaed 	.word	0x0800aaed
 800aaa0:	0800aaed 	.word	0x0800aaed
 800aaa4:	0800aaed 	.word	0x0800aaed
 800aaa8:	0800aaed 	.word	0x0800aaed
 800aaac:	0800aaed 	.word	0x0800aaed
 800aab0:	0800aaed 	.word	0x0800aaed
 800aab4:	0800aaed 	.word	0x0800aaed
 800aab8:	0800aaed 	.word	0x0800aaed
 800aabc:	0800aaed 	.word	0x0800aaed
 800aac0:	0800aaed 	.word	0x0800aaed
 800aac4:	0800aaed 	.word	0x0800aaed
 800aac8:	0800aaed 	.word	0x0800aaed
 800aacc:	0800aaed 	.word	0x0800aaed
 800aad0:	0800aaed 	.word	0x0800aaed
 800aad4:	0800aaed 	.word	0x0800aaed
 800aad8:	0800aaed 	.word	0x0800aaed
 800aadc:	0800aaed 	.word	0x0800aaed
 800aae0:	0800aaed 	.word	0x0800aaed
 800aae4:	0800aaed 	.word	0x0800aaed
 800aae8:	0800aaed 	.word	0x0800aaed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aaec:	bf00      	nop
  }

  return (USBD_OK);
 800aaee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab06:	6879      	ldr	r1, [r7, #4]
 800ab08:	4805      	ldr	r0, [pc, #20]	@ (800ab20 <CDC_Receive_FS+0x24>)
 800ab0a:	f7fe fe42 	bl	8009792 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab0e:	4804      	ldr	r0, [pc, #16]	@ (800ab20 <CDC_Receive_FS+0x24>)
 800ab10:	f7fe fe82 	bl	8009818 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	2000043c 	.word	0x2000043c

0800ab24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab34:	4b0d      	ldr	r3, [pc, #52]	@ (800ab6c <CDC_Transmit_FS+0x48>)
 800ab36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e00b      	b.n	800ab62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab4a:	887b      	ldrh	r3, [r7, #2]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6879      	ldr	r1, [r7, #4]
 800ab50:	4806      	ldr	r0, [pc, #24]	@ (800ab6c <CDC_Transmit_FS+0x48>)
 800ab52:	f7fe fe04 	bl	800975e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab56:	4805      	ldr	r0, [pc, #20]	@ (800ab6c <CDC_Transmit_FS+0x48>)
 800ab58:	f7fe fe2f 	bl	80097ba <USBD_CDC_TransmitPacket>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	2000043c 	.word	0x2000043c

0800ab70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	6039      	str	r1, [r7, #0]
 800ab7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	2212      	movs	r2, #18
 800ab80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ab82:	4b03      	ldr	r3, [pc, #12]	@ (800ab90 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr
 800ab90:	20000148 	.word	0x20000148

0800ab94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	6039      	str	r1, [r7, #0]
 800ab9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2204      	movs	r2, #4
 800aba4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aba6:	4b03      	ldr	r3, [pc, #12]	@ (800abb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	2000015c 	.word	0x2000015c

0800abb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	4603      	mov	r3, r0
 800abc0:	6039      	str	r1, [r7, #0]
 800abc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abc4:	79fb      	ldrb	r3, [r7, #7]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d105      	bne.n	800abd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	4907      	ldr	r1, [pc, #28]	@ (800abec <USBD_FS_ProductStrDescriptor+0x34>)
 800abce:	4808      	ldr	r0, [pc, #32]	@ (800abf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800abd0:	f7ff fe0c 	bl	800a7ec <USBD_GetString>
 800abd4:	e004      	b.n	800abe0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	4904      	ldr	r1, [pc, #16]	@ (800abec <USBD_FS_ProductStrDescriptor+0x34>)
 800abda:	4805      	ldr	r0, [pc, #20]	@ (800abf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800abdc:	f7ff fe06 	bl	800a7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800abe0:	4b02      	ldr	r3, [pc, #8]	@ (800abec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	20000f00 	.word	0x20000f00
 800abf0:	0800e228 	.word	0x0800e228

0800abf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	6039      	str	r1, [r7, #0]
 800abfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	4904      	ldr	r1, [pc, #16]	@ (800ac14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ac04:	4804      	ldr	r0, [pc, #16]	@ (800ac18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ac06:	f7ff fdf1 	bl	800a7ec <USBD_GetString>
  return USBD_StrDesc;
 800ac0a:	4b02      	ldr	r3, [pc, #8]	@ (800ac14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000f00 	.word	0x20000f00
 800ac18:	0800e240 	.word	0x0800e240

0800ac1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	4603      	mov	r3, r0
 800ac24:	6039      	str	r1, [r7, #0]
 800ac26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	221a      	movs	r2, #26
 800ac2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac2e:	f000 f843 	bl	800acb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ac32:	4b02      	ldr	r3, [pc, #8]	@ (800ac3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20000160 	.word	0x20000160

0800ac40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	6039      	str	r1, [r7, #0]
 800ac4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac4c:	79fb      	ldrb	r3, [r7, #7]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d105      	bne.n	800ac5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	4907      	ldr	r1, [pc, #28]	@ (800ac74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac56:	4808      	ldr	r0, [pc, #32]	@ (800ac78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac58:	f7ff fdc8 	bl	800a7ec <USBD_GetString>
 800ac5c:	e004      	b.n	800ac68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	4904      	ldr	r1, [pc, #16]	@ (800ac74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac62:	4805      	ldr	r0, [pc, #20]	@ (800ac78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac64:	f7ff fdc2 	bl	800a7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac68:	4b02      	ldr	r3, [pc, #8]	@ (800ac74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	20000f00 	.word	0x20000f00
 800ac78:	0800e254 	.word	0x0800e254

0800ac7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	4603      	mov	r3, r0
 800ac84:	6039      	str	r1, [r7, #0]
 800ac86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac88:	79fb      	ldrb	r3, [r7, #7]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d105      	bne.n	800ac9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	4907      	ldr	r1, [pc, #28]	@ (800acb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac92:	4808      	ldr	r0, [pc, #32]	@ (800acb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac94:	f7ff fdaa 	bl	800a7ec <USBD_GetString>
 800ac98:	e004      	b.n	800aca4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	4904      	ldr	r1, [pc, #16]	@ (800acb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac9e:	4805      	ldr	r0, [pc, #20]	@ (800acb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aca0:	f7ff fda4 	bl	800a7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800aca4:	4b02      	ldr	r3, [pc, #8]	@ (800acb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	20000f00 	.word	0x20000f00
 800acb4:	0800e260 	.word	0x0800e260

0800acb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800acbe:	4b0f      	ldr	r3, [pc, #60]	@ (800acfc <Get_SerialNum+0x44>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800acc4:	4b0e      	ldr	r3, [pc, #56]	@ (800ad00 <Get_SerialNum+0x48>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800acca:	4b0e      	ldr	r3, [pc, #56]	@ (800ad04 <Get_SerialNum+0x4c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4413      	add	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d009      	beq.n	800acf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acde:	2208      	movs	r2, #8
 800ace0:	4909      	ldr	r1, [pc, #36]	@ (800ad08 <Get_SerialNum+0x50>)
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f000 f814 	bl	800ad10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ace8:	2204      	movs	r2, #4
 800acea:	4908      	ldr	r1, [pc, #32]	@ (800ad0c <Get_SerialNum+0x54>)
 800acec:	68b8      	ldr	r0, [r7, #8]
 800acee:	f000 f80f 	bl	800ad10 <IntToUnicode>
  }
}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	1ffff7ac 	.word	0x1ffff7ac
 800ad00:	1ffff7b0 	.word	0x1ffff7b0
 800ad04:	1ffff7b4 	.word	0x1ffff7b4
 800ad08:	20000162 	.word	0x20000162
 800ad0c:	20000172 	.word	0x20000172

0800ad10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad22:	2300      	movs	r3, #0
 800ad24:	75fb      	strb	r3, [r7, #23]
 800ad26:	e027      	b.n	800ad78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	0f1b      	lsrs	r3, r3, #28
 800ad2c:	2b09      	cmp	r3, #9
 800ad2e:	d80b      	bhi.n	800ad48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	0f1b      	lsrs	r3, r3, #28
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	440b      	add	r3, r1
 800ad40:	3230      	adds	r2, #48	@ 0x30
 800ad42:	b2d2      	uxtb	r2, r2
 800ad44:	701a      	strb	r2, [r3, #0]
 800ad46:	e00a      	b.n	800ad5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	0f1b      	lsrs	r3, r3, #28
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	4619      	mov	r1, r3
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	440b      	add	r3, r1
 800ad58:	3237      	adds	r2, #55	@ 0x37
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	011b      	lsls	r3, r3, #4
 800ad62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	3301      	adds	r3, #1
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	2200      	movs	r2, #0
 800ad70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	3301      	adds	r3, #1
 800ad76:	75fb      	strb	r3, [r7, #23]
 800ad78:	7dfa      	ldrb	r2, [r7, #23]
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d3d3      	bcc.n	800ad28 <IntToUnicode+0x18>
  }
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	371c      	adds	r7, #28
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
	...

0800ad90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08a      	sub	sp, #40	@ 0x28
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad98:	f107 0314 	add.w	r3, r7, #20
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	605a      	str	r2, [r3, #4]
 800ada2:	609a      	str	r2, [r3, #8]
 800ada4:	60da      	str	r2, [r3, #12]
 800ada6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a1c      	ldr	r2, [pc, #112]	@ (800ae20 <HAL_PCD_MspInit+0x90>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d131      	bne.n	800ae16 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adb2:	4b1c      	ldr	r3, [pc, #112]	@ (800ae24 <HAL_PCD_MspInit+0x94>)
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	4a1b      	ldr	r2, [pc, #108]	@ (800ae24 <HAL_PCD_MspInit+0x94>)
 800adb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adbc:	6153      	str	r3, [r2, #20]
 800adbe:	4b19      	ldr	r3, [pc, #100]	@ (800ae24 <HAL_PCD_MspInit+0x94>)
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adc6:	613b      	str	r3, [r7, #16]
 800adc8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800adca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800adce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800add0:	2302      	movs	r3, #2
 800add2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800add4:	2300      	movs	r3, #0
 800add6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800add8:	2303      	movs	r3, #3
 800adda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800addc:	230e      	movs	r3, #14
 800adde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ade0:	f107 0314 	add.w	r3, r7, #20
 800ade4:	4619      	mov	r1, r3
 800ade6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800adea:	f7f6 ff67 	bl	8001cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800adee:	4b0d      	ldr	r3, [pc, #52]	@ (800ae24 <HAL_PCD_MspInit+0x94>)
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	4a0c      	ldr	r2, [pc, #48]	@ (800ae24 <HAL_PCD_MspInit+0x94>)
 800adf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800adf8:	61d3      	str	r3, [r2, #28]
 800adfa:	4b0a      	ldr	r3, [pc, #40]	@ (800ae24 <HAL_PCD_MspInit+0x94>)
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae02:	60fb      	str	r3, [r7, #12]
 800ae04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800ae06:	2200      	movs	r2, #0
 800ae08:	2100      	movs	r1, #0
 800ae0a:	2014      	movs	r0, #20
 800ae0c:	f7f6 ff1f 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800ae10:	2014      	movs	r0, #20
 800ae12:	f7f6 ff38 	bl	8001c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae16:	bf00      	nop
 800ae18:	3728      	adds	r7, #40	@ 0x28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	40005c00 	.word	0x40005c00
 800ae24:	40021000 	.word	0x40021000

0800ae28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	4610      	mov	r0, r2
 800ae40:	f7fe fda2 	bl	8009988 <USBD_LL_SetupStage>
}
 800ae44:	bf00      	nop
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800ae5e:	78fa      	ldrb	r2, [r7, #3]
 800ae60:	6879      	ldr	r1, [r7, #4]
 800ae62:	4613      	mov	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4413      	add	r3, r2
 800ae68:	00db      	lsls	r3, r3, #3
 800ae6a:	440b      	add	r3, r1
 800ae6c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	78fb      	ldrb	r3, [r7, #3]
 800ae74:	4619      	mov	r1, r3
 800ae76:	f7fe fdd4 	bl	8009a22 <USBD_LL_DataOutStage>
}
 800ae7a:	bf00      	nop
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b082      	sub	sp, #8
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800ae94:	78fa      	ldrb	r2, [r7, #3]
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	00db      	lsls	r3, r3, #3
 800aea0:	440b      	add	r3, r1
 800aea2:	3324      	adds	r3, #36	@ 0x24
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	78fb      	ldrb	r3, [r7, #3]
 800aea8:	4619      	mov	r1, r3
 800aeaa:	f7fe fe2b 	bl	8009b04 <USBD_LL_DataInStage>
}
 800aeae:	bf00      	nop
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fe ff3e 	bl	8009d46 <USBD_LL_SOF>
}
 800aeca:	bf00      	nop
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b084      	sub	sp, #16
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aeda:	2301      	movs	r3, #1
 800aedc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	795b      	ldrb	r3, [r3, #5]
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d001      	beq.n	800aeea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aee6:	f7f6 fb53 	bl	8001590 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800aef0:	7bfa      	ldrb	r2, [r7, #15]
 800aef2:	4611      	mov	r1, r2
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fe feeb 	bl	8009cd0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe fea4 	bl	8009c4e <USBD_LL_Reset>
}
 800af06:	bf00      	nop
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
	...

0800af10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fe fee6 	bl	8009cf0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	7a5b      	ldrb	r3, [r3, #9]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d005      	beq.n	800af38 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af2c:	4b04      	ldr	r3, [pc, #16]	@ (800af40 <HAL_PCD_SuspendCallback+0x30>)
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	4a03      	ldr	r2, [pc, #12]	@ (800af40 <HAL_PCD_SuspendCallback+0x30>)
 800af32:	f043 0306 	orr.w	r3, r3, #6
 800af36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af38:	bf00      	nop
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	e000ed00 	.word	0xe000ed00

0800af44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800af52:	4618      	mov	r0, r3
 800af54:	f7fe fee1 	bl	8009d1a <USBD_LL_Resume>
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800af68:	4a28      	ldr	r2, [pc, #160]	@ (800b00c <USBD_LL_Init+0xac>)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a26      	ldr	r2, [pc, #152]	@ (800b00c <USBD_LL_Init+0xac>)
 800af74:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800af78:	4b24      	ldr	r3, [pc, #144]	@ (800b00c <USBD_LL_Init+0xac>)
 800af7a:	4a25      	ldr	r2, [pc, #148]	@ (800b010 <USBD_LL_Init+0xb0>)
 800af7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800af7e:	4b23      	ldr	r3, [pc, #140]	@ (800b00c <USBD_LL_Init+0xac>)
 800af80:	2208      	movs	r2, #8
 800af82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af84:	4b21      	ldr	r3, [pc, #132]	@ (800b00c <USBD_LL_Init+0xac>)
 800af86:	2202      	movs	r2, #2
 800af88:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af8a:	4b20      	ldr	r3, [pc, #128]	@ (800b00c <USBD_LL_Init+0xac>)
 800af8c:	2202      	movs	r2, #2
 800af8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af90:	4b1e      	ldr	r3, [pc, #120]	@ (800b00c <USBD_LL_Init+0xac>)
 800af92:	2200      	movs	r2, #0
 800af94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800af96:	4b1d      	ldr	r3, [pc, #116]	@ (800b00c <USBD_LL_Init+0xac>)
 800af98:	2200      	movs	r2, #0
 800af9a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800af9c:	481b      	ldr	r0, [pc, #108]	@ (800b00c <USBD_LL_Init+0xac>)
 800af9e:	f7f7 fe5a 	bl	8002c56 <HAL_PCD_Init>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800afa8:	f7f6 faf2 	bl	8001590 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800afb2:	2318      	movs	r3, #24
 800afb4:	2200      	movs	r2, #0
 800afb6:	2100      	movs	r1, #0
 800afb8:	f7f9 fad3 	bl	8004562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800afc2:	2358      	movs	r3, #88	@ 0x58
 800afc4:	2200      	movs	r2, #0
 800afc6:	2180      	movs	r1, #128	@ 0x80
 800afc8:	f7f9 facb 	bl	8004562 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800afd2:	23c0      	movs	r3, #192	@ 0xc0
 800afd4:	2200      	movs	r2, #0
 800afd6:	2181      	movs	r1, #129	@ 0x81
 800afd8:	f7f9 fac3 	bl	8004562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800afe2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800afe6:	2200      	movs	r2, #0
 800afe8:	2101      	movs	r1, #1
 800afea:	f7f9 faba 	bl	8004562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aff4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aff8:	2200      	movs	r2, #0
 800affa:	2182      	movs	r1, #130	@ 0x82
 800affc:	f7f9 fab1 	bl	8004562 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20001100 	.word	0x20001100
 800b010:	40005c00 	.word	0x40005c00

0800b014 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7f7 feda 	bl	8002de4 <HAL_PCD_Start>
 800b030:	4603      	mov	r3, r0
 800b032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	4618      	mov	r0, r3
 800b038:	f000 f952 	bl	800b2e0 <USBD_Get_USB_Status>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b040:	7bbb      	ldrb	r3, [r7, #14]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b084      	sub	sp, #16
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	4608      	mov	r0, r1
 800b054:	4611      	mov	r1, r2
 800b056:	461a      	mov	r2, r3
 800b058:	4603      	mov	r3, r0
 800b05a:	70fb      	strb	r3, [r7, #3]
 800b05c:	460b      	mov	r3, r1
 800b05e:	70bb      	strb	r3, [r7, #2]
 800b060:	4613      	mov	r3, r2
 800b062:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b072:	78bb      	ldrb	r3, [r7, #2]
 800b074:	883a      	ldrh	r2, [r7, #0]
 800b076:	78f9      	ldrb	r1, [r7, #3]
 800b078:	f7f7 ffd2 	bl	8003020 <HAL_PCD_EP_Open>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	4618      	mov	r0, r3
 800b084:	f000 f92c 	bl	800b2e0 <USBD_Get_USB_Status>
 800b088:	4603      	mov	r3, r0
 800b08a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b08c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	460b      	mov	r3, r1
 800b0a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0b0:	78fa      	ldrb	r2, [r7, #3]
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7f8 f810 	bl	80030da <HAL_PCD_EP_Close>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 f90d 	bl	800b2e0 <USBD_Get_USB_Status>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0ee:	78fa      	ldrb	r2, [r7, #3]
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7f8 f8b9 	bl	800326a <HAL_PCD_EP_SetStall>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 f8ee 	bl	800b2e0 <USBD_Get_USB_Status>
 800b104:	4603      	mov	r3, r0
 800b106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b108:	7bbb      	ldrb	r3, [r7, #14]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	460b      	mov	r3, r1
 800b11c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b12c:	78fa      	ldrb	r2, [r7, #3]
 800b12e:	4611      	mov	r1, r2
 800b130:	4618      	mov	r0, r3
 800b132:	f7f8 f8ec 	bl	800330e <HAL_PCD_EP_ClrStall>
 800b136:	4603      	mov	r3, r0
 800b138:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 f8cf 	bl	800b2e0 <USBD_Get_USB_Status>
 800b142:	4603      	mov	r3, r0
 800b144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b146:	7bbb      	ldrb	r3, [r7, #14]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b162:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	da0b      	bge.n	800b184 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b16c:	78fb      	ldrb	r3, [r7, #3]
 800b16e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b172:	68f9      	ldr	r1, [r7, #12]
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	00db      	lsls	r3, r3, #3
 800b17c:	440b      	add	r3, r1
 800b17e:	3312      	adds	r3, #18
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	e00b      	b.n	800b19c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b184:	78fb      	ldrb	r3, [r7, #3]
 800b186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b18a:	68f9      	ldr	r1, [r7, #12]
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	440b      	add	r3, r1
 800b196:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b19a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1c2:	78fa      	ldrb	r2, [r7, #3]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7f7 ff06 	bl	8002fd8 <HAL_PCD_SetAddress>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f000 f884 	bl	800b2e0 <USBD_Get_USB_Status>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b086      	sub	sp, #24
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	60f8      	str	r0, [r7, #12]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	72fb      	strb	r3, [r7, #11]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b208:	893b      	ldrh	r3, [r7, #8]
 800b20a:	7af9      	ldrb	r1, [r7, #11]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	f7f7 fff5 	bl	80031fc <HAL_PCD_EP_Transmit>
 800b212:	4603      	mov	r3, r0
 800b214:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b216:	7dfb      	ldrb	r3, [r7, #23]
 800b218:	4618      	mov	r0, r3
 800b21a:	f000 f861 	bl	800b2e0 <USBD_Get_USB_Status>
 800b21e:	4603      	mov	r3, r0
 800b220:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b222:	7dbb      	ldrb	r3, [r7, #22]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3718      	adds	r7, #24
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	607a      	str	r2, [r7, #4]
 800b236:	461a      	mov	r2, r3
 800b238:	460b      	mov	r3, r1
 800b23a:	72fb      	strb	r3, [r7, #11]
 800b23c:	4613      	mov	r3, r2
 800b23e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b24e:	893b      	ldrh	r3, [r7, #8]
 800b250:	7af9      	ldrb	r1, [r7, #11]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	f7f7 ff89 	bl	800316a <HAL_PCD_EP_Receive>
 800b258:	4603      	mov	r3, r0
 800b25a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 f83e 	bl	800b2e0 <USBD_Get_USB_Status>
 800b264:	4603      	mov	r3, r0
 800b266:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b268:	7dbb      	ldrb	r3, [r7, #22]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b082      	sub	sp, #8
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	460b      	mov	r3, r1
 800b27c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b284:	78fa      	ldrb	r2, [r7, #3]
 800b286:	4611      	mov	r1, r2
 800b288:	4618      	mov	r0, r3
 800b28a:	f7f7 ff9f 	bl	80031cc <HAL_PCD_EP_GetRxCount>
 800b28e:	4603      	mov	r3, r0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b2a0:	4b03      	ldr	r3, [pc, #12]	@ (800b2b0 <USBD_static_malloc+0x18>)
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	200013d4 	.word	0x200013d4

0800b2b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]

}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2ee:	79fb      	ldrb	r3, [r7, #7]
 800b2f0:	2b03      	cmp	r3, #3
 800b2f2:	d817      	bhi.n	800b324 <USBD_Get_USB_Status+0x44>
 800b2f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2fc <USBD_Get_USB_Status+0x1c>)
 800b2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fa:	bf00      	nop
 800b2fc:	0800b30d 	.word	0x0800b30d
 800b300:	0800b313 	.word	0x0800b313
 800b304:	0800b319 	.word	0x0800b319
 800b308:	0800b31f 	.word	0x0800b31f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	73fb      	strb	r3, [r7, #15]
    break;
 800b310:	e00b      	b.n	800b32a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b312:	2302      	movs	r3, #2
 800b314:	73fb      	strb	r3, [r7, #15]
    break;
 800b316:	e008      	b.n	800b32a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b318:	2301      	movs	r3, #1
 800b31a:	73fb      	strb	r3, [r7, #15]
    break;
 800b31c:	e005      	b.n	800b32a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b31e:	2302      	movs	r3, #2
 800b320:	73fb      	strb	r3, [r7, #15]
    break;
 800b322:	e002      	b.n	800b32a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b324:	2302      	movs	r3, #2
 800b326:	73fb      	strb	r3, [r7, #15]
    break;
 800b328:	bf00      	nop
  }
  return usb_status;
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3714      	adds	r7, #20
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <__cvt>:
 800b338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b33c:	ec57 6b10 	vmov	r6, r7, d0
 800b340:	2f00      	cmp	r7, #0
 800b342:	460c      	mov	r4, r1
 800b344:	4619      	mov	r1, r3
 800b346:	463b      	mov	r3, r7
 800b348:	bfbb      	ittet	lt
 800b34a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b34e:	461f      	movlt	r7, r3
 800b350:	2300      	movge	r3, #0
 800b352:	232d      	movlt	r3, #45	@ 0x2d
 800b354:	700b      	strb	r3, [r1, #0]
 800b356:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b358:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b35c:	4691      	mov	r9, r2
 800b35e:	f023 0820 	bic.w	r8, r3, #32
 800b362:	bfbc      	itt	lt
 800b364:	4632      	movlt	r2, r6
 800b366:	4616      	movlt	r6, r2
 800b368:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b36c:	d005      	beq.n	800b37a <__cvt+0x42>
 800b36e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b372:	d100      	bne.n	800b376 <__cvt+0x3e>
 800b374:	3401      	adds	r4, #1
 800b376:	2102      	movs	r1, #2
 800b378:	e000      	b.n	800b37c <__cvt+0x44>
 800b37a:	2103      	movs	r1, #3
 800b37c:	ab03      	add	r3, sp, #12
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	ab02      	add	r3, sp, #8
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	ec47 6b10 	vmov	d0, r6, r7
 800b388:	4653      	mov	r3, sl
 800b38a:	4622      	mov	r2, r4
 800b38c:	f000 fe70 	bl	800c070 <_dtoa_r>
 800b390:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b394:	4605      	mov	r5, r0
 800b396:	d119      	bne.n	800b3cc <__cvt+0x94>
 800b398:	f019 0f01 	tst.w	r9, #1
 800b39c:	d00e      	beq.n	800b3bc <__cvt+0x84>
 800b39e:	eb00 0904 	add.w	r9, r0, r4
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	f7f5 fb8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3ae:	b108      	cbz	r0, 800b3b4 <__cvt+0x7c>
 800b3b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3b4:	2230      	movs	r2, #48	@ 0x30
 800b3b6:	9b03      	ldr	r3, [sp, #12]
 800b3b8:	454b      	cmp	r3, r9
 800b3ba:	d31e      	bcc.n	800b3fa <__cvt+0xc2>
 800b3bc:	9b03      	ldr	r3, [sp, #12]
 800b3be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3c0:	1b5b      	subs	r3, r3, r5
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	b004      	add	sp, #16
 800b3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b3d0:	eb00 0904 	add.w	r9, r0, r4
 800b3d4:	d1e5      	bne.n	800b3a2 <__cvt+0x6a>
 800b3d6:	7803      	ldrb	r3, [r0, #0]
 800b3d8:	2b30      	cmp	r3, #48	@ 0x30
 800b3da:	d10a      	bne.n	800b3f2 <__cvt+0xba>
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2300      	movs	r3, #0
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	4639      	mov	r1, r7
 800b3e4:	f7f5 fb70 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3e8:	b918      	cbnz	r0, 800b3f2 <__cvt+0xba>
 800b3ea:	f1c4 0401 	rsb	r4, r4, #1
 800b3ee:	f8ca 4000 	str.w	r4, [sl]
 800b3f2:	f8da 3000 	ldr.w	r3, [sl]
 800b3f6:	4499      	add	r9, r3
 800b3f8:	e7d3      	b.n	800b3a2 <__cvt+0x6a>
 800b3fa:	1c59      	adds	r1, r3, #1
 800b3fc:	9103      	str	r1, [sp, #12]
 800b3fe:	701a      	strb	r2, [r3, #0]
 800b400:	e7d9      	b.n	800b3b6 <__cvt+0x7e>

0800b402 <__exponent>:
 800b402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b404:	2900      	cmp	r1, #0
 800b406:	bfba      	itte	lt
 800b408:	4249      	neglt	r1, r1
 800b40a:	232d      	movlt	r3, #45	@ 0x2d
 800b40c:	232b      	movge	r3, #43	@ 0x2b
 800b40e:	2909      	cmp	r1, #9
 800b410:	7002      	strb	r2, [r0, #0]
 800b412:	7043      	strb	r3, [r0, #1]
 800b414:	dd29      	ble.n	800b46a <__exponent+0x68>
 800b416:	f10d 0307 	add.w	r3, sp, #7
 800b41a:	461d      	mov	r5, r3
 800b41c:	270a      	movs	r7, #10
 800b41e:	461a      	mov	r2, r3
 800b420:	fbb1 f6f7 	udiv	r6, r1, r7
 800b424:	fb07 1416 	mls	r4, r7, r6, r1
 800b428:	3430      	adds	r4, #48	@ 0x30
 800b42a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b42e:	460c      	mov	r4, r1
 800b430:	2c63      	cmp	r4, #99	@ 0x63
 800b432:	f103 33ff 	add.w	r3, r3, #4294967295
 800b436:	4631      	mov	r1, r6
 800b438:	dcf1      	bgt.n	800b41e <__exponent+0x1c>
 800b43a:	3130      	adds	r1, #48	@ 0x30
 800b43c:	1e94      	subs	r4, r2, #2
 800b43e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b442:	1c41      	adds	r1, r0, #1
 800b444:	4623      	mov	r3, r4
 800b446:	42ab      	cmp	r3, r5
 800b448:	d30a      	bcc.n	800b460 <__exponent+0x5e>
 800b44a:	f10d 0309 	add.w	r3, sp, #9
 800b44e:	1a9b      	subs	r3, r3, r2
 800b450:	42ac      	cmp	r4, r5
 800b452:	bf88      	it	hi
 800b454:	2300      	movhi	r3, #0
 800b456:	3302      	adds	r3, #2
 800b458:	4403      	add	r3, r0
 800b45a:	1a18      	subs	r0, r3, r0
 800b45c:	b003      	add	sp, #12
 800b45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b460:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b464:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b468:	e7ed      	b.n	800b446 <__exponent+0x44>
 800b46a:	2330      	movs	r3, #48	@ 0x30
 800b46c:	3130      	adds	r1, #48	@ 0x30
 800b46e:	7083      	strb	r3, [r0, #2]
 800b470:	70c1      	strb	r1, [r0, #3]
 800b472:	1d03      	adds	r3, r0, #4
 800b474:	e7f1      	b.n	800b45a <__exponent+0x58>
	...

0800b478 <_printf_float>:
 800b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47c:	b08d      	sub	sp, #52	@ 0x34
 800b47e:	460c      	mov	r4, r1
 800b480:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b484:	4616      	mov	r6, r2
 800b486:	461f      	mov	r7, r3
 800b488:	4605      	mov	r5, r0
 800b48a:	f000 fcef 	bl	800be6c <_localeconv_r>
 800b48e:	6803      	ldr	r3, [r0, #0]
 800b490:	9304      	str	r3, [sp, #16]
 800b492:	4618      	mov	r0, r3
 800b494:	f7f4 feec 	bl	8000270 <strlen>
 800b498:	2300      	movs	r3, #0
 800b49a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b49c:	f8d8 3000 	ldr.w	r3, [r8]
 800b4a0:	9005      	str	r0, [sp, #20]
 800b4a2:	3307      	adds	r3, #7
 800b4a4:	f023 0307 	bic.w	r3, r3, #7
 800b4a8:	f103 0208 	add.w	r2, r3, #8
 800b4ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b4b0:	f8d4 b000 	ldr.w	fp, [r4]
 800b4b4:	f8c8 2000 	str.w	r2, [r8]
 800b4b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b4c0:	9307      	str	r3, [sp, #28]
 800b4c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b4ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4ce:	4b9c      	ldr	r3, [pc, #624]	@ (800b740 <_printf_float+0x2c8>)
 800b4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d4:	f7f5 fb2a 	bl	8000b2c <__aeabi_dcmpun>
 800b4d8:	bb70      	cbnz	r0, 800b538 <_printf_float+0xc0>
 800b4da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4de:	4b98      	ldr	r3, [pc, #608]	@ (800b740 <_printf_float+0x2c8>)
 800b4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e4:	f7f5 fb04 	bl	8000af0 <__aeabi_dcmple>
 800b4e8:	bb30      	cbnz	r0, 800b538 <_printf_float+0xc0>
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	4640      	mov	r0, r8
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	f7f5 faf3 	bl	8000adc <__aeabi_dcmplt>
 800b4f6:	b110      	cbz	r0, 800b4fe <_printf_float+0x86>
 800b4f8:	232d      	movs	r3, #45	@ 0x2d
 800b4fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4fe:	4a91      	ldr	r2, [pc, #580]	@ (800b744 <_printf_float+0x2cc>)
 800b500:	4b91      	ldr	r3, [pc, #580]	@ (800b748 <_printf_float+0x2d0>)
 800b502:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b506:	bf94      	ite	ls
 800b508:	4690      	movls	r8, r2
 800b50a:	4698      	movhi	r8, r3
 800b50c:	2303      	movs	r3, #3
 800b50e:	6123      	str	r3, [r4, #16]
 800b510:	f02b 0304 	bic.w	r3, fp, #4
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	f04f 0900 	mov.w	r9, #0
 800b51a:	9700      	str	r7, [sp, #0]
 800b51c:	4633      	mov	r3, r6
 800b51e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b520:	4621      	mov	r1, r4
 800b522:	4628      	mov	r0, r5
 800b524:	f000 f9d2 	bl	800b8cc <_printf_common>
 800b528:	3001      	adds	r0, #1
 800b52a:	f040 808d 	bne.w	800b648 <_printf_float+0x1d0>
 800b52e:	f04f 30ff 	mov.w	r0, #4294967295
 800b532:	b00d      	add	sp, #52	@ 0x34
 800b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b538:	4642      	mov	r2, r8
 800b53a:	464b      	mov	r3, r9
 800b53c:	4640      	mov	r0, r8
 800b53e:	4649      	mov	r1, r9
 800b540:	f7f5 faf4 	bl	8000b2c <__aeabi_dcmpun>
 800b544:	b140      	cbz	r0, 800b558 <_printf_float+0xe0>
 800b546:	464b      	mov	r3, r9
 800b548:	2b00      	cmp	r3, #0
 800b54a:	bfbc      	itt	lt
 800b54c:	232d      	movlt	r3, #45	@ 0x2d
 800b54e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b552:	4a7e      	ldr	r2, [pc, #504]	@ (800b74c <_printf_float+0x2d4>)
 800b554:	4b7e      	ldr	r3, [pc, #504]	@ (800b750 <_printf_float+0x2d8>)
 800b556:	e7d4      	b.n	800b502 <_printf_float+0x8a>
 800b558:	6863      	ldr	r3, [r4, #4]
 800b55a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b55e:	9206      	str	r2, [sp, #24]
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	d13b      	bne.n	800b5dc <_printf_float+0x164>
 800b564:	2306      	movs	r3, #6
 800b566:	6063      	str	r3, [r4, #4]
 800b568:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b56c:	2300      	movs	r3, #0
 800b56e:	6022      	str	r2, [r4, #0]
 800b570:	9303      	str	r3, [sp, #12]
 800b572:	ab0a      	add	r3, sp, #40	@ 0x28
 800b574:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b578:	ab09      	add	r3, sp, #36	@ 0x24
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	6861      	ldr	r1, [r4, #4]
 800b57e:	ec49 8b10 	vmov	d0, r8, r9
 800b582:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b586:	4628      	mov	r0, r5
 800b588:	f7ff fed6 	bl	800b338 <__cvt>
 800b58c:	9b06      	ldr	r3, [sp, #24]
 800b58e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b590:	2b47      	cmp	r3, #71	@ 0x47
 800b592:	4680      	mov	r8, r0
 800b594:	d129      	bne.n	800b5ea <_printf_float+0x172>
 800b596:	1cc8      	adds	r0, r1, #3
 800b598:	db02      	blt.n	800b5a0 <_printf_float+0x128>
 800b59a:	6863      	ldr	r3, [r4, #4]
 800b59c:	4299      	cmp	r1, r3
 800b59e:	dd41      	ble.n	800b624 <_printf_float+0x1ac>
 800b5a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b5a4:	fa5f fa8a 	uxtb.w	sl, sl
 800b5a8:	3901      	subs	r1, #1
 800b5aa:	4652      	mov	r2, sl
 800b5ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b5b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b5b2:	f7ff ff26 	bl	800b402 <__exponent>
 800b5b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5b8:	1813      	adds	r3, r2, r0
 800b5ba:	2a01      	cmp	r2, #1
 800b5bc:	4681      	mov	r9, r0
 800b5be:	6123      	str	r3, [r4, #16]
 800b5c0:	dc02      	bgt.n	800b5c8 <_printf_float+0x150>
 800b5c2:	6822      	ldr	r2, [r4, #0]
 800b5c4:	07d2      	lsls	r2, r2, #31
 800b5c6:	d501      	bpl.n	800b5cc <_printf_float+0x154>
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	6123      	str	r3, [r4, #16]
 800b5cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d0a2      	beq.n	800b51a <_printf_float+0xa2>
 800b5d4:	232d      	movs	r3, #45	@ 0x2d
 800b5d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5da:	e79e      	b.n	800b51a <_printf_float+0xa2>
 800b5dc:	9a06      	ldr	r2, [sp, #24]
 800b5de:	2a47      	cmp	r2, #71	@ 0x47
 800b5e0:	d1c2      	bne.n	800b568 <_printf_float+0xf0>
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1c0      	bne.n	800b568 <_printf_float+0xf0>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e7bd      	b.n	800b566 <_printf_float+0xee>
 800b5ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b5ee:	d9db      	bls.n	800b5a8 <_printf_float+0x130>
 800b5f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b5f4:	d118      	bne.n	800b628 <_printf_float+0x1b0>
 800b5f6:	2900      	cmp	r1, #0
 800b5f8:	6863      	ldr	r3, [r4, #4]
 800b5fa:	dd0b      	ble.n	800b614 <_printf_float+0x19c>
 800b5fc:	6121      	str	r1, [r4, #16]
 800b5fe:	b913      	cbnz	r3, 800b606 <_printf_float+0x18e>
 800b600:	6822      	ldr	r2, [r4, #0]
 800b602:	07d0      	lsls	r0, r2, #31
 800b604:	d502      	bpl.n	800b60c <_printf_float+0x194>
 800b606:	3301      	adds	r3, #1
 800b608:	440b      	add	r3, r1
 800b60a:	6123      	str	r3, [r4, #16]
 800b60c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b60e:	f04f 0900 	mov.w	r9, #0
 800b612:	e7db      	b.n	800b5cc <_printf_float+0x154>
 800b614:	b913      	cbnz	r3, 800b61c <_printf_float+0x1a4>
 800b616:	6822      	ldr	r2, [r4, #0]
 800b618:	07d2      	lsls	r2, r2, #31
 800b61a:	d501      	bpl.n	800b620 <_printf_float+0x1a8>
 800b61c:	3302      	adds	r3, #2
 800b61e:	e7f4      	b.n	800b60a <_printf_float+0x192>
 800b620:	2301      	movs	r3, #1
 800b622:	e7f2      	b.n	800b60a <_printf_float+0x192>
 800b624:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b62a:	4299      	cmp	r1, r3
 800b62c:	db05      	blt.n	800b63a <_printf_float+0x1c2>
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	6121      	str	r1, [r4, #16]
 800b632:	07d8      	lsls	r0, r3, #31
 800b634:	d5ea      	bpl.n	800b60c <_printf_float+0x194>
 800b636:	1c4b      	adds	r3, r1, #1
 800b638:	e7e7      	b.n	800b60a <_printf_float+0x192>
 800b63a:	2900      	cmp	r1, #0
 800b63c:	bfd4      	ite	le
 800b63e:	f1c1 0202 	rsble	r2, r1, #2
 800b642:	2201      	movgt	r2, #1
 800b644:	4413      	add	r3, r2
 800b646:	e7e0      	b.n	800b60a <_printf_float+0x192>
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	055a      	lsls	r2, r3, #21
 800b64c:	d407      	bmi.n	800b65e <_printf_float+0x1e6>
 800b64e:	6923      	ldr	r3, [r4, #16]
 800b650:	4642      	mov	r2, r8
 800b652:	4631      	mov	r1, r6
 800b654:	4628      	mov	r0, r5
 800b656:	47b8      	blx	r7
 800b658:	3001      	adds	r0, #1
 800b65a:	d12b      	bne.n	800b6b4 <_printf_float+0x23c>
 800b65c:	e767      	b.n	800b52e <_printf_float+0xb6>
 800b65e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b662:	f240 80dd 	bls.w	800b820 <_printf_float+0x3a8>
 800b666:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b66a:	2200      	movs	r2, #0
 800b66c:	2300      	movs	r3, #0
 800b66e:	f7f5 fa2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b672:	2800      	cmp	r0, #0
 800b674:	d033      	beq.n	800b6de <_printf_float+0x266>
 800b676:	4a37      	ldr	r2, [pc, #220]	@ (800b754 <_printf_float+0x2dc>)
 800b678:	2301      	movs	r3, #1
 800b67a:	4631      	mov	r1, r6
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b8      	blx	r7
 800b680:	3001      	adds	r0, #1
 800b682:	f43f af54 	beq.w	800b52e <_printf_float+0xb6>
 800b686:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b68a:	4543      	cmp	r3, r8
 800b68c:	db02      	blt.n	800b694 <_printf_float+0x21c>
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	07d8      	lsls	r0, r3, #31
 800b692:	d50f      	bpl.n	800b6b4 <_printf_float+0x23c>
 800b694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b698:	4631      	mov	r1, r6
 800b69a:	4628      	mov	r0, r5
 800b69c:	47b8      	blx	r7
 800b69e:	3001      	adds	r0, #1
 800b6a0:	f43f af45 	beq.w	800b52e <_printf_float+0xb6>
 800b6a4:	f04f 0900 	mov.w	r9, #0
 800b6a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6ac:	f104 0a1a 	add.w	sl, r4, #26
 800b6b0:	45c8      	cmp	r8, r9
 800b6b2:	dc09      	bgt.n	800b6c8 <_printf_float+0x250>
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	079b      	lsls	r3, r3, #30
 800b6b8:	f100 8103 	bmi.w	800b8c2 <_printf_float+0x44a>
 800b6bc:	68e0      	ldr	r0, [r4, #12]
 800b6be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6c0:	4298      	cmp	r0, r3
 800b6c2:	bfb8      	it	lt
 800b6c4:	4618      	movlt	r0, r3
 800b6c6:	e734      	b.n	800b532 <_printf_float+0xba>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	4652      	mov	r2, sl
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	47b8      	blx	r7
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	f43f af2b 	beq.w	800b52e <_printf_float+0xb6>
 800b6d8:	f109 0901 	add.w	r9, r9, #1
 800b6dc:	e7e8      	b.n	800b6b0 <_printf_float+0x238>
 800b6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dc39      	bgt.n	800b758 <_printf_float+0x2e0>
 800b6e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b754 <_printf_float+0x2dc>)
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4631      	mov	r1, r6
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	47b8      	blx	r7
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	f43f af1d 	beq.w	800b52e <_printf_float+0xb6>
 800b6f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b6f8:	ea59 0303 	orrs.w	r3, r9, r3
 800b6fc:	d102      	bne.n	800b704 <_printf_float+0x28c>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	07d9      	lsls	r1, r3, #31
 800b702:	d5d7      	bpl.n	800b6b4 <_printf_float+0x23c>
 800b704:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b708:	4631      	mov	r1, r6
 800b70a:	4628      	mov	r0, r5
 800b70c:	47b8      	blx	r7
 800b70e:	3001      	adds	r0, #1
 800b710:	f43f af0d 	beq.w	800b52e <_printf_float+0xb6>
 800b714:	f04f 0a00 	mov.w	sl, #0
 800b718:	f104 0b1a 	add.w	fp, r4, #26
 800b71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b71e:	425b      	negs	r3, r3
 800b720:	4553      	cmp	r3, sl
 800b722:	dc01      	bgt.n	800b728 <_printf_float+0x2b0>
 800b724:	464b      	mov	r3, r9
 800b726:	e793      	b.n	800b650 <_printf_float+0x1d8>
 800b728:	2301      	movs	r3, #1
 800b72a:	465a      	mov	r2, fp
 800b72c:	4631      	mov	r1, r6
 800b72e:	4628      	mov	r0, r5
 800b730:	47b8      	blx	r7
 800b732:	3001      	adds	r0, #1
 800b734:	f43f aefb 	beq.w	800b52e <_printf_float+0xb6>
 800b738:	f10a 0a01 	add.w	sl, sl, #1
 800b73c:	e7ee      	b.n	800b71c <_printf_float+0x2a4>
 800b73e:	bf00      	nop
 800b740:	7fefffff 	.word	0x7fefffff
 800b744:	0800e2a0 	.word	0x0800e2a0
 800b748:	0800e2a4 	.word	0x0800e2a4
 800b74c:	0800e2a8 	.word	0x0800e2a8
 800b750:	0800e2ac 	.word	0x0800e2ac
 800b754:	0800e2b0 	.word	0x0800e2b0
 800b758:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b75a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b75e:	4553      	cmp	r3, sl
 800b760:	bfa8      	it	ge
 800b762:	4653      	movge	r3, sl
 800b764:	2b00      	cmp	r3, #0
 800b766:	4699      	mov	r9, r3
 800b768:	dc36      	bgt.n	800b7d8 <_printf_float+0x360>
 800b76a:	f04f 0b00 	mov.w	fp, #0
 800b76e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b772:	f104 021a 	add.w	r2, r4, #26
 800b776:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b778:	9306      	str	r3, [sp, #24]
 800b77a:	eba3 0309 	sub.w	r3, r3, r9
 800b77e:	455b      	cmp	r3, fp
 800b780:	dc31      	bgt.n	800b7e6 <_printf_float+0x36e>
 800b782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b784:	459a      	cmp	sl, r3
 800b786:	dc3a      	bgt.n	800b7fe <_printf_float+0x386>
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	07da      	lsls	r2, r3, #31
 800b78c:	d437      	bmi.n	800b7fe <_printf_float+0x386>
 800b78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b790:	ebaa 0903 	sub.w	r9, sl, r3
 800b794:	9b06      	ldr	r3, [sp, #24]
 800b796:	ebaa 0303 	sub.w	r3, sl, r3
 800b79a:	4599      	cmp	r9, r3
 800b79c:	bfa8      	it	ge
 800b79e:	4699      	movge	r9, r3
 800b7a0:	f1b9 0f00 	cmp.w	r9, #0
 800b7a4:	dc33      	bgt.n	800b80e <_printf_float+0x396>
 800b7a6:	f04f 0800 	mov.w	r8, #0
 800b7aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7ae:	f104 0b1a 	add.w	fp, r4, #26
 800b7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b4:	ebaa 0303 	sub.w	r3, sl, r3
 800b7b8:	eba3 0309 	sub.w	r3, r3, r9
 800b7bc:	4543      	cmp	r3, r8
 800b7be:	f77f af79 	ble.w	800b6b4 <_printf_float+0x23c>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	465a      	mov	r2, fp
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	47b8      	blx	r7
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	f43f aeae 	beq.w	800b52e <_printf_float+0xb6>
 800b7d2:	f108 0801 	add.w	r8, r8, #1
 800b7d6:	e7ec      	b.n	800b7b2 <_printf_float+0x33a>
 800b7d8:	4642      	mov	r2, r8
 800b7da:	4631      	mov	r1, r6
 800b7dc:	4628      	mov	r0, r5
 800b7de:	47b8      	blx	r7
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	d1c2      	bne.n	800b76a <_printf_float+0x2f2>
 800b7e4:	e6a3      	b.n	800b52e <_printf_float+0xb6>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	9206      	str	r2, [sp, #24]
 800b7ee:	47b8      	blx	r7
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	f43f ae9c 	beq.w	800b52e <_printf_float+0xb6>
 800b7f6:	9a06      	ldr	r2, [sp, #24]
 800b7f8:	f10b 0b01 	add.w	fp, fp, #1
 800b7fc:	e7bb      	b.n	800b776 <_printf_float+0x2fe>
 800b7fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b802:	4631      	mov	r1, r6
 800b804:	4628      	mov	r0, r5
 800b806:	47b8      	blx	r7
 800b808:	3001      	adds	r0, #1
 800b80a:	d1c0      	bne.n	800b78e <_printf_float+0x316>
 800b80c:	e68f      	b.n	800b52e <_printf_float+0xb6>
 800b80e:	9a06      	ldr	r2, [sp, #24]
 800b810:	464b      	mov	r3, r9
 800b812:	4442      	add	r2, r8
 800b814:	4631      	mov	r1, r6
 800b816:	4628      	mov	r0, r5
 800b818:	47b8      	blx	r7
 800b81a:	3001      	adds	r0, #1
 800b81c:	d1c3      	bne.n	800b7a6 <_printf_float+0x32e>
 800b81e:	e686      	b.n	800b52e <_printf_float+0xb6>
 800b820:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b824:	f1ba 0f01 	cmp.w	sl, #1
 800b828:	dc01      	bgt.n	800b82e <_printf_float+0x3b6>
 800b82a:	07db      	lsls	r3, r3, #31
 800b82c:	d536      	bpl.n	800b89c <_printf_float+0x424>
 800b82e:	2301      	movs	r3, #1
 800b830:	4642      	mov	r2, r8
 800b832:	4631      	mov	r1, r6
 800b834:	4628      	mov	r0, r5
 800b836:	47b8      	blx	r7
 800b838:	3001      	adds	r0, #1
 800b83a:	f43f ae78 	beq.w	800b52e <_printf_float+0xb6>
 800b83e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b842:	4631      	mov	r1, r6
 800b844:	4628      	mov	r0, r5
 800b846:	47b8      	blx	r7
 800b848:	3001      	adds	r0, #1
 800b84a:	f43f ae70 	beq.w	800b52e <_printf_float+0xb6>
 800b84e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b852:	2200      	movs	r2, #0
 800b854:	2300      	movs	r3, #0
 800b856:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b85a:	f7f5 f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800b85e:	b9c0      	cbnz	r0, 800b892 <_printf_float+0x41a>
 800b860:	4653      	mov	r3, sl
 800b862:	f108 0201 	add.w	r2, r8, #1
 800b866:	4631      	mov	r1, r6
 800b868:	4628      	mov	r0, r5
 800b86a:	47b8      	blx	r7
 800b86c:	3001      	adds	r0, #1
 800b86e:	d10c      	bne.n	800b88a <_printf_float+0x412>
 800b870:	e65d      	b.n	800b52e <_printf_float+0xb6>
 800b872:	2301      	movs	r3, #1
 800b874:	465a      	mov	r2, fp
 800b876:	4631      	mov	r1, r6
 800b878:	4628      	mov	r0, r5
 800b87a:	47b8      	blx	r7
 800b87c:	3001      	adds	r0, #1
 800b87e:	f43f ae56 	beq.w	800b52e <_printf_float+0xb6>
 800b882:	f108 0801 	add.w	r8, r8, #1
 800b886:	45d0      	cmp	r8, sl
 800b888:	dbf3      	blt.n	800b872 <_printf_float+0x3fa>
 800b88a:	464b      	mov	r3, r9
 800b88c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b890:	e6df      	b.n	800b652 <_printf_float+0x1da>
 800b892:	f04f 0800 	mov.w	r8, #0
 800b896:	f104 0b1a 	add.w	fp, r4, #26
 800b89a:	e7f4      	b.n	800b886 <_printf_float+0x40e>
 800b89c:	2301      	movs	r3, #1
 800b89e:	4642      	mov	r2, r8
 800b8a0:	e7e1      	b.n	800b866 <_printf_float+0x3ee>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	464a      	mov	r2, r9
 800b8a6:	4631      	mov	r1, r6
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	47b8      	blx	r7
 800b8ac:	3001      	adds	r0, #1
 800b8ae:	f43f ae3e 	beq.w	800b52e <_printf_float+0xb6>
 800b8b2:	f108 0801 	add.w	r8, r8, #1
 800b8b6:	68e3      	ldr	r3, [r4, #12]
 800b8b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8ba:	1a5b      	subs	r3, r3, r1
 800b8bc:	4543      	cmp	r3, r8
 800b8be:	dcf0      	bgt.n	800b8a2 <_printf_float+0x42a>
 800b8c0:	e6fc      	b.n	800b6bc <_printf_float+0x244>
 800b8c2:	f04f 0800 	mov.w	r8, #0
 800b8c6:	f104 0919 	add.w	r9, r4, #25
 800b8ca:	e7f4      	b.n	800b8b6 <_printf_float+0x43e>

0800b8cc <_printf_common>:
 800b8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d0:	4616      	mov	r6, r2
 800b8d2:	4698      	mov	r8, r3
 800b8d4:	688a      	ldr	r2, [r1, #8]
 800b8d6:	690b      	ldr	r3, [r1, #16]
 800b8d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	bfb8      	it	lt
 800b8e0:	4613      	movlt	r3, r2
 800b8e2:	6033      	str	r3, [r6, #0]
 800b8e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	460c      	mov	r4, r1
 800b8ec:	b10a      	cbz	r2, 800b8f2 <_printf_common+0x26>
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	6033      	str	r3, [r6, #0]
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	0699      	lsls	r1, r3, #26
 800b8f6:	bf42      	ittt	mi
 800b8f8:	6833      	ldrmi	r3, [r6, #0]
 800b8fa:	3302      	addmi	r3, #2
 800b8fc:	6033      	strmi	r3, [r6, #0]
 800b8fe:	6825      	ldr	r5, [r4, #0]
 800b900:	f015 0506 	ands.w	r5, r5, #6
 800b904:	d106      	bne.n	800b914 <_printf_common+0x48>
 800b906:	f104 0a19 	add.w	sl, r4, #25
 800b90a:	68e3      	ldr	r3, [r4, #12]
 800b90c:	6832      	ldr	r2, [r6, #0]
 800b90e:	1a9b      	subs	r3, r3, r2
 800b910:	42ab      	cmp	r3, r5
 800b912:	dc26      	bgt.n	800b962 <_printf_common+0x96>
 800b914:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b918:	6822      	ldr	r2, [r4, #0]
 800b91a:	3b00      	subs	r3, #0
 800b91c:	bf18      	it	ne
 800b91e:	2301      	movne	r3, #1
 800b920:	0692      	lsls	r2, r2, #26
 800b922:	d42b      	bmi.n	800b97c <_printf_common+0xb0>
 800b924:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b928:	4641      	mov	r1, r8
 800b92a:	4638      	mov	r0, r7
 800b92c:	47c8      	blx	r9
 800b92e:	3001      	adds	r0, #1
 800b930:	d01e      	beq.n	800b970 <_printf_common+0xa4>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	6922      	ldr	r2, [r4, #16]
 800b936:	f003 0306 	and.w	r3, r3, #6
 800b93a:	2b04      	cmp	r3, #4
 800b93c:	bf02      	ittt	eq
 800b93e:	68e5      	ldreq	r5, [r4, #12]
 800b940:	6833      	ldreq	r3, [r6, #0]
 800b942:	1aed      	subeq	r5, r5, r3
 800b944:	68a3      	ldr	r3, [r4, #8]
 800b946:	bf0c      	ite	eq
 800b948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b94c:	2500      	movne	r5, #0
 800b94e:	4293      	cmp	r3, r2
 800b950:	bfc4      	itt	gt
 800b952:	1a9b      	subgt	r3, r3, r2
 800b954:	18ed      	addgt	r5, r5, r3
 800b956:	2600      	movs	r6, #0
 800b958:	341a      	adds	r4, #26
 800b95a:	42b5      	cmp	r5, r6
 800b95c:	d11a      	bne.n	800b994 <_printf_common+0xc8>
 800b95e:	2000      	movs	r0, #0
 800b960:	e008      	b.n	800b974 <_printf_common+0xa8>
 800b962:	2301      	movs	r3, #1
 800b964:	4652      	mov	r2, sl
 800b966:	4641      	mov	r1, r8
 800b968:	4638      	mov	r0, r7
 800b96a:	47c8      	blx	r9
 800b96c:	3001      	adds	r0, #1
 800b96e:	d103      	bne.n	800b978 <_printf_common+0xac>
 800b970:	f04f 30ff 	mov.w	r0, #4294967295
 800b974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b978:	3501      	adds	r5, #1
 800b97a:	e7c6      	b.n	800b90a <_printf_common+0x3e>
 800b97c:	18e1      	adds	r1, r4, r3
 800b97e:	1c5a      	adds	r2, r3, #1
 800b980:	2030      	movs	r0, #48	@ 0x30
 800b982:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b986:	4422      	add	r2, r4
 800b988:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b98c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b990:	3302      	adds	r3, #2
 800b992:	e7c7      	b.n	800b924 <_printf_common+0x58>
 800b994:	2301      	movs	r3, #1
 800b996:	4622      	mov	r2, r4
 800b998:	4641      	mov	r1, r8
 800b99a:	4638      	mov	r0, r7
 800b99c:	47c8      	blx	r9
 800b99e:	3001      	adds	r0, #1
 800b9a0:	d0e6      	beq.n	800b970 <_printf_common+0xa4>
 800b9a2:	3601      	adds	r6, #1
 800b9a4:	e7d9      	b.n	800b95a <_printf_common+0x8e>
	...

0800b9a8 <_printf_i>:
 800b9a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9ac:	7e0f      	ldrb	r7, [r1, #24]
 800b9ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b9b0:	2f78      	cmp	r7, #120	@ 0x78
 800b9b2:	4691      	mov	r9, r2
 800b9b4:	4680      	mov	r8, r0
 800b9b6:	460c      	mov	r4, r1
 800b9b8:	469a      	mov	sl, r3
 800b9ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b9be:	d807      	bhi.n	800b9d0 <_printf_i+0x28>
 800b9c0:	2f62      	cmp	r7, #98	@ 0x62
 800b9c2:	d80a      	bhi.n	800b9da <_printf_i+0x32>
 800b9c4:	2f00      	cmp	r7, #0
 800b9c6:	f000 80d2 	beq.w	800bb6e <_printf_i+0x1c6>
 800b9ca:	2f58      	cmp	r7, #88	@ 0x58
 800b9cc:	f000 80b9 	beq.w	800bb42 <_printf_i+0x19a>
 800b9d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b9d8:	e03a      	b.n	800ba50 <_printf_i+0xa8>
 800b9da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b9de:	2b15      	cmp	r3, #21
 800b9e0:	d8f6      	bhi.n	800b9d0 <_printf_i+0x28>
 800b9e2:	a101      	add	r1, pc, #4	@ (adr r1, 800b9e8 <_printf_i+0x40>)
 800b9e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9e8:	0800ba41 	.word	0x0800ba41
 800b9ec:	0800ba55 	.word	0x0800ba55
 800b9f0:	0800b9d1 	.word	0x0800b9d1
 800b9f4:	0800b9d1 	.word	0x0800b9d1
 800b9f8:	0800b9d1 	.word	0x0800b9d1
 800b9fc:	0800b9d1 	.word	0x0800b9d1
 800ba00:	0800ba55 	.word	0x0800ba55
 800ba04:	0800b9d1 	.word	0x0800b9d1
 800ba08:	0800b9d1 	.word	0x0800b9d1
 800ba0c:	0800b9d1 	.word	0x0800b9d1
 800ba10:	0800b9d1 	.word	0x0800b9d1
 800ba14:	0800bb55 	.word	0x0800bb55
 800ba18:	0800ba7f 	.word	0x0800ba7f
 800ba1c:	0800bb0f 	.word	0x0800bb0f
 800ba20:	0800b9d1 	.word	0x0800b9d1
 800ba24:	0800b9d1 	.word	0x0800b9d1
 800ba28:	0800bb77 	.word	0x0800bb77
 800ba2c:	0800b9d1 	.word	0x0800b9d1
 800ba30:	0800ba7f 	.word	0x0800ba7f
 800ba34:	0800b9d1 	.word	0x0800b9d1
 800ba38:	0800b9d1 	.word	0x0800b9d1
 800ba3c:	0800bb17 	.word	0x0800bb17
 800ba40:	6833      	ldr	r3, [r6, #0]
 800ba42:	1d1a      	adds	r2, r3, #4
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6032      	str	r2, [r6, #0]
 800ba48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba50:	2301      	movs	r3, #1
 800ba52:	e09d      	b.n	800bb90 <_printf_i+0x1e8>
 800ba54:	6833      	ldr	r3, [r6, #0]
 800ba56:	6820      	ldr	r0, [r4, #0]
 800ba58:	1d19      	adds	r1, r3, #4
 800ba5a:	6031      	str	r1, [r6, #0]
 800ba5c:	0606      	lsls	r6, r0, #24
 800ba5e:	d501      	bpl.n	800ba64 <_printf_i+0xbc>
 800ba60:	681d      	ldr	r5, [r3, #0]
 800ba62:	e003      	b.n	800ba6c <_printf_i+0xc4>
 800ba64:	0645      	lsls	r5, r0, #25
 800ba66:	d5fb      	bpl.n	800ba60 <_printf_i+0xb8>
 800ba68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba6c:	2d00      	cmp	r5, #0
 800ba6e:	da03      	bge.n	800ba78 <_printf_i+0xd0>
 800ba70:	232d      	movs	r3, #45	@ 0x2d
 800ba72:	426d      	negs	r5, r5
 800ba74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba78:	4859      	ldr	r0, [pc, #356]	@ (800bbe0 <_printf_i+0x238>)
 800ba7a:	230a      	movs	r3, #10
 800ba7c:	e011      	b.n	800baa2 <_printf_i+0xfa>
 800ba7e:	6821      	ldr	r1, [r4, #0]
 800ba80:	6833      	ldr	r3, [r6, #0]
 800ba82:	0608      	lsls	r0, r1, #24
 800ba84:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba88:	d402      	bmi.n	800ba90 <_printf_i+0xe8>
 800ba8a:	0649      	lsls	r1, r1, #25
 800ba8c:	bf48      	it	mi
 800ba8e:	b2ad      	uxthmi	r5, r5
 800ba90:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba92:	4853      	ldr	r0, [pc, #332]	@ (800bbe0 <_printf_i+0x238>)
 800ba94:	6033      	str	r3, [r6, #0]
 800ba96:	bf14      	ite	ne
 800ba98:	230a      	movne	r3, #10
 800ba9a:	2308      	moveq	r3, #8
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800baa2:	6866      	ldr	r6, [r4, #4]
 800baa4:	60a6      	str	r6, [r4, #8]
 800baa6:	2e00      	cmp	r6, #0
 800baa8:	bfa2      	ittt	ge
 800baaa:	6821      	ldrge	r1, [r4, #0]
 800baac:	f021 0104 	bicge.w	r1, r1, #4
 800bab0:	6021      	strge	r1, [r4, #0]
 800bab2:	b90d      	cbnz	r5, 800bab8 <_printf_i+0x110>
 800bab4:	2e00      	cmp	r6, #0
 800bab6:	d04b      	beq.n	800bb50 <_printf_i+0x1a8>
 800bab8:	4616      	mov	r6, r2
 800baba:	fbb5 f1f3 	udiv	r1, r5, r3
 800babe:	fb03 5711 	mls	r7, r3, r1, r5
 800bac2:	5dc7      	ldrb	r7, [r0, r7]
 800bac4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bac8:	462f      	mov	r7, r5
 800baca:	42bb      	cmp	r3, r7
 800bacc:	460d      	mov	r5, r1
 800bace:	d9f4      	bls.n	800baba <_printf_i+0x112>
 800bad0:	2b08      	cmp	r3, #8
 800bad2:	d10b      	bne.n	800baec <_printf_i+0x144>
 800bad4:	6823      	ldr	r3, [r4, #0]
 800bad6:	07df      	lsls	r7, r3, #31
 800bad8:	d508      	bpl.n	800baec <_printf_i+0x144>
 800bada:	6923      	ldr	r3, [r4, #16]
 800badc:	6861      	ldr	r1, [r4, #4]
 800bade:	4299      	cmp	r1, r3
 800bae0:	bfde      	ittt	le
 800bae2:	2330      	movle	r3, #48	@ 0x30
 800bae4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bae8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800baec:	1b92      	subs	r2, r2, r6
 800baee:	6122      	str	r2, [r4, #16]
 800baf0:	f8cd a000 	str.w	sl, [sp]
 800baf4:	464b      	mov	r3, r9
 800baf6:	aa03      	add	r2, sp, #12
 800baf8:	4621      	mov	r1, r4
 800bafa:	4640      	mov	r0, r8
 800bafc:	f7ff fee6 	bl	800b8cc <_printf_common>
 800bb00:	3001      	adds	r0, #1
 800bb02:	d14a      	bne.n	800bb9a <_printf_i+0x1f2>
 800bb04:	f04f 30ff 	mov.w	r0, #4294967295
 800bb08:	b004      	add	sp, #16
 800bb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	f043 0320 	orr.w	r3, r3, #32
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	4833      	ldr	r0, [pc, #204]	@ (800bbe4 <_printf_i+0x23c>)
 800bb18:	2778      	movs	r7, #120	@ 0x78
 800bb1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb1e:	6823      	ldr	r3, [r4, #0]
 800bb20:	6831      	ldr	r1, [r6, #0]
 800bb22:	061f      	lsls	r7, r3, #24
 800bb24:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb28:	d402      	bmi.n	800bb30 <_printf_i+0x188>
 800bb2a:	065f      	lsls	r7, r3, #25
 800bb2c:	bf48      	it	mi
 800bb2e:	b2ad      	uxthmi	r5, r5
 800bb30:	6031      	str	r1, [r6, #0]
 800bb32:	07d9      	lsls	r1, r3, #31
 800bb34:	bf44      	itt	mi
 800bb36:	f043 0320 	orrmi.w	r3, r3, #32
 800bb3a:	6023      	strmi	r3, [r4, #0]
 800bb3c:	b11d      	cbz	r5, 800bb46 <_printf_i+0x19e>
 800bb3e:	2310      	movs	r3, #16
 800bb40:	e7ac      	b.n	800ba9c <_printf_i+0xf4>
 800bb42:	4827      	ldr	r0, [pc, #156]	@ (800bbe0 <_printf_i+0x238>)
 800bb44:	e7e9      	b.n	800bb1a <_printf_i+0x172>
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	f023 0320 	bic.w	r3, r3, #32
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	e7f6      	b.n	800bb3e <_printf_i+0x196>
 800bb50:	4616      	mov	r6, r2
 800bb52:	e7bd      	b.n	800bad0 <_printf_i+0x128>
 800bb54:	6833      	ldr	r3, [r6, #0]
 800bb56:	6825      	ldr	r5, [r4, #0]
 800bb58:	6961      	ldr	r1, [r4, #20]
 800bb5a:	1d18      	adds	r0, r3, #4
 800bb5c:	6030      	str	r0, [r6, #0]
 800bb5e:	062e      	lsls	r6, r5, #24
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	d501      	bpl.n	800bb68 <_printf_i+0x1c0>
 800bb64:	6019      	str	r1, [r3, #0]
 800bb66:	e002      	b.n	800bb6e <_printf_i+0x1c6>
 800bb68:	0668      	lsls	r0, r5, #25
 800bb6a:	d5fb      	bpl.n	800bb64 <_printf_i+0x1bc>
 800bb6c:	8019      	strh	r1, [r3, #0]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	6123      	str	r3, [r4, #16]
 800bb72:	4616      	mov	r6, r2
 800bb74:	e7bc      	b.n	800baf0 <_printf_i+0x148>
 800bb76:	6833      	ldr	r3, [r6, #0]
 800bb78:	1d1a      	adds	r2, r3, #4
 800bb7a:	6032      	str	r2, [r6, #0]
 800bb7c:	681e      	ldr	r6, [r3, #0]
 800bb7e:	6862      	ldr	r2, [r4, #4]
 800bb80:	2100      	movs	r1, #0
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7f4 fb24 	bl	80001d0 <memchr>
 800bb88:	b108      	cbz	r0, 800bb8e <_printf_i+0x1e6>
 800bb8a:	1b80      	subs	r0, r0, r6
 800bb8c:	6060      	str	r0, [r4, #4]
 800bb8e:	6863      	ldr	r3, [r4, #4]
 800bb90:	6123      	str	r3, [r4, #16]
 800bb92:	2300      	movs	r3, #0
 800bb94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb98:	e7aa      	b.n	800baf0 <_printf_i+0x148>
 800bb9a:	6923      	ldr	r3, [r4, #16]
 800bb9c:	4632      	mov	r2, r6
 800bb9e:	4649      	mov	r1, r9
 800bba0:	4640      	mov	r0, r8
 800bba2:	47d0      	blx	sl
 800bba4:	3001      	adds	r0, #1
 800bba6:	d0ad      	beq.n	800bb04 <_printf_i+0x15c>
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	079b      	lsls	r3, r3, #30
 800bbac:	d413      	bmi.n	800bbd6 <_printf_i+0x22e>
 800bbae:	68e0      	ldr	r0, [r4, #12]
 800bbb0:	9b03      	ldr	r3, [sp, #12]
 800bbb2:	4298      	cmp	r0, r3
 800bbb4:	bfb8      	it	lt
 800bbb6:	4618      	movlt	r0, r3
 800bbb8:	e7a6      	b.n	800bb08 <_printf_i+0x160>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	4649      	mov	r1, r9
 800bbc0:	4640      	mov	r0, r8
 800bbc2:	47d0      	blx	sl
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	d09d      	beq.n	800bb04 <_printf_i+0x15c>
 800bbc8:	3501      	adds	r5, #1
 800bbca:	68e3      	ldr	r3, [r4, #12]
 800bbcc:	9903      	ldr	r1, [sp, #12]
 800bbce:	1a5b      	subs	r3, r3, r1
 800bbd0:	42ab      	cmp	r3, r5
 800bbd2:	dcf2      	bgt.n	800bbba <_printf_i+0x212>
 800bbd4:	e7eb      	b.n	800bbae <_printf_i+0x206>
 800bbd6:	2500      	movs	r5, #0
 800bbd8:	f104 0619 	add.w	r6, r4, #25
 800bbdc:	e7f5      	b.n	800bbca <_printf_i+0x222>
 800bbde:	bf00      	nop
 800bbe0:	0800e2b2 	.word	0x0800e2b2
 800bbe4:	0800e2c3 	.word	0x0800e2c3

0800bbe8 <std>:
 800bbe8:	2300      	movs	r3, #0
 800bbea:	b510      	push	{r4, lr}
 800bbec:	4604      	mov	r4, r0
 800bbee:	e9c0 3300 	strd	r3, r3, [r0]
 800bbf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbf6:	6083      	str	r3, [r0, #8]
 800bbf8:	8181      	strh	r1, [r0, #12]
 800bbfa:	6643      	str	r3, [r0, #100]	@ 0x64
 800bbfc:	81c2      	strh	r2, [r0, #14]
 800bbfe:	6183      	str	r3, [r0, #24]
 800bc00:	4619      	mov	r1, r3
 800bc02:	2208      	movs	r2, #8
 800bc04:	305c      	adds	r0, #92	@ 0x5c
 800bc06:	f000 f928 	bl	800be5a <memset>
 800bc0a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc40 <std+0x58>)
 800bc0c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc0e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc44 <std+0x5c>)
 800bc10:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc12:	4b0d      	ldr	r3, [pc, #52]	@ (800bc48 <std+0x60>)
 800bc14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bc16:	4b0d      	ldr	r3, [pc, #52]	@ (800bc4c <std+0x64>)
 800bc18:	6323      	str	r3, [r4, #48]	@ 0x30
 800bc1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc50 <std+0x68>)
 800bc1c:	6224      	str	r4, [r4, #32]
 800bc1e:	429c      	cmp	r4, r3
 800bc20:	d006      	beq.n	800bc30 <std+0x48>
 800bc22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bc26:	4294      	cmp	r4, r2
 800bc28:	d002      	beq.n	800bc30 <std+0x48>
 800bc2a:	33d0      	adds	r3, #208	@ 0xd0
 800bc2c:	429c      	cmp	r4, r3
 800bc2e:	d105      	bne.n	800bc3c <std+0x54>
 800bc30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc38:	f000 b98c 	b.w	800bf54 <__retarget_lock_init_recursive>
 800bc3c:	bd10      	pop	{r4, pc}
 800bc3e:	bf00      	nop
 800bc40:	0800bdd5 	.word	0x0800bdd5
 800bc44:	0800bdf7 	.word	0x0800bdf7
 800bc48:	0800be2f 	.word	0x0800be2f
 800bc4c:	0800be53 	.word	0x0800be53
 800bc50:	200015f4 	.word	0x200015f4

0800bc54 <stdio_exit_handler>:
 800bc54:	4a02      	ldr	r2, [pc, #8]	@ (800bc60 <stdio_exit_handler+0xc>)
 800bc56:	4903      	ldr	r1, [pc, #12]	@ (800bc64 <stdio_exit_handler+0x10>)
 800bc58:	4803      	ldr	r0, [pc, #12]	@ (800bc68 <stdio_exit_handler+0x14>)
 800bc5a:	f000 b869 	b.w	800bd30 <_fwalk_sglue>
 800bc5e:	bf00      	nop
 800bc60:	2000017c 	.word	0x2000017c
 800bc64:	0800d8b5 	.word	0x0800d8b5
 800bc68:	2000018c 	.word	0x2000018c

0800bc6c <cleanup_stdio>:
 800bc6c:	6841      	ldr	r1, [r0, #4]
 800bc6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bca0 <cleanup_stdio+0x34>)
 800bc70:	4299      	cmp	r1, r3
 800bc72:	b510      	push	{r4, lr}
 800bc74:	4604      	mov	r4, r0
 800bc76:	d001      	beq.n	800bc7c <cleanup_stdio+0x10>
 800bc78:	f001 fe1c 	bl	800d8b4 <_fflush_r>
 800bc7c:	68a1      	ldr	r1, [r4, #8]
 800bc7e:	4b09      	ldr	r3, [pc, #36]	@ (800bca4 <cleanup_stdio+0x38>)
 800bc80:	4299      	cmp	r1, r3
 800bc82:	d002      	beq.n	800bc8a <cleanup_stdio+0x1e>
 800bc84:	4620      	mov	r0, r4
 800bc86:	f001 fe15 	bl	800d8b4 <_fflush_r>
 800bc8a:	68e1      	ldr	r1, [r4, #12]
 800bc8c:	4b06      	ldr	r3, [pc, #24]	@ (800bca8 <cleanup_stdio+0x3c>)
 800bc8e:	4299      	cmp	r1, r3
 800bc90:	d004      	beq.n	800bc9c <cleanup_stdio+0x30>
 800bc92:	4620      	mov	r0, r4
 800bc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc98:	f001 be0c 	b.w	800d8b4 <_fflush_r>
 800bc9c:	bd10      	pop	{r4, pc}
 800bc9e:	bf00      	nop
 800bca0:	200015f4 	.word	0x200015f4
 800bca4:	2000165c 	.word	0x2000165c
 800bca8:	200016c4 	.word	0x200016c4

0800bcac <global_stdio_init.part.0>:
 800bcac:	b510      	push	{r4, lr}
 800bcae:	4b0b      	ldr	r3, [pc, #44]	@ (800bcdc <global_stdio_init.part.0+0x30>)
 800bcb0:	4c0b      	ldr	r4, [pc, #44]	@ (800bce0 <global_stdio_init.part.0+0x34>)
 800bcb2:	4a0c      	ldr	r2, [pc, #48]	@ (800bce4 <global_stdio_init.part.0+0x38>)
 800bcb4:	601a      	str	r2, [r3, #0]
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2104      	movs	r1, #4
 800bcbc:	f7ff ff94 	bl	800bbe8 <std>
 800bcc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	2109      	movs	r1, #9
 800bcc8:	f7ff ff8e 	bl	800bbe8 <std>
 800bccc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcd6:	2112      	movs	r1, #18
 800bcd8:	f7ff bf86 	b.w	800bbe8 <std>
 800bcdc:	2000172c 	.word	0x2000172c
 800bce0:	200015f4 	.word	0x200015f4
 800bce4:	0800bc55 	.word	0x0800bc55

0800bce8 <__sfp_lock_acquire>:
 800bce8:	4801      	ldr	r0, [pc, #4]	@ (800bcf0 <__sfp_lock_acquire+0x8>)
 800bcea:	f000 b934 	b.w	800bf56 <__retarget_lock_acquire_recursive>
 800bcee:	bf00      	nop
 800bcf0:	20001735 	.word	0x20001735

0800bcf4 <__sfp_lock_release>:
 800bcf4:	4801      	ldr	r0, [pc, #4]	@ (800bcfc <__sfp_lock_release+0x8>)
 800bcf6:	f000 b92f 	b.w	800bf58 <__retarget_lock_release_recursive>
 800bcfa:	bf00      	nop
 800bcfc:	20001735 	.word	0x20001735

0800bd00 <__sinit>:
 800bd00:	b510      	push	{r4, lr}
 800bd02:	4604      	mov	r4, r0
 800bd04:	f7ff fff0 	bl	800bce8 <__sfp_lock_acquire>
 800bd08:	6a23      	ldr	r3, [r4, #32]
 800bd0a:	b11b      	cbz	r3, 800bd14 <__sinit+0x14>
 800bd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd10:	f7ff bff0 	b.w	800bcf4 <__sfp_lock_release>
 800bd14:	4b04      	ldr	r3, [pc, #16]	@ (800bd28 <__sinit+0x28>)
 800bd16:	6223      	str	r3, [r4, #32]
 800bd18:	4b04      	ldr	r3, [pc, #16]	@ (800bd2c <__sinit+0x2c>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1f5      	bne.n	800bd0c <__sinit+0xc>
 800bd20:	f7ff ffc4 	bl	800bcac <global_stdio_init.part.0>
 800bd24:	e7f2      	b.n	800bd0c <__sinit+0xc>
 800bd26:	bf00      	nop
 800bd28:	0800bc6d 	.word	0x0800bc6d
 800bd2c:	2000172c 	.word	0x2000172c

0800bd30 <_fwalk_sglue>:
 800bd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd34:	4607      	mov	r7, r0
 800bd36:	4688      	mov	r8, r1
 800bd38:	4614      	mov	r4, r2
 800bd3a:	2600      	movs	r6, #0
 800bd3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd40:	f1b9 0901 	subs.w	r9, r9, #1
 800bd44:	d505      	bpl.n	800bd52 <_fwalk_sglue+0x22>
 800bd46:	6824      	ldr	r4, [r4, #0]
 800bd48:	2c00      	cmp	r4, #0
 800bd4a:	d1f7      	bne.n	800bd3c <_fwalk_sglue+0xc>
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd52:	89ab      	ldrh	r3, [r5, #12]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d907      	bls.n	800bd68 <_fwalk_sglue+0x38>
 800bd58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	d003      	beq.n	800bd68 <_fwalk_sglue+0x38>
 800bd60:	4629      	mov	r1, r5
 800bd62:	4638      	mov	r0, r7
 800bd64:	47c0      	blx	r8
 800bd66:	4306      	orrs	r6, r0
 800bd68:	3568      	adds	r5, #104	@ 0x68
 800bd6a:	e7e9      	b.n	800bd40 <_fwalk_sglue+0x10>

0800bd6c <sniprintf>:
 800bd6c:	b40c      	push	{r2, r3}
 800bd6e:	b530      	push	{r4, r5, lr}
 800bd70:	4b17      	ldr	r3, [pc, #92]	@ (800bdd0 <sniprintf+0x64>)
 800bd72:	1e0c      	subs	r4, r1, #0
 800bd74:	681d      	ldr	r5, [r3, #0]
 800bd76:	b09d      	sub	sp, #116	@ 0x74
 800bd78:	da08      	bge.n	800bd8c <sniprintf+0x20>
 800bd7a:	238b      	movs	r3, #139	@ 0x8b
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd82:	b01d      	add	sp, #116	@ 0x74
 800bd84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd88:	b002      	add	sp, #8
 800bd8a:	4770      	bx	lr
 800bd8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bd90:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd94:	bf14      	ite	ne
 800bd96:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd9a:	4623      	moveq	r3, r4
 800bd9c:	9304      	str	r3, [sp, #16]
 800bd9e:	9307      	str	r3, [sp, #28]
 800bda0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bda4:	9002      	str	r0, [sp, #8]
 800bda6:	9006      	str	r0, [sp, #24]
 800bda8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bdac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bdae:	ab21      	add	r3, sp, #132	@ 0x84
 800bdb0:	a902      	add	r1, sp, #8
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	f001 fbfd 	bl	800d5b4 <_svfiprintf_r>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	bfbc      	itt	lt
 800bdbe:	238b      	movlt	r3, #139	@ 0x8b
 800bdc0:	602b      	strlt	r3, [r5, #0]
 800bdc2:	2c00      	cmp	r4, #0
 800bdc4:	d0dd      	beq.n	800bd82 <sniprintf+0x16>
 800bdc6:	9b02      	ldr	r3, [sp, #8]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	701a      	strb	r2, [r3, #0]
 800bdcc:	e7d9      	b.n	800bd82 <sniprintf+0x16>
 800bdce:	bf00      	nop
 800bdd0:	20000188 	.word	0x20000188

0800bdd4 <__sread>:
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bddc:	f000 f86c 	bl	800beb8 <_read_r>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	bfab      	itete	ge
 800bde4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bde6:	89a3      	ldrhlt	r3, [r4, #12]
 800bde8:	181b      	addge	r3, r3, r0
 800bdea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bdee:	bfac      	ite	ge
 800bdf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bdf2:	81a3      	strhlt	r3, [r4, #12]
 800bdf4:	bd10      	pop	{r4, pc}

0800bdf6 <__swrite>:
 800bdf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfa:	461f      	mov	r7, r3
 800bdfc:	898b      	ldrh	r3, [r1, #12]
 800bdfe:	05db      	lsls	r3, r3, #23
 800be00:	4605      	mov	r5, r0
 800be02:	460c      	mov	r4, r1
 800be04:	4616      	mov	r6, r2
 800be06:	d505      	bpl.n	800be14 <__swrite+0x1e>
 800be08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be0c:	2302      	movs	r3, #2
 800be0e:	2200      	movs	r2, #0
 800be10:	f000 f840 	bl	800be94 <_lseek_r>
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be1e:	81a3      	strh	r3, [r4, #12]
 800be20:	4632      	mov	r2, r6
 800be22:	463b      	mov	r3, r7
 800be24:	4628      	mov	r0, r5
 800be26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be2a:	f000 b857 	b.w	800bedc <_write_r>

0800be2e <__sseek>:
 800be2e:	b510      	push	{r4, lr}
 800be30:	460c      	mov	r4, r1
 800be32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be36:	f000 f82d 	bl	800be94 <_lseek_r>
 800be3a:	1c43      	adds	r3, r0, #1
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	bf15      	itete	ne
 800be40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800be42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800be46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800be4a:	81a3      	strheq	r3, [r4, #12]
 800be4c:	bf18      	it	ne
 800be4e:	81a3      	strhne	r3, [r4, #12]
 800be50:	bd10      	pop	{r4, pc}

0800be52 <__sclose>:
 800be52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be56:	f000 b80d 	b.w	800be74 <_close_r>

0800be5a <memset>:
 800be5a:	4402      	add	r2, r0
 800be5c:	4603      	mov	r3, r0
 800be5e:	4293      	cmp	r3, r2
 800be60:	d100      	bne.n	800be64 <memset+0xa>
 800be62:	4770      	bx	lr
 800be64:	f803 1b01 	strb.w	r1, [r3], #1
 800be68:	e7f9      	b.n	800be5e <memset+0x4>
	...

0800be6c <_localeconv_r>:
 800be6c:	4800      	ldr	r0, [pc, #0]	@ (800be70 <_localeconv_r+0x4>)
 800be6e:	4770      	bx	lr
 800be70:	200002c8 	.word	0x200002c8

0800be74 <_close_r>:
 800be74:	b538      	push	{r3, r4, r5, lr}
 800be76:	4d06      	ldr	r5, [pc, #24]	@ (800be90 <_close_r+0x1c>)
 800be78:	2300      	movs	r3, #0
 800be7a:	4604      	mov	r4, r0
 800be7c:	4608      	mov	r0, r1
 800be7e:	602b      	str	r3, [r5, #0]
 800be80:	f7f5 fcda 	bl	8001838 <_close>
 800be84:	1c43      	adds	r3, r0, #1
 800be86:	d102      	bne.n	800be8e <_close_r+0x1a>
 800be88:	682b      	ldr	r3, [r5, #0]
 800be8a:	b103      	cbz	r3, 800be8e <_close_r+0x1a>
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	bd38      	pop	{r3, r4, r5, pc}
 800be90:	20001730 	.word	0x20001730

0800be94 <_lseek_r>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	4d07      	ldr	r5, [pc, #28]	@ (800beb4 <_lseek_r+0x20>)
 800be98:	4604      	mov	r4, r0
 800be9a:	4608      	mov	r0, r1
 800be9c:	4611      	mov	r1, r2
 800be9e:	2200      	movs	r2, #0
 800bea0:	602a      	str	r2, [r5, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	f7f5 fcef 	bl	8001886 <_lseek>
 800bea8:	1c43      	adds	r3, r0, #1
 800beaa:	d102      	bne.n	800beb2 <_lseek_r+0x1e>
 800beac:	682b      	ldr	r3, [r5, #0]
 800beae:	b103      	cbz	r3, 800beb2 <_lseek_r+0x1e>
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	bd38      	pop	{r3, r4, r5, pc}
 800beb4:	20001730 	.word	0x20001730

0800beb8 <_read_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4d07      	ldr	r5, [pc, #28]	@ (800bed8 <_read_r+0x20>)
 800bebc:	4604      	mov	r4, r0
 800bebe:	4608      	mov	r0, r1
 800bec0:	4611      	mov	r1, r2
 800bec2:	2200      	movs	r2, #0
 800bec4:	602a      	str	r2, [r5, #0]
 800bec6:	461a      	mov	r2, r3
 800bec8:	f7f5 fc7d 	bl	80017c6 <_read>
 800becc:	1c43      	adds	r3, r0, #1
 800bece:	d102      	bne.n	800bed6 <_read_r+0x1e>
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	b103      	cbz	r3, 800bed6 <_read_r+0x1e>
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	bd38      	pop	{r3, r4, r5, pc}
 800bed8:	20001730 	.word	0x20001730

0800bedc <_write_r>:
 800bedc:	b538      	push	{r3, r4, r5, lr}
 800bede:	4d07      	ldr	r5, [pc, #28]	@ (800befc <_write_r+0x20>)
 800bee0:	4604      	mov	r4, r0
 800bee2:	4608      	mov	r0, r1
 800bee4:	4611      	mov	r1, r2
 800bee6:	2200      	movs	r2, #0
 800bee8:	602a      	str	r2, [r5, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	f7f5 fc88 	bl	8001800 <_write>
 800bef0:	1c43      	adds	r3, r0, #1
 800bef2:	d102      	bne.n	800befa <_write_r+0x1e>
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	b103      	cbz	r3, 800befa <_write_r+0x1e>
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	bd38      	pop	{r3, r4, r5, pc}
 800befc:	20001730 	.word	0x20001730

0800bf00 <__errno>:
 800bf00:	4b01      	ldr	r3, [pc, #4]	@ (800bf08 <__errno+0x8>)
 800bf02:	6818      	ldr	r0, [r3, #0]
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	20000188 	.word	0x20000188

0800bf0c <__libc_init_array>:
 800bf0c:	b570      	push	{r4, r5, r6, lr}
 800bf0e:	4d0d      	ldr	r5, [pc, #52]	@ (800bf44 <__libc_init_array+0x38>)
 800bf10:	4c0d      	ldr	r4, [pc, #52]	@ (800bf48 <__libc_init_array+0x3c>)
 800bf12:	1b64      	subs	r4, r4, r5
 800bf14:	10a4      	asrs	r4, r4, #2
 800bf16:	2600      	movs	r6, #0
 800bf18:	42a6      	cmp	r6, r4
 800bf1a:	d109      	bne.n	800bf30 <__libc_init_array+0x24>
 800bf1c:	4d0b      	ldr	r5, [pc, #44]	@ (800bf4c <__libc_init_array+0x40>)
 800bf1e:	4c0c      	ldr	r4, [pc, #48]	@ (800bf50 <__libc_init_array+0x44>)
 800bf20:	f002 f96c 	bl	800e1fc <_init>
 800bf24:	1b64      	subs	r4, r4, r5
 800bf26:	10a4      	asrs	r4, r4, #2
 800bf28:	2600      	movs	r6, #0
 800bf2a:	42a6      	cmp	r6, r4
 800bf2c:	d105      	bne.n	800bf3a <__libc_init_array+0x2e>
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf34:	4798      	blx	r3
 800bf36:	3601      	adds	r6, #1
 800bf38:	e7ee      	b.n	800bf18 <__libc_init_array+0xc>
 800bf3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf3e:	4798      	blx	r3
 800bf40:	3601      	adds	r6, #1
 800bf42:	e7f2      	b.n	800bf2a <__libc_init_array+0x1e>
 800bf44:	0800e618 	.word	0x0800e618
 800bf48:	0800e618 	.word	0x0800e618
 800bf4c:	0800e618 	.word	0x0800e618
 800bf50:	0800e61c 	.word	0x0800e61c

0800bf54 <__retarget_lock_init_recursive>:
 800bf54:	4770      	bx	lr

0800bf56 <__retarget_lock_acquire_recursive>:
 800bf56:	4770      	bx	lr

0800bf58 <__retarget_lock_release_recursive>:
 800bf58:	4770      	bx	lr

0800bf5a <quorem>:
 800bf5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5e:	6903      	ldr	r3, [r0, #16]
 800bf60:	690c      	ldr	r4, [r1, #16]
 800bf62:	42a3      	cmp	r3, r4
 800bf64:	4607      	mov	r7, r0
 800bf66:	db7e      	blt.n	800c066 <quorem+0x10c>
 800bf68:	3c01      	subs	r4, #1
 800bf6a:	f101 0814 	add.w	r8, r1, #20
 800bf6e:	00a3      	lsls	r3, r4, #2
 800bf70:	f100 0514 	add.w	r5, r0, #20
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf7a:	9301      	str	r3, [sp, #4]
 800bf7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf84:	3301      	adds	r3, #1
 800bf86:	429a      	cmp	r2, r3
 800bf88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf90:	d32e      	bcc.n	800bff0 <quorem+0x96>
 800bf92:	f04f 0a00 	mov.w	sl, #0
 800bf96:	46c4      	mov	ip, r8
 800bf98:	46ae      	mov	lr, r5
 800bf9a:	46d3      	mov	fp, sl
 800bf9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bfa0:	b298      	uxth	r0, r3
 800bfa2:	fb06 a000 	mla	r0, r6, r0, sl
 800bfa6:	0c02      	lsrs	r2, r0, #16
 800bfa8:	0c1b      	lsrs	r3, r3, #16
 800bfaa:	fb06 2303 	mla	r3, r6, r3, r2
 800bfae:	f8de 2000 	ldr.w	r2, [lr]
 800bfb2:	b280      	uxth	r0, r0
 800bfb4:	b292      	uxth	r2, r2
 800bfb6:	1a12      	subs	r2, r2, r0
 800bfb8:	445a      	add	r2, fp
 800bfba:	f8de 0000 	ldr.w	r0, [lr]
 800bfbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bfc8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bfcc:	b292      	uxth	r2, r2
 800bfce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bfd2:	45e1      	cmp	r9, ip
 800bfd4:	f84e 2b04 	str.w	r2, [lr], #4
 800bfd8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bfdc:	d2de      	bcs.n	800bf9c <quorem+0x42>
 800bfde:	9b00      	ldr	r3, [sp, #0]
 800bfe0:	58eb      	ldr	r3, [r5, r3]
 800bfe2:	b92b      	cbnz	r3, 800bff0 <quorem+0x96>
 800bfe4:	9b01      	ldr	r3, [sp, #4]
 800bfe6:	3b04      	subs	r3, #4
 800bfe8:	429d      	cmp	r5, r3
 800bfea:	461a      	mov	r2, r3
 800bfec:	d32f      	bcc.n	800c04e <quorem+0xf4>
 800bfee:	613c      	str	r4, [r7, #16]
 800bff0:	4638      	mov	r0, r7
 800bff2:	f001 f97b 	bl	800d2ec <__mcmp>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	db25      	blt.n	800c046 <quorem+0xec>
 800bffa:	4629      	mov	r1, r5
 800bffc:	2000      	movs	r0, #0
 800bffe:	f858 2b04 	ldr.w	r2, [r8], #4
 800c002:	f8d1 c000 	ldr.w	ip, [r1]
 800c006:	fa1f fe82 	uxth.w	lr, r2
 800c00a:	fa1f f38c 	uxth.w	r3, ip
 800c00e:	eba3 030e 	sub.w	r3, r3, lr
 800c012:	4403      	add	r3, r0
 800c014:	0c12      	lsrs	r2, r2, #16
 800c016:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c01a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c01e:	b29b      	uxth	r3, r3
 800c020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c024:	45c1      	cmp	r9, r8
 800c026:	f841 3b04 	str.w	r3, [r1], #4
 800c02a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c02e:	d2e6      	bcs.n	800bffe <quorem+0xa4>
 800c030:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c034:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c038:	b922      	cbnz	r2, 800c044 <quorem+0xea>
 800c03a:	3b04      	subs	r3, #4
 800c03c:	429d      	cmp	r5, r3
 800c03e:	461a      	mov	r2, r3
 800c040:	d30b      	bcc.n	800c05a <quorem+0x100>
 800c042:	613c      	str	r4, [r7, #16]
 800c044:	3601      	adds	r6, #1
 800c046:	4630      	mov	r0, r6
 800c048:	b003      	add	sp, #12
 800c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04e:	6812      	ldr	r2, [r2, #0]
 800c050:	3b04      	subs	r3, #4
 800c052:	2a00      	cmp	r2, #0
 800c054:	d1cb      	bne.n	800bfee <quorem+0x94>
 800c056:	3c01      	subs	r4, #1
 800c058:	e7c6      	b.n	800bfe8 <quorem+0x8e>
 800c05a:	6812      	ldr	r2, [r2, #0]
 800c05c:	3b04      	subs	r3, #4
 800c05e:	2a00      	cmp	r2, #0
 800c060:	d1ef      	bne.n	800c042 <quorem+0xe8>
 800c062:	3c01      	subs	r4, #1
 800c064:	e7ea      	b.n	800c03c <quorem+0xe2>
 800c066:	2000      	movs	r0, #0
 800c068:	e7ee      	b.n	800c048 <quorem+0xee>
 800c06a:	0000      	movs	r0, r0
 800c06c:	0000      	movs	r0, r0
	...

0800c070 <_dtoa_r>:
 800c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	69c7      	ldr	r7, [r0, #28]
 800c076:	b099      	sub	sp, #100	@ 0x64
 800c078:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c07c:	ec55 4b10 	vmov	r4, r5, d0
 800c080:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c082:	9109      	str	r1, [sp, #36]	@ 0x24
 800c084:	4683      	mov	fp, r0
 800c086:	920e      	str	r2, [sp, #56]	@ 0x38
 800c088:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c08a:	b97f      	cbnz	r7, 800c0ac <_dtoa_r+0x3c>
 800c08c:	2010      	movs	r0, #16
 800c08e:	f000 fdfd 	bl	800cc8c <malloc>
 800c092:	4602      	mov	r2, r0
 800c094:	f8cb 001c 	str.w	r0, [fp, #28]
 800c098:	b920      	cbnz	r0, 800c0a4 <_dtoa_r+0x34>
 800c09a:	4ba7      	ldr	r3, [pc, #668]	@ (800c338 <_dtoa_r+0x2c8>)
 800c09c:	21ef      	movs	r1, #239	@ 0xef
 800c09e:	48a7      	ldr	r0, [pc, #668]	@ (800c33c <_dtoa_r+0x2cc>)
 800c0a0:	f001 fc68 	bl	800d974 <__assert_func>
 800c0a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c0a8:	6007      	str	r7, [r0, #0]
 800c0aa:	60c7      	str	r7, [r0, #12]
 800c0ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0b0:	6819      	ldr	r1, [r3, #0]
 800c0b2:	b159      	cbz	r1, 800c0cc <_dtoa_r+0x5c>
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	604a      	str	r2, [r1, #4]
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	4093      	lsls	r3, r2
 800c0bc:	608b      	str	r3, [r1, #8]
 800c0be:	4658      	mov	r0, fp
 800c0c0:	f000 feda 	bl	800ce78 <_Bfree>
 800c0c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	601a      	str	r2, [r3, #0]
 800c0cc:	1e2b      	subs	r3, r5, #0
 800c0ce:	bfb9      	ittee	lt
 800c0d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c0d4:	9303      	strlt	r3, [sp, #12]
 800c0d6:	2300      	movge	r3, #0
 800c0d8:	6033      	strge	r3, [r6, #0]
 800c0da:	9f03      	ldr	r7, [sp, #12]
 800c0dc:	4b98      	ldr	r3, [pc, #608]	@ (800c340 <_dtoa_r+0x2d0>)
 800c0de:	bfbc      	itt	lt
 800c0e0:	2201      	movlt	r2, #1
 800c0e2:	6032      	strlt	r2, [r6, #0]
 800c0e4:	43bb      	bics	r3, r7
 800c0e6:	d112      	bne.n	800c10e <_dtoa_r+0x9e>
 800c0e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c0ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c0ee:	6013      	str	r3, [r2, #0]
 800c0f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0f4:	4323      	orrs	r3, r4
 800c0f6:	f000 854d 	beq.w	800cb94 <_dtoa_r+0xb24>
 800c0fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c354 <_dtoa_r+0x2e4>
 800c100:	2b00      	cmp	r3, #0
 800c102:	f000 854f 	beq.w	800cba4 <_dtoa_r+0xb34>
 800c106:	f10a 0303 	add.w	r3, sl, #3
 800c10a:	f000 bd49 	b.w	800cba0 <_dtoa_r+0xb30>
 800c10e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c112:	2200      	movs	r2, #0
 800c114:	ec51 0b17 	vmov	r0, r1, d7
 800c118:	2300      	movs	r3, #0
 800c11a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c11e:	f7f4 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c122:	4680      	mov	r8, r0
 800c124:	b158      	cbz	r0, 800c13e <_dtoa_r+0xce>
 800c126:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c128:	2301      	movs	r3, #1
 800c12a:	6013      	str	r3, [r2, #0]
 800c12c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c12e:	b113      	cbz	r3, 800c136 <_dtoa_r+0xc6>
 800c130:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c132:	4b84      	ldr	r3, [pc, #528]	@ (800c344 <_dtoa_r+0x2d4>)
 800c134:	6013      	str	r3, [r2, #0]
 800c136:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c358 <_dtoa_r+0x2e8>
 800c13a:	f000 bd33 	b.w	800cba4 <_dtoa_r+0xb34>
 800c13e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c142:	aa16      	add	r2, sp, #88	@ 0x58
 800c144:	a917      	add	r1, sp, #92	@ 0x5c
 800c146:	4658      	mov	r0, fp
 800c148:	f001 f980 	bl	800d44c <__d2b>
 800c14c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c150:	4681      	mov	r9, r0
 800c152:	2e00      	cmp	r6, #0
 800c154:	d077      	beq.n	800c246 <_dtoa_r+0x1d6>
 800c156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c158:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c15c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c164:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c168:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c16c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c170:	4619      	mov	r1, r3
 800c172:	2200      	movs	r2, #0
 800c174:	4b74      	ldr	r3, [pc, #464]	@ (800c348 <_dtoa_r+0x2d8>)
 800c176:	f7f4 f887 	bl	8000288 <__aeabi_dsub>
 800c17a:	a369      	add	r3, pc, #420	@ (adr r3, 800c320 <_dtoa_r+0x2b0>)
 800c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c180:	f7f4 fa3a 	bl	80005f8 <__aeabi_dmul>
 800c184:	a368      	add	r3, pc, #416	@ (adr r3, 800c328 <_dtoa_r+0x2b8>)
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	f7f4 f87f 	bl	800028c <__adddf3>
 800c18e:	4604      	mov	r4, r0
 800c190:	4630      	mov	r0, r6
 800c192:	460d      	mov	r5, r1
 800c194:	f7f4 f9c6 	bl	8000524 <__aeabi_i2d>
 800c198:	a365      	add	r3, pc, #404	@ (adr r3, 800c330 <_dtoa_r+0x2c0>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	f7f4 fa2b 	bl	80005f8 <__aeabi_dmul>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	f7f4 f86f 	bl	800028c <__adddf3>
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	460d      	mov	r5, r1
 800c1b2:	f7f4 fcd1 	bl	8000b58 <__aeabi_d2iz>
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	4607      	mov	r7, r0
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	f7f4 fc8c 	bl	8000adc <__aeabi_dcmplt>
 800c1c4:	b140      	cbz	r0, 800c1d8 <_dtoa_r+0x168>
 800c1c6:	4638      	mov	r0, r7
 800c1c8:	f7f4 f9ac 	bl	8000524 <__aeabi_i2d>
 800c1cc:	4622      	mov	r2, r4
 800c1ce:	462b      	mov	r3, r5
 800c1d0:	f7f4 fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1d4:	b900      	cbnz	r0, 800c1d8 <_dtoa_r+0x168>
 800c1d6:	3f01      	subs	r7, #1
 800c1d8:	2f16      	cmp	r7, #22
 800c1da:	d851      	bhi.n	800c280 <_dtoa_r+0x210>
 800c1dc:	4b5b      	ldr	r3, [pc, #364]	@ (800c34c <_dtoa_r+0x2dc>)
 800c1de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1ea:	f7f4 fc77 	bl	8000adc <__aeabi_dcmplt>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d048      	beq.n	800c284 <_dtoa_r+0x214>
 800c1f2:	3f01      	subs	r7, #1
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c1f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c1fa:	1b9b      	subs	r3, r3, r6
 800c1fc:	1e5a      	subs	r2, r3, #1
 800c1fe:	bf44      	itt	mi
 800c200:	f1c3 0801 	rsbmi	r8, r3, #1
 800c204:	2300      	movmi	r3, #0
 800c206:	9208      	str	r2, [sp, #32]
 800c208:	bf54      	ite	pl
 800c20a:	f04f 0800 	movpl.w	r8, #0
 800c20e:	9308      	strmi	r3, [sp, #32]
 800c210:	2f00      	cmp	r7, #0
 800c212:	db39      	blt.n	800c288 <_dtoa_r+0x218>
 800c214:	9b08      	ldr	r3, [sp, #32]
 800c216:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c218:	443b      	add	r3, r7
 800c21a:	9308      	str	r3, [sp, #32]
 800c21c:	2300      	movs	r3, #0
 800c21e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c222:	2b09      	cmp	r3, #9
 800c224:	d864      	bhi.n	800c2f0 <_dtoa_r+0x280>
 800c226:	2b05      	cmp	r3, #5
 800c228:	bfc4      	itt	gt
 800c22a:	3b04      	subgt	r3, #4
 800c22c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c230:	f1a3 0302 	sub.w	r3, r3, #2
 800c234:	bfcc      	ite	gt
 800c236:	2400      	movgt	r4, #0
 800c238:	2401      	movle	r4, #1
 800c23a:	2b03      	cmp	r3, #3
 800c23c:	d863      	bhi.n	800c306 <_dtoa_r+0x296>
 800c23e:	e8df f003 	tbb	[pc, r3]
 800c242:	372a      	.short	0x372a
 800c244:	5535      	.short	0x5535
 800c246:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c24a:	441e      	add	r6, r3
 800c24c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c250:	2b20      	cmp	r3, #32
 800c252:	bfc1      	itttt	gt
 800c254:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c258:	409f      	lslgt	r7, r3
 800c25a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c25e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c262:	bfd6      	itet	le
 800c264:	f1c3 0320 	rsble	r3, r3, #32
 800c268:	ea47 0003 	orrgt.w	r0, r7, r3
 800c26c:	fa04 f003 	lslle.w	r0, r4, r3
 800c270:	f7f4 f948 	bl	8000504 <__aeabi_ui2d>
 800c274:	2201      	movs	r2, #1
 800c276:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c27a:	3e01      	subs	r6, #1
 800c27c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c27e:	e777      	b.n	800c170 <_dtoa_r+0x100>
 800c280:	2301      	movs	r3, #1
 800c282:	e7b8      	b.n	800c1f6 <_dtoa_r+0x186>
 800c284:	9012      	str	r0, [sp, #72]	@ 0x48
 800c286:	e7b7      	b.n	800c1f8 <_dtoa_r+0x188>
 800c288:	427b      	negs	r3, r7
 800c28a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c28c:	2300      	movs	r3, #0
 800c28e:	eba8 0807 	sub.w	r8, r8, r7
 800c292:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c294:	e7c4      	b.n	800c220 <_dtoa_r+0x1b0>
 800c296:	2300      	movs	r3, #0
 800c298:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c29a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	dc35      	bgt.n	800c30c <_dtoa_r+0x29c>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	9307      	str	r3, [sp, #28]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2aa:	e00b      	b.n	800c2c4 <_dtoa_r+0x254>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e7f3      	b.n	800c298 <_dtoa_r+0x228>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2b6:	18fb      	adds	r3, r7, r3
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	9307      	str	r3, [sp, #28]
 800c2c0:	bfb8      	it	lt
 800c2c2:	2301      	movlt	r3, #1
 800c2c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	2204      	movs	r2, #4
 800c2cc:	f102 0514 	add.w	r5, r2, #20
 800c2d0:	429d      	cmp	r5, r3
 800c2d2:	d91f      	bls.n	800c314 <_dtoa_r+0x2a4>
 800c2d4:	6041      	str	r1, [r0, #4]
 800c2d6:	4658      	mov	r0, fp
 800c2d8:	f000 fd8e 	bl	800cdf8 <_Balloc>
 800c2dc:	4682      	mov	sl, r0
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d13c      	bne.n	800c35c <_dtoa_r+0x2ec>
 800c2e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c350 <_dtoa_r+0x2e0>)
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c2ea:	e6d8      	b.n	800c09e <_dtoa_r+0x2e>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e7e0      	b.n	800c2b2 <_dtoa_r+0x242>
 800c2f0:	2401      	movs	r4, #1
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	9307      	str	r3, [sp, #28]
 800c300:	2200      	movs	r2, #0
 800c302:	2312      	movs	r3, #18
 800c304:	e7d0      	b.n	800c2a8 <_dtoa_r+0x238>
 800c306:	2301      	movs	r3, #1
 800c308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c30a:	e7f5      	b.n	800c2f8 <_dtoa_r+0x288>
 800c30c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	9307      	str	r3, [sp, #28]
 800c312:	e7d7      	b.n	800c2c4 <_dtoa_r+0x254>
 800c314:	3101      	adds	r1, #1
 800c316:	0052      	lsls	r2, r2, #1
 800c318:	e7d8      	b.n	800c2cc <_dtoa_r+0x25c>
 800c31a:	bf00      	nop
 800c31c:	f3af 8000 	nop.w
 800c320:	636f4361 	.word	0x636f4361
 800c324:	3fd287a7 	.word	0x3fd287a7
 800c328:	8b60c8b3 	.word	0x8b60c8b3
 800c32c:	3fc68a28 	.word	0x3fc68a28
 800c330:	509f79fb 	.word	0x509f79fb
 800c334:	3fd34413 	.word	0x3fd34413
 800c338:	0800e2e1 	.word	0x0800e2e1
 800c33c:	0800e2f8 	.word	0x0800e2f8
 800c340:	7ff00000 	.word	0x7ff00000
 800c344:	0800e2b1 	.word	0x0800e2b1
 800c348:	3ff80000 	.word	0x3ff80000
 800c34c:	0800e3f0 	.word	0x0800e3f0
 800c350:	0800e350 	.word	0x0800e350
 800c354:	0800e2dd 	.word	0x0800e2dd
 800c358:	0800e2b0 	.word	0x0800e2b0
 800c35c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c360:	6018      	str	r0, [r3, #0]
 800c362:	9b07      	ldr	r3, [sp, #28]
 800c364:	2b0e      	cmp	r3, #14
 800c366:	f200 80a4 	bhi.w	800c4b2 <_dtoa_r+0x442>
 800c36a:	2c00      	cmp	r4, #0
 800c36c:	f000 80a1 	beq.w	800c4b2 <_dtoa_r+0x442>
 800c370:	2f00      	cmp	r7, #0
 800c372:	dd33      	ble.n	800c3dc <_dtoa_r+0x36c>
 800c374:	4bad      	ldr	r3, [pc, #692]	@ (800c62c <_dtoa_r+0x5bc>)
 800c376:	f007 020f 	and.w	r2, r7, #15
 800c37a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c37e:	ed93 7b00 	vldr	d7, [r3]
 800c382:	05f8      	lsls	r0, r7, #23
 800c384:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c388:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c38c:	d516      	bpl.n	800c3bc <_dtoa_r+0x34c>
 800c38e:	4ba8      	ldr	r3, [pc, #672]	@ (800c630 <_dtoa_r+0x5c0>)
 800c390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c398:	f7f4 fa58 	bl	800084c <__aeabi_ddiv>
 800c39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3a0:	f004 040f 	and.w	r4, r4, #15
 800c3a4:	2603      	movs	r6, #3
 800c3a6:	4da2      	ldr	r5, [pc, #648]	@ (800c630 <_dtoa_r+0x5c0>)
 800c3a8:	b954      	cbnz	r4, 800c3c0 <_dtoa_r+0x350>
 800c3aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3b2:	f7f4 fa4b 	bl	800084c <__aeabi_ddiv>
 800c3b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3ba:	e028      	b.n	800c40e <_dtoa_r+0x39e>
 800c3bc:	2602      	movs	r6, #2
 800c3be:	e7f2      	b.n	800c3a6 <_dtoa_r+0x336>
 800c3c0:	07e1      	lsls	r1, r4, #31
 800c3c2:	d508      	bpl.n	800c3d6 <_dtoa_r+0x366>
 800c3c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3cc:	f7f4 f914 	bl	80005f8 <__aeabi_dmul>
 800c3d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3d4:	3601      	adds	r6, #1
 800c3d6:	1064      	asrs	r4, r4, #1
 800c3d8:	3508      	adds	r5, #8
 800c3da:	e7e5      	b.n	800c3a8 <_dtoa_r+0x338>
 800c3dc:	f000 80d2 	beq.w	800c584 <_dtoa_r+0x514>
 800c3e0:	427c      	negs	r4, r7
 800c3e2:	4b92      	ldr	r3, [pc, #584]	@ (800c62c <_dtoa_r+0x5bc>)
 800c3e4:	4d92      	ldr	r5, [pc, #584]	@ (800c630 <_dtoa_r+0x5c0>)
 800c3e6:	f004 020f 	and.w	r2, r4, #15
 800c3ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3f6:	f7f4 f8ff 	bl	80005f8 <__aeabi_dmul>
 800c3fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3fe:	1124      	asrs	r4, r4, #4
 800c400:	2300      	movs	r3, #0
 800c402:	2602      	movs	r6, #2
 800c404:	2c00      	cmp	r4, #0
 800c406:	f040 80b2 	bne.w	800c56e <_dtoa_r+0x4fe>
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1d3      	bne.n	800c3b6 <_dtoa_r+0x346>
 800c40e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c410:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c414:	2b00      	cmp	r3, #0
 800c416:	f000 80b7 	beq.w	800c588 <_dtoa_r+0x518>
 800c41a:	4b86      	ldr	r3, [pc, #536]	@ (800c634 <_dtoa_r+0x5c4>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	4620      	mov	r0, r4
 800c420:	4629      	mov	r1, r5
 800c422:	f7f4 fb5b 	bl	8000adc <__aeabi_dcmplt>
 800c426:	2800      	cmp	r0, #0
 800c428:	f000 80ae 	beq.w	800c588 <_dtoa_r+0x518>
 800c42c:	9b07      	ldr	r3, [sp, #28]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f000 80aa 	beq.w	800c588 <_dtoa_r+0x518>
 800c434:	9b00      	ldr	r3, [sp, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	dd37      	ble.n	800c4aa <_dtoa_r+0x43a>
 800c43a:	1e7b      	subs	r3, r7, #1
 800c43c:	9304      	str	r3, [sp, #16]
 800c43e:	4620      	mov	r0, r4
 800c440:	4b7d      	ldr	r3, [pc, #500]	@ (800c638 <_dtoa_r+0x5c8>)
 800c442:	2200      	movs	r2, #0
 800c444:	4629      	mov	r1, r5
 800c446:	f7f4 f8d7 	bl	80005f8 <__aeabi_dmul>
 800c44a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c44e:	9c00      	ldr	r4, [sp, #0]
 800c450:	3601      	adds	r6, #1
 800c452:	4630      	mov	r0, r6
 800c454:	f7f4 f866 	bl	8000524 <__aeabi_i2d>
 800c458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c45c:	f7f4 f8cc 	bl	80005f8 <__aeabi_dmul>
 800c460:	4b76      	ldr	r3, [pc, #472]	@ (800c63c <_dtoa_r+0x5cc>)
 800c462:	2200      	movs	r2, #0
 800c464:	f7f3 ff12 	bl	800028c <__adddf3>
 800c468:	4605      	mov	r5, r0
 800c46a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c46e:	2c00      	cmp	r4, #0
 800c470:	f040 808d 	bne.w	800c58e <_dtoa_r+0x51e>
 800c474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c478:	4b71      	ldr	r3, [pc, #452]	@ (800c640 <_dtoa_r+0x5d0>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	f7f3 ff04 	bl	8000288 <__aeabi_dsub>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c488:	462a      	mov	r2, r5
 800c48a:	4633      	mov	r3, r6
 800c48c:	f7f4 fb44 	bl	8000b18 <__aeabi_dcmpgt>
 800c490:	2800      	cmp	r0, #0
 800c492:	f040 828b 	bne.w	800c9ac <_dtoa_r+0x93c>
 800c496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c49a:	462a      	mov	r2, r5
 800c49c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c4a0:	f7f4 fb1c 	bl	8000adc <__aeabi_dcmplt>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	f040 8128 	bne.w	800c6fa <_dtoa_r+0x68a>
 800c4aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c4ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c4b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f2c0 815a 	blt.w	800c76e <_dtoa_r+0x6fe>
 800c4ba:	2f0e      	cmp	r7, #14
 800c4bc:	f300 8157 	bgt.w	800c76e <_dtoa_r+0x6fe>
 800c4c0:	4b5a      	ldr	r3, [pc, #360]	@ (800c62c <_dtoa_r+0x5bc>)
 800c4c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c4c6:	ed93 7b00 	vldr	d7, [r3]
 800c4ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	ed8d 7b00 	vstr	d7, [sp]
 800c4d2:	da03      	bge.n	800c4dc <_dtoa_r+0x46c>
 800c4d4:	9b07      	ldr	r3, [sp, #28]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f340 8101 	ble.w	800c6de <_dtoa_r+0x66e>
 800c4dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4e0:	4656      	mov	r6, sl
 800c4e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	f7f4 f9af 	bl	800084c <__aeabi_ddiv>
 800c4ee:	f7f4 fb33 	bl	8000b58 <__aeabi_d2iz>
 800c4f2:	4680      	mov	r8, r0
 800c4f4:	f7f4 f816 	bl	8000524 <__aeabi_i2d>
 800c4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4fc:	f7f4 f87c 	bl	80005f8 <__aeabi_dmul>
 800c500:	4602      	mov	r2, r0
 800c502:	460b      	mov	r3, r1
 800c504:	4620      	mov	r0, r4
 800c506:	4629      	mov	r1, r5
 800c508:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c50c:	f7f3 febc 	bl	8000288 <__aeabi_dsub>
 800c510:	f806 4b01 	strb.w	r4, [r6], #1
 800c514:	9d07      	ldr	r5, [sp, #28]
 800c516:	eba6 040a 	sub.w	r4, r6, sl
 800c51a:	42a5      	cmp	r5, r4
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	f040 8117 	bne.w	800c752 <_dtoa_r+0x6e2>
 800c524:	f7f3 feb2 	bl	800028c <__adddf3>
 800c528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c52c:	4604      	mov	r4, r0
 800c52e:	460d      	mov	r5, r1
 800c530:	f7f4 faf2 	bl	8000b18 <__aeabi_dcmpgt>
 800c534:	2800      	cmp	r0, #0
 800c536:	f040 80f9 	bne.w	800c72c <_dtoa_r+0x6bc>
 800c53a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c53e:	4620      	mov	r0, r4
 800c540:	4629      	mov	r1, r5
 800c542:	f7f4 fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c546:	b118      	cbz	r0, 800c550 <_dtoa_r+0x4e0>
 800c548:	f018 0f01 	tst.w	r8, #1
 800c54c:	f040 80ee 	bne.w	800c72c <_dtoa_r+0x6bc>
 800c550:	4649      	mov	r1, r9
 800c552:	4658      	mov	r0, fp
 800c554:	f000 fc90 	bl	800ce78 <_Bfree>
 800c558:	2300      	movs	r3, #0
 800c55a:	7033      	strb	r3, [r6, #0]
 800c55c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c55e:	3701      	adds	r7, #1
 800c560:	601f      	str	r7, [r3, #0]
 800c562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c564:	2b00      	cmp	r3, #0
 800c566:	f000 831d 	beq.w	800cba4 <_dtoa_r+0xb34>
 800c56a:	601e      	str	r6, [r3, #0]
 800c56c:	e31a      	b.n	800cba4 <_dtoa_r+0xb34>
 800c56e:	07e2      	lsls	r2, r4, #31
 800c570:	d505      	bpl.n	800c57e <_dtoa_r+0x50e>
 800c572:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c576:	f7f4 f83f 	bl	80005f8 <__aeabi_dmul>
 800c57a:	3601      	adds	r6, #1
 800c57c:	2301      	movs	r3, #1
 800c57e:	1064      	asrs	r4, r4, #1
 800c580:	3508      	adds	r5, #8
 800c582:	e73f      	b.n	800c404 <_dtoa_r+0x394>
 800c584:	2602      	movs	r6, #2
 800c586:	e742      	b.n	800c40e <_dtoa_r+0x39e>
 800c588:	9c07      	ldr	r4, [sp, #28]
 800c58a:	9704      	str	r7, [sp, #16]
 800c58c:	e761      	b.n	800c452 <_dtoa_r+0x3e2>
 800c58e:	4b27      	ldr	r3, [pc, #156]	@ (800c62c <_dtoa_r+0x5bc>)
 800c590:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c596:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c59a:	4454      	add	r4, sl
 800c59c:	2900      	cmp	r1, #0
 800c59e:	d053      	beq.n	800c648 <_dtoa_r+0x5d8>
 800c5a0:	4928      	ldr	r1, [pc, #160]	@ (800c644 <_dtoa_r+0x5d4>)
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	f7f4 f952 	bl	800084c <__aeabi_ddiv>
 800c5a8:	4633      	mov	r3, r6
 800c5aa:	462a      	mov	r2, r5
 800c5ac:	f7f3 fe6c 	bl	8000288 <__aeabi_dsub>
 800c5b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5b4:	4656      	mov	r6, sl
 800c5b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ba:	f7f4 facd 	bl	8000b58 <__aeabi_d2iz>
 800c5be:	4605      	mov	r5, r0
 800c5c0:	f7f3 ffb0 	bl	8000524 <__aeabi_i2d>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5cc:	f7f3 fe5c 	bl	8000288 <__aeabi_dsub>
 800c5d0:	3530      	adds	r5, #48	@ 0x30
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5da:	f806 5b01 	strb.w	r5, [r6], #1
 800c5de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5e2:	f7f4 fa7b 	bl	8000adc <__aeabi_dcmplt>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d171      	bne.n	800c6ce <_dtoa_r+0x65e>
 800c5ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5ee:	4911      	ldr	r1, [pc, #68]	@ (800c634 <_dtoa_r+0x5c4>)
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	f7f3 fe49 	bl	8000288 <__aeabi_dsub>
 800c5f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5fa:	f7f4 fa6f 	bl	8000adc <__aeabi_dcmplt>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	f040 8095 	bne.w	800c72e <_dtoa_r+0x6be>
 800c604:	42a6      	cmp	r6, r4
 800c606:	f43f af50 	beq.w	800c4aa <_dtoa_r+0x43a>
 800c60a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c60e:	4b0a      	ldr	r3, [pc, #40]	@ (800c638 <_dtoa_r+0x5c8>)
 800c610:	2200      	movs	r2, #0
 800c612:	f7f3 fff1 	bl	80005f8 <__aeabi_dmul>
 800c616:	4b08      	ldr	r3, [pc, #32]	@ (800c638 <_dtoa_r+0x5c8>)
 800c618:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c61c:	2200      	movs	r2, #0
 800c61e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c622:	f7f3 ffe9 	bl	80005f8 <__aeabi_dmul>
 800c626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c62a:	e7c4      	b.n	800c5b6 <_dtoa_r+0x546>
 800c62c:	0800e3f0 	.word	0x0800e3f0
 800c630:	0800e3c8 	.word	0x0800e3c8
 800c634:	3ff00000 	.word	0x3ff00000
 800c638:	40240000 	.word	0x40240000
 800c63c:	401c0000 	.word	0x401c0000
 800c640:	40140000 	.word	0x40140000
 800c644:	3fe00000 	.word	0x3fe00000
 800c648:	4631      	mov	r1, r6
 800c64a:	4628      	mov	r0, r5
 800c64c:	f7f3 ffd4 	bl	80005f8 <__aeabi_dmul>
 800c650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c654:	9415      	str	r4, [sp, #84]	@ 0x54
 800c656:	4656      	mov	r6, sl
 800c658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c65c:	f7f4 fa7c 	bl	8000b58 <__aeabi_d2iz>
 800c660:	4605      	mov	r5, r0
 800c662:	f7f3 ff5f 	bl	8000524 <__aeabi_i2d>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c66e:	f7f3 fe0b 	bl	8000288 <__aeabi_dsub>
 800c672:	3530      	adds	r5, #48	@ 0x30
 800c674:	f806 5b01 	strb.w	r5, [r6], #1
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	42a6      	cmp	r6, r4
 800c67e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c682:	f04f 0200 	mov.w	r2, #0
 800c686:	d124      	bne.n	800c6d2 <_dtoa_r+0x662>
 800c688:	4bac      	ldr	r3, [pc, #688]	@ (800c93c <_dtoa_r+0x8cc>)
 800c68a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c68e:	f7f3 fdfd 	bl	800028c <__adddf3>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c69a:	f7f4 fa3d 	bl	8000b18 <__aeabi_dcmpgt>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d145      	bne.n	800c72e <_dtoa_r+0x6be>
 800c6a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6a6:	49a5      	ldr	r1, [pc, #660]	@ (800c93c <_dtoa_r+0x8cc>)
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	f7f3 fded 	bl	8000288 <__aeabi_dsub>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6b6:	f7f4 fa11 	bl	8000adc <__aeabi_dcmplt>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	f43f aef5 	beq.w	800c4aa <_dtoa_r+0x43a>
 800c6c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c6c2:	1e73      	subs	r3, r6, #1
 800c6c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c6c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6ca:	2b30      	cmp	r3, #48	@ 0x30
 800c6cc:	d0f8      	beq.n	800c6c0 <_dtoa_r+0x650>
 800c6ce:	9f04      	ldr	r7, [sp, #16]
 800c6d0:	e73e      	b.n	800c550 <_dtoa_r+0x4e0>
 800c6d2:	4b9b      	ldr	r3, [pc, #620]	@ (800c940 <_dtoa_r+0x8d0>)
 800c6d4:	f7f3 ff90 	bl	80005f8 <__aeabi_dmul>
 800c6d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6dc:	e7bc      	b.n	800c658 <_dtoa_r+0x5e8>
 800c6de:	d10c      	bne.n	800c6fa <_dtoa_r+0x68a>
 800c6e0:	4b98      	ldr	r3, [pc, #608]	@ (800c944 <_dtoa_r+0x8d4>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6e8:	f7f3 ff86 	bl	80005f8 <__aeabi_dmul>
 800c6ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6f0:	f7f4 fa08 	bl	8000b04 <__aeabi_dcmpge>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	f000 8157 	beq.w	800c9a8 <_dtoa_r+0x938>
 800c6fa:	2400      	movs	r4, #0
 800c6fc:	4625      	mov	r5, r4
 800c6fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c700:	43db      	mvns	r3, r3
 800c702:	9304      	str	r3, [sp, #16]
 800c704:	4656      	mov	r6, sl
 800c706:	2700      	movs	r7, #0
 800c708:	4621      	mov	r1, r4
 800c70a:	4658      	mov	r0, fp
 800c70c:	f000 fbb4 	bl	800ce78 <_Bfree>
 800c710:	2d00      	cmp	r5, #0
 800c712:	d0dc      	beq.n	800c6ce <_dtoa_r+0x65e>
 800c714:	b12f      	cbz	r7, 800c722 <_dtoa_r+0x6b2>
 800c716:	42af      	cmp	r7, r5
 800c718:	d003      	beq.n	800c722 <_dtoa_r+0x6b2>
 800c71a:	4639      	mov	r1, r7
 800c71c:	4658      	mov	r0, fp
 800c71e:	f000 fbab 	bl	800ce78 <_Bfree>
 800c722:	4629      	mov	r1, r5
 800c724:	4658      	mov	r0, fp
 800c726:	f000 fba7 	bl	800ce78 <_Bfree>
 800c72a:	e7d0      	b.n	800c6ce <_dtoa_r+0x65e>
 800c72c:	9704      	str	r7, [sp, #16]
 800c72e:	4633      	mov	r3, r6
 800c730:	461e      	mov	r6, r3
 800c732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c736:	2a39      	cmp	r2, #57	@ 0x39
 800c738:	d107      	bne.n	800c74a <_dtoa_r+0x6da>
 800c73a:	459a      	cmp	sl, r3
 800c73c:	d1f8      	bne.n	800c730 <_dtoa_r+0x6c0>
 800c73e:	9a04      	ldr	r2, [sp, #16]
 800c740:	3201      	adds	r2, #1
 800c742:	9204      	str	r2, [sp, #16]
 800c744:	2230      	movs	r2, #48	@ 0x30
 800c746:	f88a 2000 	strb.w	r2, [sl]
 800c74a:	781a      	ldrb	r2, [r3, #0]
 800c74c:	3201      	adds	r2, #1
 800c74e:	701a      	strb	r2, [r3, #0]
 800c750:	e7bd      	b.n	800c6ce <_dtoa_r+0x65e>
 800c752:	4b7b      	ldr	r3, [pc, #492]	@ (800c940 <_dtoa_r+0x8d0>)
 800c754:	2200      	movs	r2, #0
 800c756:	f7f3 ff4f 	bl	80005f8 <__aeabi_dmul>
 800c75a:	2200      	movs	r2, #0
 800c75c:	2300      	movs	r3, #0
 800c75e:	4604      	mov	r4, r0
 800c760:	460d      	mov	r5, r1
 800c762:	f7f4 f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c766:	2800      	cmp	r0, #0
 800c768:	f43f aebb 	beq.w	800c4e2 <_dtoa_r+0x472>
 800c76c:	e6f0      	b.n	800c550 <_dtoa_r+0x4e0>
 800c76e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c770:	2a00      	cmp	r2, #0
 800c772:	f000 80db 	beq.w	800c92c <_dtoa_r+0x8bc>
 800c776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c778:	2a01      	cmp	r2, #1
 800c77a:	f300 80bf 	bgt.w	800c8fc <_dtoa_r+0x88c>
 800c77e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c780:	2a00      	cmp	r2, #0
 800c782:	f000 80b7 	beq.w	800c8f4 <_dtoa_r+0x884>
 800c786:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c78a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c78c:	4646      	mov	r6, r8
 800c78e:	9a08      	ldr	r2, [sp, #32]
 800c790:	2101      	movs	r1, #1
 800c792:	441a      	add	r2, r3
 800c794:	4658      	mov	r0, fp
 800c796:	4498      	add	r8, r3
 800c798:	9208      	str	r2, [sp, #32]
 800c79a:	f000 fc21 	bl	800cfe0 <__i2b>
 800c79e:	4605      	mov	r5, r0
 800c7a0:	b15e      	cbz	r6, 800c7ba <_dtoa_r+0x74a>
 800c7a2:	9b08      	ldr	r3, [sp, #32]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dd08      	ble.n	800c7ba <_dtoa_r+0x74a>
 800c7a8:	42b3      	cmp	r3, r6
 800c7aa:	9a08      	ldr	r2, [sp, #32]
 800c7ac:	bfa8      	it	ge
 800c7ae:	4633      	movge	r3, r6
 800c7b0:	eba8 0803 	sub.w	r8, r8, r3
 800c7b4:	1af6      	subs	r6, r6, r3
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	9308      	str	r3, [sp, #32]
 800c7ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7bc:	b1f3      	cbz	r3, 800c7fc <_dtoa_r+0x78c>
 800c7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 80b7 	beq.w	800c934 <_dtoa_r+0x8c4>
 800c7c6:	b18c      	cbz	r4, 800c7ec <_dtoa_r+0x77c>
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	4622      	mov	r2, r4
 800c7cc:	4658      	mov	r0, fp
 800c7ce:	f000 fcc7 	bl	800d160 <__pow5mult>
 800c7d2:	464a      	mov	r2, r9
 800c7d4:	4601      	mov	r1, r0
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	4658      	mov	r0, fp
 800c7da:	f000 fc17 	bl	800d00c <__multiply>
 800c7de:	4649      	mov	r1, r9
 800c7e0:	9004      	str	r0, [sp, #16]
 800c7e2:	4658      	mov	r0, fp
 800c7e4:	f000 fb48 	bl	800ce78 <_Bfree>
 800c7e8:	9b04      	ldr	r3, [sp, #16]
 800c7ea:	4699      	mov	r9, r3
 800c7ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7ee:	1b1a      	subs	r2, r3, r4
 800c7f0:	d004      	beq.n	800c7fc <_dtoa_r+0x78c>
 800c7f2:	4649      	mov	r1, r9
 800c7f4:	4658      	mov	r0, fp
 800c7f6:	f000 fcb3 	bl	800d160 <__pow5mult>
 800c7fa:	4681      	mov	r9, r0
 800c7fc:	2101      	movs	r1, #1
 800c7fe:	4658      	mov	r0, fp
 800c800:	f000 fbee 	bl	800cfe0 <__i2b>
 800c804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c806:	4604      	mov	r4, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 81cf 	beq.w	800cbac <_dtoa_r+0xb3c>
 800c80e:	461a      	mov	r2, r3
 800c810:	4601      	mov	r1, r0
 800c812:	4658      	mov	r0, fp
 800c814:	f000 fca4 	bl	800d160 <__pow5mult>
 800c818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	4604      	mov	r4, r0
 800c81e:	f300 8095 	bgt.w	800c94c <_dtoa_r+0x8dc>
 800c822:	9b02      	ldr	r3, [sp, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	f040 8087 	bne.w	800c938 <_dtoa_r+0x8c8>
 800c82a:	9b03      	ldr	r3, [sp, #12]
 800c82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c830:	2b00      	cmp	r3, #0
 800c832:	f040 8089 	bne.w	800c948 <_dtoa_r+0x8d8>
 800c836:	9b03      	ldr	r3, [sp, #12]
 800c838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c83c:	0d1b      	lsrs	r3, r3, #20
 800c83e:	051b      	lsls	r3, r3, #20
 800c840:	b12b      	cbz	r3, 800c84e <_dtoa_r+0x7de>
 800c842:	9b08      	ldr	r3, [sp, #32]
 800c844:	3301      	adds	r3, #1
 800c846:	9308      	str	r3, [sp, #32]
 800c848:	f108 0801 	add.w	r8, r8, #1
 800c84c:	2301      	movs	r3, #1
 800c84e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 81b0 	beq.w	800cbb8 <_dtoa_r+0xb48>
 800c858:	6923      	ldr	r3, [r4, #16]
 800c85a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c85e:	6918      	ldr	r0, [r3, #16]
 800c860:	f000 fb72 	bl	800cf48 <__hi0bits>
 800c864:	f1c0 0020 	rsb	r0, r0, #32
 800c868:	9b08      	ldr	r3, [sp, #32]
 800c86a:	4418      	add	r0, r3
 800c86c:	f010 001f 	ands.w	r0, r0, #31
 800c870:	d077      	beq.n	800c962 <_dtoa_r+0x8f2>
 800c872:	f1c0 0320 	rsb	r3, r0, #32
 800c876:	2b04      	cmp	r3, #4
 800c878:	dd6b      	ble.n	800c952 <_dtoa_r+0x8e2>
 800c87a:	9b08      	ldr	r3, [sp, #32]
 800c87c:	f1c0 001c 	rsb	r0, r0, #28
 800c880:	4403      	add	r3, r0
 800c882:	4480      	add	r8, r0
 800c884:	4406      	add	r6, r0
 800c886:	9308      	str	r3, [sp, #32]
 800c888:	f1b8 0f00 	cmp.w	r8, #0
 800c88c:	dd05      	ble.n	800c89a <_dtoa_r+0x82a>
 800c88e:	4649      	mov	r1, r9
 800c890:	4642      	mov	r2, r8
 800c892:	4658      	mov	r0, fp
 800c894:	f000 fcbe 	bl	800d214 <__lshift>
 800c898:	4681      	mov	r9, r0
 800c89a:	9b08      	ldr	r3, [sp, #32]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	dd05      	ble.n	800c8ac <_dtoa_r+0x83c>
 800c8a0:	4621      	mov	r1, r4
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	4658      	mov	r0, fp
 800c8a6:	f000 fcb5 	bl	800d214 <__lshift>
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d059      	beq.n	800c966 <_dtoa_r+0x8f6>
 800c8b2:	4621      	mov	r1, r4
 800c8b4:	4648      	mov	r0, r9
 800c8b6:	f000 fd19 	bl	800d2ec <__mcmp>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	da53      	bge.n	800c966 <_dtoa_r+0x8f6>
 800c8be:	1e7b      	subs	r3, r7, #1
 800c8c0:	9304      	str	r3, [sp, #16]
 800c8c2:	4649      	mov	r1, r9
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	220a      	movs	r2, #10
 800c8c8:	4658      	mov	r0, fp
 800c8ca:	f000 faf7 	bl	800cebc <__multadd>
 800c8ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8d0:	4681      	mov	r9, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f000 8172 	beq.w	800cbbc <_dtoa_r+0xb4c>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	4629      	mov	r1, r5
 800c8dc:	220a      	movs	r2, #10
 800c8de:	4658      	mov	r0, fp
 800c8e0:	f000 faec 	bl	800cebc <__multadd>
 800c8e4:	9b00      	ldr	r3, [sp, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	4605      	mov	r5, r0
 800c8ea:	dc67      	bgt.n	800c9bc <_dtoa_r+0x94c>
 800c8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	dc41      	bgt.n	800c976 <_dtoa_r+0x906>
 800c8f2:	e063      	b.n	800c9bc <_dtoa_r+0x94c>
 800c8f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c8f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c8fa:	e746      	b.n	800c78a <_dtoa_r+0x71a>
 800c8fc:	9b07      	ldr	r3, [sp, #28]
 800c8fe:	1e5c      	subs	r4, r3, #1
 800c900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c902:	42a3      	cmp	r3, r4
 800c904:	bfbf      	itttt	lt
 800c906:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c908:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c90a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c90c:	1ae3      	sublt	r3, r4, r3
 800c90e:	bfb4      	ite	lt
 800c910:	18d2      	addlt	r2, r2, r3
 800c912:	1b1c      	subge	r4, r3, r4
 800c914:	9b07      	ldr	r3, [sp, #28]
 800c916:	bfbc      	itt	lt
 800c918:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c91a:	2400      	movlt	r4, #0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bfb5      	itete	lt
 800c920:	eba8 0603 	sublt.w	r6, r8, r3
 800c924:	9b07      	ldrge	r3, [sp, #28]
 800c926:	2300      	movlt	r3, #0
 800c928:	4646      	movge	r6, r8
 800c92a:	e730      	b.n	800c78e <_dtoa_r+0x71e>
 800c92c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c92e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c930:	4646      	mov	r6, r8
 800c932:	e735      	b.n	800c7a0 <_dtoa_r+0x730>
 800c934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c936:	e75c      	b.n	800c7f2 <_dtoa_r+0x782>
 800c938:	2300      	movs	r3, #0
 800c93a:	e788      	b.n	800c84e <_dtoa_r+0x7de>
 800c93c:	3fe00000 	.word	0x3fe00000
 800c940:	40240000 	.word	0x40240000
 800c944:	40140000 	.word	0x40140000
 800c948:	9b02      	ldr	r3, [sp, #8]
 800c94a:	e780      	b.n	800c84e <_dtoa_r+0x7de>
 800c94c:	2300      	movs	r3, #0
 800c94e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c950:	e782      	b.n	800c858 <_dtoa_r+0x7e8>
 800c952:	d099      	beq.n	800c888 <_dtoa_r+0x818>
 800c954:	9a08      	ldr	r2, [sp, #32]
 800c956:	331c      	adds	r3, #28
 800c958:	441a      	add	r2, r3
 800c95a:	4498      	add	r8, r3
 800c95c:	441e      	add	r6, r3
 800c95e:	9208      	str	r2, [sp, #32]
 800c960:	e792      	b.n	800c888 <_dtoa_r+0x818>
 800c962:	4603      	mov	r3, r0
 800c964:	e7f6      	b.n	800c954 <_dtoa_r+0x8e4>
 800c966:	9b07      	ldr	r3, [sp, #28]
 800c968:	9704      	str	r7, [sp, #16]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dc20      	bgt.n	800c9b0 <_dtoa_r+0x940>
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c972:	2b02      	cmp	r3, #2
 800c974:	dd1e      	ble.n	800c9b4 <_dtoa_r+0x944>
 800c976:	9b00      	ldr	r3, [sp, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f47f aec0 	bne.w	800c6fe <_dtoa_r+0x68e>
 800c97e:	4621      	mov	r1, r4
 800c980:	2205      	movs	r2, #5
 800c982:	4658      	mov	r0, fp
 800c984:	f000 fa9a 	bl	800cebc <__multadd>
 800c988:	4601      	mov	r1, r0
 800c98a:	4604      	mov	r4, r0
 800c98c:	4648      	mov	r0, r9
 800c98e:	f000 fcad 	bl	800d2ec <__mcmp>
 800c992:	2800      	cmp	r0, #0
 800c994:	f77f aeb3 	ble.w	800c6fe <_dtoa_r+0x68e>
 800c998:	4656      	mov	r6, sl
 800c99a:	2331      	movs	r3, #49	@ 0x31
 800c99c:	f806 3b01 	strb.w	r3, [r6], #1
 800c9a0:	9b04      	ldr	r3, [sp, #16]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	9304      	str	r3, [sp, #16]
 800c9a6:	e6ae      	b.n	800c706 <_dtoa_r+0x696>
 800c9a8:	9c07      	ldr	r4, [sp, #28]
 800c9aa:	9704      	str	r7, [sp, #16]
 800c9ac:	4625      	mov	r5, r4
 800c9ae:	e7f3      	b.n	800c998 <_dtoa_r+0x928>
 800c9b0:	9b07      	ldr	r3, [sp, #28]
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 8104 	beq.w	800cbc4 <_dtoa_r+0xb54>
 800c9bc:	2e00      	cmp	r6, #0
 800c9be:	dd05      	ble.n	800c9cc <_dtoa_r+0x95c>
 800c9c0:	4629      	mov	r1, r5
 800c9c2:	4632      	mov	r2, r6
 800c9c4:	4658      	mov	r0, fp
 800c9c6:	f000 fc25 	bl	800d214 <__lshift>
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d05a      	beq.n	800ca88 <_dtoa_r+0xa18>
 800c9d2:	6869      	ldr	r1, [r5, #4]
 800c9d4:	4658      	mov	r0, fp
 800c9d6:	f000 fa0f 	bl	800cdf8 <_Balloc>
 800c9da:	4606      	mov	r6, r0
 800c9dc:	b928      	cbnz	r0, 800c9ea <_dtoa_r+0x97a>
 800c9de:	4b84      	ldr	r3, [pc, #528]	@ (800cbf0 <_dtoa_r+0xb80>)
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c9e6:	f7ff bb5a 	b.w	800c09e <_dtoa_r+0x2e>
 800c9ea:	692a      	ldr	r2, [r5, #16]
 800c9ec:	3202      	adds	r2, #2
 800c9ee:	0092      	lsls	r2, r2, #2
 800c9f0:	f105 010c 	add.w	r1, r5, #12
 800c9f4:	300c      	adds	r0, #12
 800c9f6:	f000 ffaf 	bl	800d958 <memcpy>
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	4631      	mov	r1, r6
 800c9fe:	4658      	mov	r0, fp
 800ca00:	f000 fc08 	bl	800d214 <__lshift>
 800ca04:	f10a 0301 	add.w	r3, sl, #1
 800ca08:	9307      	str	r3, [sp, #28]
 800ca0a:	9b00      	ldr	r3, [sp, #0]
 800ca0c:	4453      	add	r3, sl
 800ca0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca10:	9b02      	ldr	r3, [sp, #8]
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	462f      	mov	r7, r5
 800ca18:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	9b07      	ldr	r3, [sp, #28]
 800ca1e:	4621      	mov	r1, r4
 800ca20:	3b01      	subs	r3, #1
 800ca22:	4648      	mov	r0, r9
 800ca24:	9300      	str	r3, [sp, #0]
 800ca26:	f7ff fa98 	bl	800bf5a <quorem>
 800ca2a:	4639      	mov	r1, r7
 800ca2c:	9002      	str	r0, [sp, #8]
 800ca2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca32:	4648      	mov	r0, r9
 800ca34:	f000 fc5a 	bl	800d2ec <__mcmp>
 800ca38:	462a      	mov	r2, r5
 800ca3a:	9008      	str	r0, [sp, #32]
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	4658      	mov	r0, fp
 800ca40:	f000 fc70 	bl	800d324 <__mdiff>
 800ca44:	68c2      	ldr	r2, [r0, #12]
 800ca46:	4606      	mov	r6, r0
 800ca48:	bb02      	cbnz	r2, 800ca8c <_dtoa_r+0xa1c>
 800ca4a:	4601      	mov	r1, r0
 800ca4c:	4648      	mov	r0, r9
 800ca4e:	f000 fc4d 	bl	800d2ec <__mcmp>
 800ca52:	4602      	mov	r2, r0
 800ca54:	4631      	mov	r1, r6
 800ca56:	4658      	mov	r0, fp
 800ca58:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca5a:	f000 fa0d 	bl	800ce78 <_Bfree>
 800ca5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca62:	9e07      	ldr	r6, [sp, #28]
 800ca64:	ea43 0102 	orr.w	r1, r3, r2
 800ca68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca6a:	4319      	orrs	r1, r3
 800ca6c:	d110      	bne.n	800ca90 <_dtoa_r+0xa20>
 800ca6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca72:	d029      	beq.n	800cac8 <_dtoa_r+0xa58>
 800ca74:	9b08      	ldr	r3, [sp, #32]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	dd02      	ble.n	800ca80 <_dtoa_r+0xa10>
 800ca7a:	9b02      	ldr	r3, [sp, #8]
 800ca7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ca80:	9b00      	ldr	r3, [sp, #0]
 800ca82:	f883 8000 	strb.w	r8, [r3]
 800ca86:	e63f      	b.n	800c708 <_dtoa_r+0x698>
 800ca88:	4628      	mov	r0, r5
 800ca8a:	e7bb      	b.n	800ca04 <_dtoa_r+0x994>
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	e7e1      	b.n	800ca54 <_dtoa_r+0x9e4>
 800ca90:	9b08      	ldr	r3, [sp, #32]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	db04      	blt.n	800caa0 <_dtoa_r+0xa30>
 800ca96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca98:	430b      	orrs	r3, r1
 800ca9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ca9c:	430b      	orrs	r3, r1
 800ca9e:	d120      	bne.n	800cae2 <_dtoa_r+0xa72>
 800caa0:	2a00      	cmp	r2, #0
 800caa2:	dded      	ble.n	800ca80 <_dtoa_r+0xa10>
 800caa4:	4649      	mov	r1, r9
 800caa6:	2201      	movs	r2, #1
 800caa8:	4658      	mov	r0, fp
 800caaa:	f000 fbb3 	bl	800d214 <__lshift>
 800caae:	4621      	mov	r1, r4
 800cab0:	4681      	mov	r9, r0
 800cab2:	f000 fc1b 	bl	800d2ec <__mcmp>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	dc03      	bgt.n	800cac2 <_dtoa_r+0xa52>
 800caba:	d1e1      	bne.n	800ca80 <_dtoa_r+0xa10>
 800cabc:	f018 0f01 	tst.w	r8, #1
 800cac0:	d0de      	beq.n	800ca80 <_dtoa_r+0xa10>
 800cac2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cac6:	d1d8      	bne.n	800ca7a <_dtoa_r+0xa0a>
 800cac8:	9a00      	ldr	r2, [sp, #0]
 800caca:	2339      	movs	r3, #57	@ 0x39
 800cacc:	7013      	strb	r3, [r2, #0]
 800cace:	4633      	mov	r3, r6
 800cad0:	461e      	mov	r6, r3
 800cad2:	3b01      	subs	r3, #1
 800cad4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cad8:	2a39      	cmp	r2, #57	@ 0x39
 800cada:	d052      	beq.n	800cb82 <_dtoa_r+0xb12>
 800cadc:	3201      	adds	r2, #1
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	e612      	b.n	800c708 <_dtoa_r+0x698>
 800cae2:	2a00      	cmp	r2, #0
 800cae4:	dd07      	ble.n	800caf6 <_dtoa_r+0xa86>
 800cae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800caea:	d0ed      	beq.n	800cac8 <_dtoa_r+0xa58>
 800caec:	9a00      	ldr	r2, [sp, #0]
 800caee:	f108 0301 	add.w	r3, r8, #1
 800caf2:	7013      	strb	r3, [r2, #0]
 800caf4:	e608      	b.n	800c708 <_dtoa_r+0x698>
 800caf6:	9b07      	ldr	r3, [sp, #28]
 800caf8:	9a07      	ldr	r2, [sp, #28]
 800cafa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cafe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d028      	beq.n	800cb56 <_dtoa_r+0xae6>
 800cb04:	4649      	mov	r1, r9
 800cb06:	2300      	movs	r3, #0
 800cb08:	220a      	movs	r2, #10
 800cb0a:	4658      	mov	r0, fp
 800cb0c:	f000 f9d6 	bl	800cebc <__multadd>
 800cb10:	42af      	cmp	r7, r5
 800cb12:	4681      	mov	r9, r0
 800cb14:	f04f 0300 	mov.w	r3, #0
 800cb18:	f04f 020a 	mov.w	r2, #10
 800cb1c:	4639      	mov	r1, r7
 800cb1e:	4658      	mov	r0, fp
 800cb20:	d107      	bne.n	800cb32 <_dtoa_r+0xac2>
 800cb22:	f000 f9cb 	bl	800cebc <__multadd>
 800cb26:	4607      	mov	r7, r0
 800cb28:	4605      	mov	r5, r0
 800cb2a:	9b07      	ldr	r3, [sp, #28]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	9307      	str	r3, [sp, #28]
 800cb30:	e774      	b.n	800ca1c <_dtoa_r+0x9ac>
 800cb32:	f000 f9c3 	bl	800cebc <__multadd>
 800cb36:	4629      	mov	r1, r5
 800cb38:	4607      	mov	r7, r0
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	220a      	movs	r2, #10
 800cb3e:	4658      	mov	r0, fp
 800cb40:	f000 f9bc 	bl	800cebc <__multadd>
 800cb44:	4605      	mov	r5, r0
 800cb46:	e7f0      	b.n	800cb2a <_dtoa_r+0xaba>
 800cb48:	9b00      	ldr	r3, [sp, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	bfcc      	ite	gt
 800cb4e:	461e      	movgt	r6, r3
 800cb50:	2601      	movle	r6, #1
 800cb52:	4456      	add	r6, sl
 800cb54:	2700      	movs	r7, #0
 800cb56:	4649      	mov	r1, r9
 800cb58:	2201      	movs	r2, #1
 800cb5a:	4658      	mov	r0, fp
 800cb5c:	f000 fb5a 	bl	800d214 <__lshift>
 800cb60:	4621      	mov	r1, r4
 800cb62:	4681      	mov	r9, r0
 800cb64:	f000 fbc2 	bl	800d2ec <__mcmp>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	dcb0      	bgt.n	800cace <_dtoa_r+0xa5e>
 800cb6c:	d102      	bne.n	800cb74 <_dtoa_r+0xb04>
 800cb6e:	f018 0f01 	tst.w	r8, #1
 800cb72:	d1ac      	bne.n	800cace <_dtoa_r+0xa5e>
 800cb74:	4633      	mov	r3, r6
 800cb76:	461e      	mov	r6, r3
 800cb78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb7c:	2a30      	cmp	r2, #48	@ 0x30
 800cb7e:	d0fa      	beq.n	800cb76 <_dtoa_r+0xb06>
 800cb80:	e5c2      	b.n	800c708 <_dtoa_r+0x698>
 800cb82:	459a      	cmp	sl, r3
 800cb84:	d1a4      	bne.n	800cad0 <_dtoa_r+0xa60>
 800cb86:	9b04      	ldr	r3, [sp, #16]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	9304      	str	r3, [sp, #16]
 800cb8c:	2331      	movs	r3, #49	@ 0x31
 800cb8e:	f88a 3000 	strb.w	r3, [sl]
 800cb92:	e5b9      	b.n	800c708 <_dtoa_r+0x698>
 800cb94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cbf4 <_dtoa_r+0xb84>
 800cb9a:	b11b      	cbz	r3, 800cba4 <_dtoa_r+0xb34>
 800cb9c:	f10a 0308 	add.w	r3, sl, #8
 800cba0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	4650      	mov	r0, sl
 800cba6:	b019      	add	sp, #100	@ 0x64
 800cba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	f77f ae37 	ble.w	800c822 <_dtoa_r+0x7b2>
 800cbb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbb8:	2001      	movs	r0, #1
 800cbba:	e655      	b.n	800c868 <_dtoa_r+0x7f8>
 800cbbc:	9b00      	ldr	r3, [sp, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f77f aed6 	ble.w	800c970 <_dtoa_r+0x900>
 800cbc4:	4656      	mov	r6, sl
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	4648      	mov	r0, r9
 800cbca:	f7ff f9c6 	bl	800bf5a <quorem>
 800cbce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cbd2:	f806 8b01 	strb.w	r8, [r6], #1
 800cbd6:	9b00      	ldr	r3, [sp, #0]
 800cbd8:	eba6 020a 	sub.w	r2, r6, sl
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	ddb3      	ble.n	800cb48 <_dtoa_r+0xad8>
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	220a      	movs	r2, #10
 800cbe6:	4658      	mov	r0, fp
 800cbe8:	f000 f968 	bl	800cebc <__multadd>
 800cbec:	4681      	mov	r9, r0
 800cbee:	e7ea      	b.n	800cbc6 <_dtoa_r+0xb56>
 800cbf0:	0800e350 	.word	0x0800e350
 800cbf4:	0800e2d4 	.word	0x0800e2d4

0800cbf8 <_free_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4605      	mov	r5, r0
 800cbfc:	2900      	cmp	r1, #0
 800cbfe:	d041      	beq.n	800cc84 <_free_r+0x8c>
 800cc00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc04:	1f0c      	subs	r4, r1, #4
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	bfb8      	it	lt
 800cc0a:	18e4      	addlt	r4, r4, r3
 800cc0c:	f000 f8e8 	bl	800cde0 <__malloc_lock>
 800cc10:	4a1d      	ldr	r2, [pc, #116]	@ (800cc88 <_free_r+0x90>)
 800cc12:	6813      	ldr	r3, [r2, #0]
 800cc14:	b933      	cbnz	r3, 800cc24 <_free_r+0x2c>
 800cc16:	6063      	str	r3, [r4, #4]
 800cc18:	6014      	str	r4, [r2, #0]
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc20:	f000 b8e4 	b.w	800cdec <__malloc_unlock>
 800cc24:	42a3      	cmp	r3, r4
 800cc26:	d908      	bls.n	800cc3a <_free_r+0x42>
 800cc28:	6820      	ldr	r0, [r4, #0]
 800cc2a:	1821      	adds	r1, r4, r0
 800cc2c:	428b      	cmp	r3, r1
 800cc2e:	bf01      	itttt	eq
 800cc30:	6819      	ldreq	r1, [r3, #0]
 800cc32:	685b      	ldreq	r3, [r3, #4]
 800cc34:	1809      	addeq	r1, r1, r0
 800cc36:	6021      	streq	r1, [r4, #0]
 800cc38:	e7ed      	b.n	800cc16 <_free_r+0x1e>
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	b10b      	cbz	r3, 800cc44 <_free_r+0x4c>
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	d9fa      	bls.n	800cc3a <_free_r+0x42>
 800cc44:	6811      	ldr	r1, [r2, #0]
 800cc46:	1850      	adds	r0, r2, r1
 800cc48:	42a0      	cmp	r0, r4
 800cc4a:	d10b      	bne.n	800cc64 <_free_r+0x6c>
 800cc4c:	6820      	ldr	r0, [r4, #0]
 800cc4e:	4401      	add	r1, r0
 800cc50:	1850      	adds	r0, r2, r1
 800cc52:	4283      	cmp	r3, r0
 800cc54:	6011      	str	r1, [r2, #0]
 800cc56:	d1e0      	bne.n	800cc1a <_free_r+0x22>
 800cc58:	6818      	ldr	r0, [r3, #0]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	6053      	str	r3, [r2, #4]
 800cc5e:	4408      	add	r0, r1
 800cc60:	6010      	str	r0, [r2, #0]
 800cc62:	e7da      	b.n	800cc1a <_free_r+0x22>
 800cc64:	d902      	bls.n	800cc6c <_free_r+0x74>
 800cc66:	230c      	movs	r3, #12
 800cc68:	602b      	str	r3, [r5, #0]
 800cc6a:	e7d6      	b.n	800cc1a <_free_r+0x22>
 800cc6c:	6820      	ldr	r0, [r4, #0]
 800cc6e:	1821      	adds	r1, r4, r0
 800cc70:	428b      	cmp	r3, r1
 800cc72:	bf04      	itt	eq
 800cc74:	6819      	ldreq	r1, [r3, #0]
 800cc76:	685b      	ldreq	r3, [r3, #4]
 800cc78:	6063      	str	r3, [r4, #4]
 800cc7a:	bf04      	itt	eq
 800cc7c:	1809      	addeq	r1, r1, r0
 800cc7e:	6021      	streq	r1, [r4, #0]
 800cc80:	6054      	str	r4, [r2, #4]
 800cc82:	e7ca      	b.n	800cc1a <_free_r+0x22>
 800cc84:	bd38      	pop	{r3, r4, r5, pc}
 800cc86:	bf00      	nop
 800cc88:	2000173c 	.word	0x2000173c

0800cc8c <malloc>:
 800cc8c:	4b02      	ldr	r3, [pc, #8]	@ (800cc98 <malloc+0xc>)
 800cc8e:	4601      	mov	r1, r0
 800cc90:	6818      	ldr	r0, [r3, #0]
 800cc92:	f000 b825 	b.w	800cce0 <_malloc_r>
 800cc96:	bf00      	nop
 800cc98:	20000188 	.word	0x20000188

0800cc9c <sbrk_aligned>:
 800cc9c:	b570      	push	{r4, r5, r6, lr}
 800cc9e:	4e0f      	ldr	r6, [pc, #60]	@ (800ccdc <sbrk_aligned+0x40>)
 800cca0:	460c      	mov	r4, r1
 800cca2:	6831      	ldr	r1, [r6, #0]
 800cca4:	4605      	mov	r5, r0
 800cca6:	b911      	cbnz	r1, 800ccae <sbrk_aligned+0x12>
 800cca8:	f000 fe46 	bl	800d938 <_sbrk_r>
 800ccac:	6030      	str	r0, [r6, #0]
 800ccae:	4621      	mov	r1, r4
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	f000 fe41 	bl	800d938 <_sbrk_r>
 800ccb6:	1c43      	adds	r3, r0, #1
 800ccb8:	d103      	bne.n	800ccc2 <sbrk_aligned+0x26>
 800ccba:	f04f 34ff 	mov.w	r4, #4294967295
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	bd70      	pop	{r4, r5, r6, pc}
 800ccc2:	1cc4      	adds	r4, r0, #3
 800ccc4:	f024 0403 	bic.w	r4, r4, #3
 800ccc8:	42a0      	cmp	r0, r4
 800ccca:	d0f8      	beq.n	800ccbe <sbrk_aligned+0x22>
 800cccc:	1a21      	subs	r1, r4, r0
 800ccce:	4628      	mov	r0, r5
 800ccd0:	f000 fe32 	bl	800d938 <_sbrk_r>
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	d1f2      	bne.n	800ccbe <sbrk_aligned+0x22>
 800ccd8:	e7ef      	b.n	800ccba <sbrk_aligned+0x1e>
 800ccda:	bf00      	nop
 800ccdc:	20001738 	.word	0x20001738

0800cce0 <_malloc_r>:
 800cce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cce4:	1ccd      	adds	r5, r1, #3
 800cce6:	f025 0503 	bic.w	r5, r5, #3
 800ccea:	3508      	adds	r5, #8
 800ccec:	2d0c      	cmp	r5, #12
 800ccee:	bf38      	it	cc
 800ccf0:	250c      	movcc	r5, #12
 800ccf2:	2d00      	cmp	r5, #0
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	db01      	blt.n	800ccfc <_malloc_r+0x1c>
 800ccf8:	42a9      	cmp	r1, r5
 800ccfa:	d904      	bls.n	800cd06 <_malloc_r+0x26>
 800ccfc:	230c      	movs	r3, #12
 800ccfe:	6033      	str	r3, [r6, #0]
 800cd00:	2000      	movs	r0, #0
 800cd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cddc <_malloc_r+0xfc>
 800cd0a:	f000 f869 	bl	800cde0 <__malloc_lock>
 800cd0e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd12:	461c      	mov	r4, r3
 800cd14:	bb44      	cbnz	r4, 800cd68 <_malloc_r+0x88>
 800cd16:	4629      	mov	r1, r5
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f7ff ffbf 	bl	800cc9c <sbrk_aligned>
 800cd1e:	1c43      	adds	r3, r0, #1
 800cd20:	4604      	mov	r4, r0
 800cd22:	d158      	bne.n	800cdd6 <_malloc_r+0xf6>
 800cd24:	f8d8 4000 	ldr.w	r4, [r8]
 800cd28:	4627      	mov	r7, r4
 800cd2a:	2f00      	cmp	r7, #0
 800cd2c:	d143      	bne.n	800cdb6 <_malloc_r+0xd6>
 800cd2e:	2c00      	cmp	r4, #0
 800cd30:	d04b      	beq.n	800cdca <_malloc_r+0xea>
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	4639      	mov	r1, r7
 800cd36:	4630      	mov	r0, r6
 800cd38:	eb04 0903 	add.w	r9, r4, r3
 800cd3c:	f000 fdfc 	bl	800d938 <_sbrk_r>
 800cd40:	4581      	cmp	r9, r0
 800cd42:	d142      	bne.n	800cdca <_malloc_r+0xea>
 800cd44:	6821      	ldr	r1, [r4, #0]
 800cd46:	1a6d      	subs	r5, r5, r1
 800cd48:	4629      	mov	r1, r5
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f7ff ffa6 	bl	800cc9c <sbrk_aligned>
 800cd50:	3001      	adds	r0, #1
 800cd52:	d03a      	beq.n	800cdca <_malloc_r+0xea>
 800cd54:	6823      	ldr	r3, [r4, #0]
 800cd56:	442b      	add	r3, r5
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd5e:	685a      	ldr	r2, [r3, #4]
 800cd60:	bb62      	cbnz	r2, 800cdbc <_malloc_r+0xdc>
 800cd62:	f8c8 7000 	str.w	r7, [r8]
 800cd66:	e00f      	b.n	800cd88 <_malloc_r+0xa8>
 800cd68:	6822      	ldr	r2, [r4, #0]
 800cd6a:	1b52      	subs	r2, r2, r5
 800cd6c:	d420      	bmi.n	800cdb0 <_malloc_r+0xd0>
 800cd6e:	2a0b      	cmp	r2, #11
 800cd70:	d917      	bls.n	800cda2 <_malloc_r+0xc2>
 800cd72:	1961      	adds	r1, r4, r5
 800cd74:	42a3      	cmp	r3, r4
 800cd76:	6025      	str	r5, [r4, #0]
 800cd78:	bf18      	it	ne
 800cd7a:	6059      	strne	r1, [r3, #4]
 800cd7c:	6863      	ldr	r3, [r4, #4]
 800cd7e:	bf08      	it	eq
 800cd80:	f8c8 1000 	streq.w	r1, [r8]
 800cd84:	5162      	str	r2, [r4, r5]
 800cd86:	604b      	str	r3, [r1, #4]
 800cd88:	4630      	mov	r0, r6
 800cd8a:	f000 f82f 	bl	800cdec <__malloc_unlock>
 800cd8e:	f104 000b 	add.w	r0, r4, #11
 800cd92:	1d23      	adds	r3, r4, #4
 800cd94:	f020 0007 	bic.w	r0, r0, #7
 800cd98:	1ac2      	subs	r2, r0, r3
 800cd9a:	bf1c      	itt	ne
 800cd9c:	1a1b      	subne	r3, r3, r0
 800cd9e:	50a3      	strne	r3, [r4, r2]
 800cda0:	e7af      	b.n	800cd02 <_malloc_r+0x22>
 800cda2:	6862      	ldr	r2, [r4, #4]
 800cda4:	42a3      	cmp	r3, r4
 800cda6:	bf0c      	ite	eq
 800cda8:	f8c8 2000 	streq.w	r2, [r8]
 800cdac:	605a      	strne	r2, [r3, #4]
 800cdae:	e7eb      	b.n	800cd88 <_malloc_r+0xa8>
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	6864      	ldr	r4, [r4, #4]
 800cdb4:	e7ae      	b.n	800cd14 <_malloc_r+0x34>
 800cdb6:	463c      	mov	r4, r7
 800cdb8:	687f      	ldr	r7, [r7, #4]
 800cdba:	e7b6      	b.n	800cd2a <_malloc_r+0x4a>
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	42a3      	cmp	r3, r4
 800cdc2:	d1fb      	bne.n	800cdbc <_malloc_r+0xdc>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	6053      	str	r3, [r2, #4]
 800cdc8:	e7de      	b.n	800cd88 <_malloc_r+0xa8>
 800cdca:	230c      	movs	r3, #12
 800cdcc:	6033      	str	r3, [r6, #0]
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f000 f80c 	bl	800cdec <__malloc_unlock>
 800cdd4:	e794      	b.n	800cd00 <_malloc_r+0x20>
 800cdd6:	6005      	str	r5, [r0, #0]
 800cdd8:	e7d6      	b.n	800cd88 <_malloc_r+0xa8>
 800cdda:	bf00      	nop
 800cddc:	2000173c 	.word	0x2000173c

0800cde0 <__malloc_lock>:
 800cde0:	4801      	ldr	r0, [pc, #4]	@ (800cde8 <__malloc_lock+0x8>)
 800cde2:	f7ff b8b8 	b.w	800bf56 <__retarget_lock_acquire_recursive>
 800cde6:	bf00      	nop
 800cde8:	20001734 	.word	0x20001734

0800cdec <__malloc_unlock>:
 800cdec:	4801      	ldr	r0, [pc, #4]	@ (800cdf4 <__malloc_unlock+0x8>)
 800cdee:	f7ff b8b3 	b.w	800bf58 <__retarget_lock_release_recursive>
 800cdf2:	bf00      	nop
 800cdf4:	20001734 	.word	0x20001734

0800cdf8 <_Balloc>:
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	69c6      	ldr	r6, [r0, #28]
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	460d      	mov	r5, r1
 800ce00:	b976      	cbnz	r6, 800ce20 <_Balloc+0x28>
 800ce02:	2010      	movs	r0, #16
 800ce04:	f7ff ff42 	bl	800cc8c <malloc>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	61e0      	str	r0, [r4, #28]
 800ce0c:	b920      	cbnz	r0, 800ce18 <_Balloc+0x20>
 800ce0e:	4b18      	ldr	r3, [pc, #96]	@ (800ce70 <_Balloc+0x78>)
 800ce10:	4818      	ldr	r0, [pc, #96]	@ (800ce74 <_Balloc+0x7c>)
 800ce12:	216b      	movs	r1, #107	@ 0x6b
 800ce14:	f000 fdae 	bl	800d974 <__assert_func>
 800ce18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce1c:	6006      	str	r6, [r0, #0]
 800ce1e:	60c6      	str	r6, [r0, #12]
 800ce20:	69e6      	ldr	r6, [r4, #28]
 800ce22:	68f3      	ldr	r3, [r6, #12]
 800ce24:	b183      	cbz	r3, 800ce48 <_Balloc+0x50>
 800ce26:	69e3      	ldr	r3, [r4, #28]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce2e:	b9b8      	cbnz	r0, 800ce60 <_Balloc+0x68>
 800ce30:	2101      	movs	r1, #1
 800ce32:	fa01 f605 	lsl.w	r6, r1, r5
 800ce36:	1d72      	adds	r2, r6, #5
 800ce38:	0092      	lsls	r2, r2, #2
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 fdb8 	bl	800d9b0 <_calloc_r>
 800ce40:	b160      	cbz	r0, 800ce5c <_Balloc+0x64>
 800ce42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce46:	e00e      	b.n	800ce66 <_Balloc+0x6e>
 800ce48:	2221      	movs	r2, #33	@ 0x21
 800ce4a:	2104      	movs	r1, #4
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 fdaf 	bl	800d9b0 <_calloc_r>
 800ce52:	69e3      	ldr	r3, [r4, #28]
 800ce54:	60f0      	str	r0, [r6, #12]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1e4      	bne.n	800ce26 <_Balloc+0x2e>
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	6802      	ldr	r2, [r0, #0]
 800ce62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce66:	2300      	movs	r3, #0
 800ce68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce6c:	e7f7      	b.n	800ce5e <_Balloc+0x66>
 800ce6e:	bf00      	nop
 800ce70:	0800e2e1 	.word	0x0800e2e1
 800ce74:	0800e361 	.word	0x0800e361

0800ce78 <_Bfree>:
 800ce78:	b570      	push	{r4, r5, r6, lr}
 800ce7a:	69c6      	ldr	r6, [r0, #28]
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	460c      	mov	r4, r1
 800ce80:	b976      	cbnz	r6, 800cea0 <_Bfree+0x28>
 800ce82:	2010      	movs	r0, #16
 800ce84:	f7ff ff02 	bl	800cc8c <malloc>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	61e8      	str	r0, [r5, #28]
 800ce8c:	b920      	cbnz	r0, 800ce98 <_Bfree+0x20>
 800ce8e:	4b09      	ldr	r3, [pc, #36]	@ (800ceb4 <_Bfree+0x3c>)
 800ce90:	4809      	ldr	r0, [pc, #36]	@ (800ceb8 <_Bfree+0x40>)
 800ce92:	218f      	movs	r1, #143	@ 0x8f
 800ce94:	f000 fd6e 	bl	800d974 <__assert_func>
 800ce98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce9c:	6006      	str	r6, [r0, #0]
 800ce9e:	60c6      	str	r6, [r0, #12]
 800cea0:	b13c      	cbz	r4, 800ceb2 <_Bfree+0x3a>
 800cea2:	69eb      	ldr	r3, [r5, #28]
 800cea4:	6862      	ldr	r2, [r4, #4]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ceac:	6021      	str	r1, [r4, #0]
 800ceae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ceb2:	bd70      	pop	{r4, r5, r6, pc}
 800ceb4:	0800e2e1 	.word	0x0800e2e1
 800ceb8:	0800e361 	.word	0x0800e361

0800cebc <__multadd>:
 800cebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec0:	690d      	ldr	r5, [r1, #16]
 800cec2:	4607      	mov	r7, r0
 800cec4:	460c      	mov	r4, r1
 800cec6:	461e      	mov	r6, r3
 800cec8:	f101 0c14 	add.w	ip, r1, #20
 800cecc:	2000      	movs	r0, #0
 800cece:	f8dc 3000 	ldr.w	r3, [ip]
 800ced2:	b299      	uxth	r1, r3
 800ced4:	fb02 6101 	mla	r1, r2, r1, r6
 800ced8:	0c1e      	lsrs	r6, r3, #16
 800ceda:	0c0b      	lsrs	r3, r1, #16
 800cedc:	fb02 3306 	mla	r3, r2, r6, r3
 800cee0:	b289      	uxth	r1, r1
 800cee2:	3001      	adds	r0, #1
 800cee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cee8:	4285      	cmp	r5, r0
 800ceea:	f84c 1b04 	str.w	r1, [ip], #4
 800ceee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cef2:	dcec      	bgt.n	800cece <__multadd+0x12>
 800cef4:	b30e      	cbz	r6, 800cf3a <__multadd+0x7e>
 800cef6:	68a3      	ldr	r3, [r4, #8]
 800cef8:	42ab      	cmp	r3, r5
 800cefa:	dc19      	bgt.n	800cf30 <__multadd+0x74>
 800cefc:	6861      	ldr	r1, [r4, #4]
 800cefe:	4638      	mov	r0, r7
 800cf00:	3101      	adds	r1, #1
 800cf02:	f7ff ff79 	bl	800cdf8 <_Balloc>
 800cf06:	4680      	mov	r8, r0
 800cf08:	b928      	cbnz	r0, 800cf16 <__multadd+0x5a>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	4b0c      	ldr	r3, [pc, #48]	@ (800cf40 <__multadd+0x84>)
 800cf0e:	480d      	ldr	r0, [pc, #52]	@ (800cf44 <__multadd+0x88>)
 800cf10:	21ba      	movs	r1, #186	@ 0xba
 800cf12:	f000 fd2f 	bl	800d974 <__assert_func>
 800cf16:	6922      	ldr	r2, [r4, #16]
 800cf18:	3202      	adds	r2, #2
 800cf1a:	f104 010c 	add.w	r1, r4, #12
 800cf1e:	0092      	lsls	r2, r2, #2
 800cf20:	300c      	adds	r0, #12
 800cf22:	f000 fd19 	bl	800d958 <memcpy>
 800cf26:	4621      	mov	r1, r4
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff ffa5 	bl	800ce78 <_Bfree>
 800cf2e:	4644      	mov	r4, r8
 800cf30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf34:	3501      	adds	r5, #1
 800cf36:	615e      	str	r6, [r3, #20]
 800cf38:	6125      	str	r5, [r4, #16]
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf40:	0800e350 	.word	0x0800e350
 800cf44:	0800e361 	.word	0x0800e361

0800cf48 <__hi0bits>:
 800cf48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	bf36      	itet	cc
 800cf50:	0403      	lslcc	r3, r0, #16
 800cf52:	2000      	movcs	r0, #0
 800cf54:	2010      	movcc	r0, #16
 800cf56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf5a:	bf3c      	itt	cc
 800cf5c:	021b      	lslcc	r3, r3, #8
 800cf5e:	3008      	addcc	r0, #8
 800cf60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf64:	bf3c      	itt	cc
 800cf66:	011b      	lslcc	r3, r3, #4
 800cf68:	3004      	addcc	r0, #4
 800cf6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf6e:	bf3c      	itt	cc
 800cf70:	009b      	lslcc	r3, r3, #2
 800cf72:	3002      	addcc	r0, #2
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	db05      	blt.n	800cf84 <__hi0bits+0x3c>
 800cf78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf7c:	f100 0001 	add.w	r0, r0, #1
 800cf80:	bf08      	it	eq
 800cf82:	2020      	moveq	r0, #32
 800cf84:	4770      	bx	lr

0800cf86 <__lo0bits>:
 800cf86:	6803      	ldr	r3, [r0, #0]
 800cf88:	4602      	mov	r2, r0
 800cf8a:	f013 0007 	ands.w	r0, r3, #7
 800cf8e:	d00b      	beq.n	800cfa8 <__lo0bits+0x22>
 800cf90:	07d9      	lsls	r1, r3, #31
 800cf92:	d421      	bmi.n	800cfd8 <__lo0bits+0x52>
 800cf94:	0798      	lsls	r0, r3, #30
 800cf96:	bf49      	itett	mi
 800cf98:	085b      	lsrmi	r3, r3, #1
 800cf9a:	089b      	lsrpl	r3, r3, #2
 800cf9c:	2001      	movmi	r0, #1
 800cf9e:	6013      	strmi	r3, [r2, #0]
 800cfa0:	bf5c      	itt	pl
 800cfa2:	6013      	strpl	r3, [r2, #0]
 800cfa4:	2002      	movpl	r0, #2
 800cfa6:	4770      	bx	lr
 800cfa8:	b299      	uxth	r1, r3
 800cfaa:	b909      	cbnz	r1, 800cfb0 <__lo0bits+0x2a>
 800cfac:	0c1b      	lsrs	r3, r3, #16
 800cfae:	2010      	movs	r0, #16
 800cfb0:	b2d9      	uxtb	r1, r3
 800cfb2:	b909      	cbnz	r1, 800cfb8 <__lo0bits+0x32>
 800cfb4:	3008      	adds	r0, #8
 800cfb6:	0a1b      	lsrs	r3, r3, #8
 800cfb8:	0719      	lsls	r1, r3, #28
 800cfba:	bf04      	itt	eq
 800cfbc:	091b      	lsreq	r3, r3, #4
 800cfbe:	3004      	addeq	r0, #4
 800cfc0:	0799      	lsls	r1, r3, #30
 800cfc2:	bf04      	itt	eq
 800cfc4:	089b      	lsreq	r3, r3, #2
 800cfc6:	3002      	addeq	r0, #2
 800cfc8:	07d9      	lsls	r1, r3, #31
 800cfca:	d403      	bmi.n	800cfd4 <__lo0bits+0x4e>
 800cfcc:	085b      	lsrs	r3, r3, #1
 800cfce:	f100 0001 	add.w	r0, r0, #1
 800cfd2:	d003      	beq.n	800cfdc <__lo0bits+0x56>
 800cfd4:	6013      	str	r3, [r2, #0]
 800cfd6:	4770      	bx	lr
 800cfd8:	2000      	movs	r0, #0
 800cfda:	4770      	bx	lr
 800cfdc:	2020      	movs	r0, #32
 800cfde:	4770      	bx	lr

0800cfe0 <__i2b>:
 800cfe0:	b510      	push	{r4, lr}
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	f7ff ff07 	bl	800cdf8 <_Balloc>
 800cfea:	4602      	mov	r2, r0
 800cfec:	b928      	cbnz	r0, 800cffa <__i2b+0x1a>
 800cfee:	4b05      	ldr	r3, [pc, #20]	@ (800d004 <__i2b+0x24>)
 800cff0:	4805      	ldr	r0, [pc, #20]	@ (800d008 <__i2b+0x28>)
 800cff2:	f240 1145 	movw	r1, #325	@ 0x145
 800cff6:	f000 fcbd 	bl	800d974 <__assert_func>
 800cffa:	2301      	movs	r3, #1
 800cffc:	6144      	str	r4, [r0, #20]
 800cffe:	6103      	str	r3, [r0, #16]
 800d000:	bd10      	pop	{r4, pc}
 800d002:	bf00      	nop
 800d004:	0800e350 	.word	0x0800e350
 800d008:	0800e361 	.word	0x0800e361

0800d00c <__multiply>:
 800d00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d010:	4614      	mov	r4, r2
 800d012:	690a      	ldr	r2, [r1, #16]
 800d014:	6923      	ldr	r3, [r4, #16]
 800d016:	429a      	cmp	r2, r3
 800d018:	bfa8      	it	ge
 800d01a:	4623      	movge	r3, r4
 800d01c:	460f      	mov	r7, r1
 800d01e:	bfa4      	itt	ge
 800d020:	460c      	movge	r4, r1
 800d022:	461f      	movge	r7, r3
 800d024:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d028:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d02c:	68a3      	ldr	r3, [r4, #8]
 800d02e:	6861      	ldr	r1, [r4, #4]
 800d030:	eb0a 0609 	add.w	r6, sl, r9
 800d034:	42b3      	cmp	r3, r6
 800d036:	b085      	sub	sp, #20
 800d038:	bfb8      	it	lt
 800d03a:	3101      	addlt	r1, #1
 800d03c:	f7ff fedc 	bl	800cdf8 <_Balloc>
 800d040:	b930      	cbnz	r0, 800d050 <__multiply+0x44>
 800d042:	4602      	mov	r2, r0
 800d044:	4b44      	ldr	r3, [pc, #272]	@ (800d158 <__multiply+0x14c>)
 800d046:	4845      	ldr	r0, [pc, #276]	@ (800d15c <__multiply+0x150>)
 800d048:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d04c:	f000 fc92 	bl	800d974 <__assert_func>
 800d050:	f100 0514 	add.w	r5, r0, #20
 800d054:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d058:	462b      	mov	r3, r5
 800d05a:	2200      	movs	r2, #0
 800d05c:	4543      	cmp	r3, r8
 800d05e:	d321      	bcc.n	800d0a4 <__multiply+0x98>
 800d060:	f107 0114 	add.w	r1, r7, #20
 800d064:	f104 0214 	add.w	r2, r4, #20
 800d068:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d06c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d070:	9302      	str	r3, [sp, #8]
 800d072:	1b13      	subs	r3, r2, r4
 800d074:	3b15      	subs	r3, #21
 800d076:	f023 0303 	bic.w	r3, r3, #3
 800d07a:	3304      	adds	r3, #4
 800d07c:	f104 0715 	add.w	r7, r4, #21
 800d080:	42ba      	cmp	r2, r7
 800d082:	bf38      	it	cc
 800d084:	2304      	movcc	r3, #4
 800d086:	9301      	str	r3, [sp, #4]
 800d088:	9b02      	ldr	r3, [sp, #8]
 800d08a:	9103      	str	r1, [sp, #12]
 800d08c:	428b      	cmp	r3, r1
 800d08e:	d80c      	bhi.n	800d0aa <__multiply+0x9e>
 800d090:	2e00      	cmp	r6, #0
 800d092:	dd03      	ble.n	800d09c <__multiply+0x90>
 800d094:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d05b      	beq.n	800d154 <__multiply+0x148>
 800d09c:	6106      	str	r6, [r0, #16]
 800d09e:	b005      	add	sp, #20
 800d0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a4:	f843 2b04 	str.w	r2, [r3], #4
 800d0a8:	e7d8      	b.n	800d05c <__multiply+0x50>
 800d0aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800d0ae:	f1ba 0f00 	cmp.w	sl, #0
 800d0b2:	d024      	beq.n	800d0fe <__multiply+0xf2>
 800d0b4:	f104 0e14 	add.w	lr, r4, #20
 800d0b8:	46a9      	mov	r9, r5
 800d0ba:	f04f 0c00 	mov.w	ip, #0
 800d0be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d0c2:	f8d9 3000 	ldr.w	r3, [r9]
 800d0c6:	fa1f fb87 	uxth.w	fp, r7
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800d0d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d0d4:	f8d9 7000 	ldr.w	r7, [r9]
 800d0d8:	4463      	add	r3, ip
 800d0da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d0de:	fb0a c70b 	mla	r7, sl, fp, ip
 800d0e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d0ec:	4572      	cmp	r2, lr
 800d0ee:	f849 3b04 	str.w	r3, [r9], #4
 800d0f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d0f6:	d8e2      	bhi.n	800d0be <__multiply+0xb2>
 800d0f8:	9b01      	ldr	r3, [sp, #4]
 800d0fa:	f845 c003 	str.w	ip, [r5, r3]
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d104:	3104      	adds	r1, #4
 800d106:	f1b9 0f00 	cmp.w	r9, #0
 800d10a:	d021      	beq.n	800d150 <__multiply+0x144>
 800d10c:	682b      	ldr	r3, [r5, #0]
 800d10e:	f104 0c14 	add.w	ip, r4, #20
 800d112:	46ae      	mov	lr, r5
 800d114:	f04f 0a00 	mov.w	sl, #0
 800d118:	f8bc b000 	ldrh.w	fp, [ip]
 800d11c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d120:	fb09 770b 	mla	r7, r9, fp, r7
 800d124:	4457      	add	r7, sl
 800d126:	b29b      	uxth	r3, r3
 800d128:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d12c:	f84e 3b04 	str.w	r3, [lr], #4
 800d130:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d134:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d138:	f8be 3000 	ldrh.w	r3, [lr]
 800d13c:	fb09 330a 	mla	r3, r9, sl, r3
 800d140:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d144:	4562      	cmp	r2, ip
 800d146:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d14a:	d8e5      	bhi.n	800d118 <__multiply+0x10c>
 800d14c:	9f01      	ldr	r7, [sp, #4]
 800d14e:	51eb      	str	r3, [r5, r7]
 800d150:	3504      	adds	r5, #4
 800d152:	e799      	b.n	800d088 <__multiply+0x7c>
 800d154:	3e01      	subs	r6, #1
 800d156:	e79b      	b.n	800d090 <__multiply+0x84>
 800d158:	0800e350 	.word	0x0800e350
 800d15c:	0800e361 	.word	0x0800e361

0800d160 <__pow5mult>:
 800d160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d164:	4615      	mov	r5, r2
 800d166:	f012 0203 	ands.w	r2, r2, #3
 800d16a:	4607      	mov	r7, r0
 800d16c:	460e      	mov	r6, r1
 800d16e:	d007      	beq.n	800d180 <__pow5mult+0x20>
 800d170:	4c25      	ldr	r4, [pc, #148]	@ (800d208 <__pow5mult+0xa8>)
 800d172:	3a01      	subs	r2, #1
 800d174:	2300      	movs	r3, #0
 800d176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d17a:	f7ff fe9f 	bl	800cebc <__multadd>
 800d17e:	4606      	mov	r6, r0
 800d180:	10ad      	asrs	r5, r5, #2
 800d182:	d03d      	beq.n	800d200 <__pow5mult+0xa0>
 800d184:	69fc      	ldr	r4, [r7, #28]
 800d186:	b97c      	cbnz	r4, 800d1a8 <__pow5mult+0x48>
 800d188:	2010      	movs	r0, #16
 800d18a:	f7ff fd7f 	bl	800cc8c <malloc>
 800d18e:	4602      	mov	r2, r0
 800d190:	61f8      	str	r0, [r7, #28]
 800d192:	b928      	cbnz	r0, 800d1a0 <__pow5mult+0x40>
 800d194:	4b1d      	ldr	r3, [pc, #116]	@ (800d20c <__pow5mult+0xac>)
 800d196:	481e      	ldr	r0, [pc, #120]	@ (800d210 <__pow5mult+0xb0>)
 800d198:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d19c:	f000 fbea 	bl	800d974 <__assert_func>
 800d1a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1a4:	6004      	str	r4, [r0, #0]
 800d1a6:	60c4      	str	r4, [r0, #12]
 800d1a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d1ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1b0:	b94c      	cbnz	r4, 800d1c6 <__pow5mult+0x66>
 800d1b2:	f240 2171 	movw	r1, #625	@ 0x271
 800d1b6:	4638      	mov	r0, r7
 800d1b8:	f7ff ff12 	bl	800cfe0 <__i2b>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	6003      	str	r3, [r0, #0]
 800d1c6:	f04f 0900 	mov.w	r9, #0
 800d1ca:	07eb      	lsls	r3, r5, #31
 800d1cc:	d50a      	bpl.n	800d1e4 <__pow5mult+0x84>
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	4622      	mov	r2, r4
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	f7ff ff1a 	bl	800d00c <__multiply>
 800d1d8:	4631      	mov	r1, r6
 800d1da:	4680      	mov	r8, r0
 800d1dc:	4638      	mov	r0, r7
 800d1de:	f7ff fe4b 	bl	800ce78 <_Bfree>
 800d1e2:	4646      	mov	r6, r8
 800d1e4:	106d      	asrs	r5, r5, #1
 800d1e6:	d00b      	beq.n	800d200 <__pow5mult+0xa0>
 800d1e8:	6820      	ldr	r0, [r4, #0]
 800d1ea:	b938      	cbnz	r0, 800d1fc <__pow5mult+0x9c>
 800d1ec:	4622      	mov	r2, r4
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	f7ff ff0b 	bl	800d00c <__multiply>
 800d1f6:	6020      	str	r0, [r4, #0]
 800d1f8:	f8c0 9000 	str.w	r9, [r0]
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	e7e4      	b.n	800d1ca <__pow5mult+0x6a>
 800d200:	4630      	mov	r0, r6
 800d202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d206:	bf00      	nop
 800d208:	0800e3bc 	.word	0x0800e3bc
 800d20c:	0800e2e1 	.word	0x0800e2e1
 800d210:	0800e361 	.word	0x0800e361

0800d214 <__lshift>:
 800d214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d218:	460c      	mov	r4, r1
 800d21a:	6849      	ldr	r1, [r1, #4]
 800d21c:	6923      	ldr	r3, [r4, #16]
 800d21e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d222:	68a3      	ldr	r3, [r4, #8]
 800d224:	4607      	mov	r7, r0
 800d226:	4691      	mov	r9, r2
 800d228:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d22c:	f108 0601 	add.w	r6, r8, #1
 800d230:	42b3      	cmp	r3, r6
 800d232:	db0b      	blt.n	800d24c <__lshift+0x38>
 800d234:	4638      	mov	r0, r7
 800d236:	f7ff fddf 	bl	800cdf8 <_Balloc>
 800d23a:	4605      	mov	r5, r0
 800d23c:	b948      	cbnz	r0, 800d252 <__lshift+0x3e>
 800d23e:	4602      	mov	r2, r0
 800d240:	4b28      	ldr	r3, [pc, #160]	@ (800d2e4 <__lshift+0xd0>)
 800d242:	4829      	ldr	r0, [pc, #164]	@ (800d2e8 <__lshift+0xd4>)
 800d244:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d248:	f000 fb94 	bl	800d974 <__assert_func>
 800d24c:	3101      	adds	r1, #1
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	e7ee      	b.n	800d230 <__lshift+0x1c>
 800d252:	2300      	movs	r3, #0
 800d254:	f100 0114 	add.w	r1, r0, #20
 800d258:	f100 0210 	add.w	r2, r0, #16
 800d25c:	4618      	mov	r0, r3
 800d25e:	4553      	cmp	r3, sl
 800d260:	db33      	blt.n	800d2ca <__lshift+0xb6>
 800d262:	6920      	ldr	r0, [r4, #16]
 800d264:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d268:	f104 0314 	add.w	r3, r4, #20
 800d26c:	f019 091f 	ands.w	r9, r9, #31
 800d270:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d274:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d278:	d02b      	beq.n	800d2d2 <__lshift+0xbe>
 800d27a:	f1c9 0e20 	rsb	lr, r9, #32
 800d27e:	468a      	mov	sl, r1
 800d280:	2200      	movs	r2, #0
 800d282:	6818      	ldr	r0, [r3, #0]
 800d284:	fa00 f009 	lsl.w	r0, r0, r9
 800d288:	4310      	orrs	r0, r2
 800d28a:	f84a 0b04 	str.w	r0, [sl], #4
 800d28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d292:	459c      	cmp	ip, r3
 800d294:	fa22 f20e 	lsr.w	r2, r2, lr
 800d298:	d8f3      	bhi.n	800d282 <__lshift+0x6e>
 800d29a:	ebac 0304 	sub.w	r3, ip, r4
 800d29e:	3b15      	subs	r3, #21
 800d2a0:	f023 0303 	bic.w	r3, r3, #3
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	f104 0015 	add.w	r0, r4, #21
 800d2aa:	4584      	cmp	ip, r0
 800d2ac:	bf38      	it	cc
 800d2ae:	2304      	movcc	r3, #4
 800d2b0:	50ca      	str	r2, [r1, r3]
 800d2b2:	b10a      	cbz	r2, 800d2b8 <__lshift+0xa4>
 800d2b4:	f108 0602 	add.w	r6, r8, #2
 800d2b8:	3e01      	subs	r6, #1
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	612e      	str	r6, [r5, #16]
 800d2be:	4621      	mov	r1, r4
 800d2c0:	f7ff fdda 	bl	800ce78 <_Bfree>
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	e7c5      	b.n	800d25e <__lshift+0x4a>
 800d2d2:	3904      	subs	r1, #4
 800d2d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2dc:	459c      	cmp	ip, r3
 800d2de:	d8f9      	bhi.n	800d2d4 <__lshift+0xc0>
 800d2e0:	e7ea      	b.n	800d2b8 <__lshift+0xa4>
 800d2e2:	bf00      	nop
 800d2e4:	0800e350 	.word	0x0800e350
 800d2e8:	0800e361 	.word	0x0800e361

0800d2ec <__mcmp>:
 800d2ec:	690a      	ldr	r2, [r1, #16]
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	6900      	ldr	r0, [r0, #16]
 800d2f2:	1a80      	subs	r0, r0, r2
 800d2f4:	b530      	push	{r4, r5, lr}
 800d2f6:	d10e      	bne.n	800d316 <__mcmp+0x2a>
 800d2f8:	3314      	adds	r3, #20
 800d2fa:	3114      	adds	r1, #20
 800d2fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d300:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d304:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d308:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d30c:	4295      	cmp	r5, r2
 800d30e:	d003      	beq.n	800d318 <__mcmp+0x2c>
 800d310:	d205      	bcs.n	800d31e <__mcmp+0x32>
 800d312:	f04f 30ff 	mov.w	r0, #4294967295
 800d316:	bd30      	pop	{r4, r5, pc}
 800d318:	42a3      	cmp	r3, r4
 800d31a:	d3f3      	bcc.n	800d304 <__mcmp+0x18>
 800d31c:	e7fb      	b.n	800d316 <__mcmp+0x2a>
 800d31e:	2001      	movs	r0, #1
 800d320:	e7f9      	b.n	800d316 <__mcmp+0x2a>
	...

0800d324 <__mdiff>:
 800d324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d328:	4689      	mov	r9, r1
 800d32a:	4606      	mov	r6, r0
 800d32c:	4611      	mov	r1, r2
 800d32e:	4648      	mov	r0, r9
 800d330:	4614      	mov	r4, r2
 800d332:	f7ff ffdb 	bl	800d2ec <__mcmp>
 800d336:	1e05      	subs	r5, r0, #0
 800d338:	d112      	bne.n	800d360 <__mdiff+0x3c>
 800d33a:	4629      	mov	r1, r5
 800d33c:	4630      	mov	r0, r6
 800d33e:	f7ff fd5b 	bl	800cdf8 <_Balloc>
 800d342:	4602      	mov	r2, r0
 800d344:	b928      	cbnz	r0, 800d352 <__mdiff+0x2e>
 800d346:	4b3f      	ldr	r3, [pc, #252]	@ (800d444 <__mdiff+0x120>)
 800d348:	f240 2137 	movw	r1, #567	@ 0x237
 800d34c:	483e      	ldr	r0, [pc, #248]	@ (800d448 <__mdiff+0x124>)
 800d34e:	f000 fb11 	bl	800d974 <__assert_func>
 800d352:	2301      	movs	r3, #1
 800d354:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d358:	4610      	mov	r0, r2
 800d35a:	b003      	add	sp, #12
 800d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d360:	bfbc      	itt	lt
 800d362:	464b      	movlt	r3, r9
 800d364:	46a1      	movlt	r9, r4
 800d366:	4630      	mov	r0, r6
 800d368:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d36c:	bfba      	itte	lt
 800d36e:	461c      	movlt	r4, r3
 800d370:	2501      	movlt	r5, #1
 800d372:	2500      	movge	r5, #0
 800d374:	f7ff fd40 	bl	800cdf8 <_Balloc>
 800d378:	4602      	mov	r2, r0
 800d37a:	b918      	cbnz	r0, 800d384 <__mdiff+0x60>
 800d37c:	4b31      	ldr	r3, [pc, #196]	@ (800d444 <__mdiff+0x120>)
 800d37e:	f240 2145 	movw	r1, #581	@ 0x245
 800d382:	e7e3      	b.n	800d34c <__mdiff+0x28>
 800d384:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d388:	6926      	ldr	r6, [r4, #16]
 800d38a:	60c5      	str	r5, [r0, #12]
 800d38c:	f109 0310 	add.w	r3, r9, #16
 800d390:	f109 0514 	add.w	r5, r9, #20
 800d394:	f104 0e14 	add.w	lr, r4, #20
 800d398:	f100 0b14 	add.w	fp, r0, #20
 800d39c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d3a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d3a4:	9301      	str	r3, [sp, #4]
 800d3a6:	46d9      	mov	r9, fp
 800d3a8:	f04f 0c00 	mov.w	ip, #0
 800d3ac:	9b01      	ldr	r3, [sp, #4]
 800d3ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d3b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d3b6:	9301      	str	r3, [sp, #4]
 800d3b8:	fa1f f38a 	uxth.w	r3, sl
 800d3bc:	4619      	mov	r1, r3
 800d3be:	b283      	uxth	r3, r0
 800d3c0:	1acb      	subs	r3, r1, r3
 800d3c2:	0c00      	lsrs	r0, r0, #16
 800d3c4:	4463      	add	r3, ip
 800d3c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d3ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d3d4:	4576      	cmp	r6, lr
 800d3d6:	f849 3b04 	str.w	r3, [r9], #4
 800d3da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3de:	d8e5      	bhi.n	800d3ac <__mdiff+0x88>
 800d3e0:	1b33      	subs	r3, r6, r4
 800d3e2:	3b15      	subs	r3, #21
 800d3e4:	f023 0303 	bic.w	r3, r3, #3
 800d3e8:	3415      	adds	r4, #21
 800d3ea:	3304      	adds	r3, #4
 800d3ec:	42a6      	cmp	r6, r4
 800d3ee:	bf38      	it	cc
 800d3f0:	2304      	movcc	r3, #4
 800d3f2:	441d      	add	r5, r3
 800d3f4:	445b      	add	r3, fp
 800d3f6:	461e      	mov	r6, r3
 800d3f8:	462c      	mov	r4, r5
 800d3fa:	4544      	cmp	r4, r8
 800d3fc:	d30e      	bcc.n	800d41c <__mdiff+0xf8>
 800d3fe:	f108 0103 	add.w	r1, r8, #3
 800d402:	1b49      	subs	r1, r1, r5
 800d404:	f021 0103 	bic.w	r1, r1, #3
 800d408:	3d03      	subs	r5, #3
 800d40a:	45a8      	cmp	r8, r5
 800d40c:	bf38      	it	cc
 800d40e:	2100      	movcc	r1, #0
 800d410:	440b      	add	r3, r1
 800d412:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d416:	b191      	cbz	r1, 800d43e <__mdiff+0x11a>
 800d418:	6117      	str	r7, [r2, #16]
 800d41a:	e79d      	b.n	800d358 <__mdiff+0x34>
 800d41c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d420:	46e6      	mov	lr, ip
 800d422:	0c08      	lsrs	r0, r1, #16
 800d424:	fa1c fc81 	uxtah	ip, ip, r1
 800d428:	4471      	add	r1, lr
 800d42a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d42e:	b289      	uxth	r1, r1
 800d430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d434:	f846 1b04 	str.w	r1, [r6], #4
 800d438:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d43c:	e7dd      	b.n	800d3fa <__mdiff+0xd6>
 800d43e:	3f01      	subs	r7, #1
 800d440:	e7e7      	b.n	800d412 <__mdiff+0xee>
 800d442:	bf00      	nop
 800d444:	0800e350 	.word	0x0800e350
 800d448:	0800e361 	.word	0x0800e361

0800d44c <__d2b>:
 800d44c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d450:	460f      	mov	r7, r1
 800d452:	2101      	movs	r1, #1
 800d454:	ec59 8b10 	vmov	r8, r9, d0
 800d458:	4616      	mov	r6, r2
 800d45a:	f7ff fccd 	bl	800cdf8 <_Balloc>
 800d45e:	4604      	mov	r4, r0
 800d460:	b930      	cbnz	r0, 800d470 <__d2b+0x24>
 800d462:	4602      	mov	r2, r0
 800d464:	4b23      	ldr	r3, [pc, #140]	@ (800d4f4 <__d2b+0xa8>)
 800d466:	4824      	ldr	r0, [pc, #144]	@ (800d4f8 <__d2b+0xac>)
 800d468:	f240 310f 	movw	r1, #783	@ 0x30f
 800d46c:	f000 fa82 	bl	800d974 <__assert_func>
 800d470:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d474:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d478:	b10d      	cbz	r5, 800d47e <__d2b+0x32>
 800d47a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d47e:	9301      	str	r3, [sp, #4]
 800d480:	f1b8 0300 	subs.w	r3, r8, #0
 800d484:	d023      	beq.n	800d4ce <__d2b+0x82>
 800d486:	4668      	mov	r0, sp
 800d488:	9300      	str	r3, [sp, #0]
 800d48a:	f7ff fd7c 	bl	800cf86 <__lo0bits>
 800d48e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d492:	b1d0      	cbz	r0, 800d4ca <__d2b+0x7e>
 800d494:	f1c0 0320 	rsb	r3, r0, #32
 800d498:	fa02 f303 	lsl.w	r3, r2, r3
 800d49c:	430b      	orrs	r3, r1
 800d49e:	40c2      	lsrs	r2, r0
 800d4a0:	6163      	str	r3, [r4, #20]
 800d4a2:	9201      	str	r2, [sp, #4]
 800d4a4:	9b01      	ldr	r3, [sp, #4]
 800d4a6:	61a3      	str	r3, [r4, #24]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	bf0c      	ite	eq
 800d4ac:	2201      	moveq	r2, #1
 800d4ae:	2202      	movne	r2, #2
 800d4b0:	6122      	str	r2, [r4, #16]
 800d4b2:	b1a5      	cbz	r5, 800d4de <__d2b+0x92>
 800d4b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d4b8:	4405      	add	r5, r0
 800d4ba:	603d      	str	r5, [r7, #0]
 800d4bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d4c0:	6030      	str	r0, [r6, #0]
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	b003      	add	sp, #12
 800d4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4ca:	6161      	str	r1, [r4, #20]
 800d4cc:	e7ea      	b.n	800d4a4 <__d2b+0x58>
 800d4ce:	a801      	add	r0, sp, #4
 800d4d0:	f7ff fd59 	bl	800cf86 <__lo0bits>
 800d4d4:	9b01      	ldr	r3, [sp, #4]
 800d4d6:	6163      	str	r3, [r4, #20]
 800d4d8:	3020      	adds	r0, #32
 800d4da:	2201      	movs	r2, #1
 800d4dc:	e7e8      	b.n	800d4b0 <__d2b+0x64>
 800d4de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4e6:	6038      	str	r0, [r7, #0]
 800d4e8:	6918      	ldr	r0, [r3, #16]
 800d4ea:	f7ff fd2d 	bl	800cf48 <__hi0bits>
 800d4ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4f2:	e7e5      	b.n	800d4c0 <__d2b+0x74>
 800d4f4:	0800e350 	.word	0x0800e350
 800d4f8:	0800e361 	.word	0x0800e361

0800d4fc <__ssputs_r>:
 800d4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d500:	688e      	ldr	r6, [r1, #8]
 800d502:	461f      	mov	r7, r3
 800d504:	42be      	cmp	r6, r7
 800d506:	680b      	ldr	r3, [r1, #0]
 800d508:	4682      	mov	sl, r0
 800d50a:	460c      	mov	r4, r1
 800d50c:	4690      	mov	r8, r2
 800d50e:	d82d      	bhi.n	800d56c <__ssputs_r+0x70>
 800d510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d514:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d518:	d026      	beq.n	800d568 <__ssputs_r+0x6c>
 800d51a:	6965      	ldr	r5, [r4, #20]
 800d51c:	6909      	ldr	r1, [r1, #16]
 800d51e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d522:	eba3 0901 	sub.w	r9, r3, r1
 800d526:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d52a:	1c7b      	adds	r3, r7, #1
 800d52c:	444b      	add	r3, r9
 800d52e:	106d      	asrs	r5, r5, #1
 800d530:	429d      	cmp	r5, r3
 800d532:	bf38      	it	cc
 800d534:	461d      	movcc	r5, r3
 800d536:	0553      	lsls	r3, r2, #21
 800d538:	d527      	bpl.n	800d58a <__ssputs_r+0x8e>
 800d53a:	4629      	mov	r1, r5
 800d53c:	f7ff fbd0 	bl	800cce0 <_malloc_r>
 800d540:	4606      	mov	r6, r0
 800d542:	b360      	cbz	r0, 800d59e <__ssputs_r+0xa2>
 800d544:	6921      	ldr	r1, [r4, #16]
 800d546:	464a      	mov	r2, r9
 800d548:	f000 fa06 	bl	800d958 <memcpy>
 800d54c:	89a3      	ldrh	r3, [r4, #12]
 800d54e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d556:	81a3      	strh	r3, [r4, #12]
 800d558:	6126      	str	r6, [r4, #16]
 800d55a:	6165      	str	r5, [r4, #20]
 800d55c:	444e      	add	r6, r9
 800d55e:	eba5 0509 	sub.w	r5, r5, r9
 800d562:	6026      	str	r6, [r4, #0]
 800d564:	60a5      	str	r5, [r4, #8]
 800d566:	463e      	mov	r6, r7
 800d568:	42be      	cmp	r6, r7
 800d56a:	d900      	bls.n	800d56e <__ssputs_r+0x72>
 800d56c:	463e      	mov	r6, r7
 800d56e:	6820      	ldr	r0, [r4, #0]
 800d570:	4632      	mov	r2, r6
 800d572:	4641      	mov	r1, r8
 800d574:	f000 f9c6 	bl	800d904 <memmove>
 800d578:	68a3      	ldr	r3, [r4, #8]
 800d57a:	1b9b      	subs	r3, r3, r6
 800d57c:	60a3      	str	r3, [r4, #8]
 800d57e:	6823      	ldr	r3, [r4, #0]
 800d580:	4433      	add	r3, r6
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	2000      	movs	r0, #0
 800d586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d58a:	462a      	mov	r2, r5
 800d58c:	f000 fa36 	bl	800d9fc <_realloc_r>
 800d590:	4606      	mov	r6, r0
 800d592:	2800      	cmp	r0, #0
 800d594:	d1e0      	bne.n	800d558 <__ssputs_r+0x5c>
 800d596:	6921      	ldr	r1, [r4, #16]
 800d598:	4650      	mov	r0, sl
 800d59a:	f7ff fb2d 	bl	800cbf8 <_free_r>
 800d59e:	230c      	movs	r3, #12
 800d5a0:	f8ca 3000 	str.w	r3, [sl]
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b0:	e7e9      	b.n	800d586 <__ssputs_r+0x8a>
	...

0800d5b4 <_svfiprintf_r>:
 800d5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b8:	4698      	mov	r8, r3
 800d5ba:	898b      	ldrh	r3, [r1, #12]
 800d5bc:	061b      	lsls	r3, r3, #24
 800d5be:	b09d      	sub	sp, #116	@ 0x74
 800d5c0:	4607      	mov	r7, r0
 800d5c2:	460d      	mov	r5, r1
 800d5c4:	4614      	mov	r4, r2
 800d5c6:	d510      	bpl.n	800d5ea <_svfiprintf_r+0x36>
 800d5c8:	690b      	ldr	r3, [r1, #16]
 800d5ca:	b973      	cbnz	r3, 800d5ea <_svfiprintf_r+0x36>
 800d5cc:	2140      	movs	r1, #64	@ 0x40
 800d5ce:	f7ff fb87 	bl	800cce0 <_malloc_r>
 800d5d2:	6028      	str	r0, [r5, #0]
 800d5d4:	6128      	str	r0, [r5, #16]
 800d5d6:	b930      	cbnz	r0, 800d5e6 <_svfiprintf_r+0x32>
 800d5d8:	230c      	movs	r3, #12
 800d5da:	603b      	str	r3, [r7, #0]
 800d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e0:	b01d      	add	sp, #116	@ 0x74
 800d5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e6:	2340      	movs	r3, #64	@ 0x40
 800d5e8:	616b      	str	r3, [r5, #20]
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5ee:	2320      	movs	r3, #32
 800d5f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5f8:	2330      	movs	r3, #48	@ 0x30
 800d5fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d798 <_svfiprintf_r+0x1e4>
 800d5fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d602:	f04f 0901 	mov.w	r9, #1
 800d606:	4623      	mov	r3, r4
 800d608:	469a      	mov	sl, r3
 800d60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d60e:	b10a      	cbz	r2, 800d614 <_svfiprintf_r+0x60>
 800d610:	2a25      	cmp	r2, #37	@ 0x25
 800d612:	d1f9      	bne.n	800d608 <_svfiprintf_r+0x54>
 800d614:	ebba 0b04 	subs.w	fp, sl, r4
 800d618:	d00b      	beq.n	800d632 <_svfiprintf_r+0x7e>
 800d61a:	465b      	mov	r3, fp
 800d61c:	4622      	mov	r2, r4
 800d61e:	4629      	mov	r1, r5
 800d620:	4638      	mov	r0, r7
 800d622:	f7ff ff6b 	bl	800d4fc <__ssputs_r>
 800d626:	3001      	adds	r0, #1
 800d628:	f000 80a7 	beq.w	800d77a <_svfiprintf_r+0x1c6>
 800d62c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d62e:	445a      	add	r2, fp
 800d630:	9209      	str	r2, [sp, #36]	@ 0x24
 800d632:	f89a 3000 	ldrb.w	r3, [sl]
 800d636:	2b00      	cmp	r3, #0
 800d638:	f000 809f 	beq.w	800d77a <_svfiprintf_r+0x1c6>
 800d63c:	2300      	movs	r3, #0
 800d63e:	f04f 32ff 	mov.w	r2, #4294967295
 800d642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d646:	f10a 0a01 	add.w	sl, sl, #1
 800d64a:	9304      	str	r3, [sp, #16]
 800d64c:	9307      	str	r3, [sp, #28]
 800d64e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d652:	931a      	str	r3, [sp, #104]	@ 0x68
 800d654:	4654      	mov	r4, sl
 800d656:	2205      	movs	r2, #5
 800d658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d65c:	484e      	ldr	r0, [pc, #312]	@ (800d798 <_svfiprintf_r+0x1e4>)
 800d65e:	f7f2 fdb7 	bl	80001d0 <memchr>
 800d662:	9a04      	ldr	r2, [sp, #16]
 800d664:	b9d8      	cbnz	r0, 800d69e <_svfiprintf_r+0xea>
 800d666:	06d0      	lsls	r0, r2, #27
 800d668:	bf44      	itt	mi
 800d66a:	2320      	movmi	r3, #32
 800d66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d670:	0711      	lsls	r1, r2, #28
 800d672:	bf44      	itt	mi
 800d674:	232b      	movmi	r3, #43	@ 0x2b
 800d676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d67a:	f89a 3000 	ldrb.w	r3, [sl]
 800d67e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d680:	d015      	beq.n	800d6ae <_svfiprintf_r+0xfa>
 800d682:	9a07      	ldr	r2, [sp, #28]
 800d684:	4654      	mov	r4, sl
 800d686:	2000      	movs	r0, #0
 800d688:	f04f 0c0a 	mov.w	ip, #10
 800d68c:	4621      	mov	r1, r4
 800d68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d692:	3b30      	subs	r3, #48	@ 0x30
 800d694:	2b09      	cmp	r3, #9
 800d696:	d94b      	bls.n	800d730 <_svfiprintf_r+0x17c>
 800d698:	b1b0      	cbz	r0, 800d6c8 <_svfiprintf_r+0x114>
 800d69a:	9207      	str	r2, [sp, #28]
 800d69c:	e014      	b.n	800d6c8 <_svfiprintf_r+0x114>
 800d69e:	eba0 0308 	sub.w	r3, r0, r8
 800d6a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	9304      	str	r3, [sp, #16]
 800d6aa:	46a2      	mov	sl, r4
 800d6ac:	e7d2      	b.n	800d654 <_svfiprintf_r+0xa0>
 800d6ae:	9b03      	ldr	r3, [sp, #12]
 800d6b0:	1d19      	adds	r1, r3, #4
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	9103      	str	r1, [sp, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	bfbb      	ittet	lt
 800d6ba:	425b      	neglt	r3, r3
 800d6bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d6c0:	9307      	strge	r3, [sp, #28]
 800d6c2:	9307      	strlt	r3, [sp, #28]
 800d6c4:	bfb8      	it	lt
 800d6c6:	9204      	strlt	r2, [sp, #16]
 800d6c8:	7823      	ldrb	r3, [r4, #0]
 800d6ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6cc:	d10a      	bne.n	800d6e4 <_svfiprintf_r+0x130>
 800d6ce:	7863      	ldrb	r3, [r4, #1]
 800d6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6d2:	d132      	bne.n	800d73a <_svfiprintf_r+0x186>
 800d6d4:	9b03      	ldr	r3, [sp, #12]
 800d6d6:	1d1a      	adds	r2, r3, #4
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	9203      	str	r2, [sp, #12]
 800d6dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6e0:	3402      	adds	r4, #2
 800d6e2:	9305      	str	r3, [sp, #20]
 800d6e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7a8 <_svfiprintf_r+0x1f4>
 800d6e8:	7821      	ldrb	r1, [r4, #0]
 800d6ea:	2203      	movs	r2, #3
 800d6ec:	4650      	mov	r0, sl
 800d6ee:	f7f2 fd6f 	bl	80001d0 <memchr>
 800d6f2:	b138      	cbz	r0, 800d704 <_svfiprintf_r+0x150>
 800d6f4:	9b04      	ldr	r3, [sp, #16]
 800d6f6:	eba0 000a 	sub.w	r0, r0, sl
 800d6fa:	2240      	movs	r2, #64	@ 0x40
 800d6fc:	4082      	lsls	r2, r0
 800d6fe:	4313      	orrs	r3, r2
 800d700:	3401      	adds	r4, #1
 800d702:	9304      	str	r3, [sp, #16]
 800d704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d708:	4824      	ldr	r0, [pc, #144]	@ (800d79c <_svfiprintf_r+0x1e8>)
 800d70a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d70e:	2206      	movs	r2, #6
 800d710:	f7f2 fd5e 	bl	80001d0 <memchr>
 800d714:	2800      	cmp	r0, #0
 800d716:	d036      	beq.n	800d786 <_svfiprintf_r+0x1d2>
 800d718:	4b21      	ldr	r3, [pc, #132]	@ (800d7a0 <_svfiprintf_r+0x1ec>)
 800d71a:	bb1b      	cbnz	r3, 800d764 <_svfiprintf_r+0x1b0>
 800d71c:	9b03      	ldr	r3, [sp, #12]
 800d71e:	3307      	adds	r3, #7
 800d720:	f023 0307 	bic.w	r3, r3, #7
 800d724:	3308      	adds	r3, #8
 800d726:	9303      	str	r3, [sp, #12]
 800d728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d72a:	4433      	add	r3, r6
 800d72c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d72e:	e76a      	b.n	800d606 <_svfiprintf_r+0x52>
 800d730:	fb0c 3202 	mla	r2, ip, r2, r3
 800d734:	460c      	mov	r4, r1
 800d736:	2001      	movs	r0, #1
 800d738:	e7a8      	b.n	800d68c <_svfiprintf_r+0xd8>
 800d73a:	2300      	movs	r3, #0
 800d73c:	3401      	adds	r4, #1
 800d73e:	9305      	str	r3, [sp, #20]
 800d740:	4619      	mov	r1, r3
 800d742:	f04f 0c0a 	mov.w	ip, #10
 800d746:	4620      	mov	r0, r4
 800d748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d74c:	3a30      	subs	r2, #48	@ 0x30
 800d74e:	2a09      	cmp	r2, #9
 800d750:	d903      	bls.n	800d75a <_svfiprintf_r+0x1a6>
 800d752:	2b00      	cmp	r3, #0
 800d754:	d0c6      	beq.n	800d6e4 <_svfiprintf_r+0x130>
 800d756:	9105      	str	r1, [sp, #20]
 800d758:	e7c4      	b.n	800d6e4 <_svfiprintf_r+0x130>
 800d75a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d75e:	4604      	mov	r4, r0
 800d760:	2301      	movs	r3, #1
 800d762:	e7f0      	b.n	800d746 <_svfiprintf_r+0x192>
 800d764:	ab03      	add	r3, sp, #12
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	462a      	mov	r2, r5
 800d76a:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a4 <_svfiprintf_r+0x1f0>)
 800d76c:	a904      	add	r1, sp, #16
 800d76e:	4638      	mov	r0, r7
 800d770:	f7fd fe82 	bl	800b478 <_printf_float>
 800d774:	1c42      	adds	r2, r0, #1
 800d776:	4606      	mov	r6, r0
 800d778:	d1d6      	bne.n	800d728 <_svfiprintf_r+0x174>
 800d77a:	89ab      	ldrh	r3, [r5, #12]
 800d77c:	065b      	lsls	r3, r3, #25
 800d77e:	f53f af2d 	bmi.w	800d5dc <_svfiprintf_r+0x28>
 800d782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d784:	e72c      	b.n	800d5e0 <_svfiprintf_r+0x2c>
 800d786:	ab03      	add	r3, sp, #12
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	462a      	mov	r2, r5
 800d78c:	4b05      	ldr	r3, [pc, #20]	@ (800d7a4 <_svfiprintf_r+0x1f0>)
 800d78e:	a904      	add	r1, sp, #16
 800d790:	4638      	mov	r0, r7
 800d792:	f7fe f909 	bl	800b9a8 <_printf_i>
 800d796:	e7ed      	b.n	800d774 <_svfiprintf_r+0x1c0>
 800d798:	0800e4b8 	.word	0x0800e4b8
 800d79c:	0800e4c2 	.word	0x0800e4c2
 800d7a0:	0800b479 	.word	0x0800b479
 800d7a4:	0800d4fd 	.word	0x0800d4fd
 800d7a8:	0800e4be 	.word	0x0800e4be

0800d7ac <__sflush_r>:
 800d7ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b4:	0716      	lsls	r6, r2, #28
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	d454      	bmi.n	800d866 <__sflush_r+0xba>
 800d7bc:	684b      	ldr	r3, [r1, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	dc02      	bgt.n	800d7c8 <__sflush_r+0x1c>
 800d7c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	dd48      	ble.n	800d85a <__sflush_r+0xae>
 800d7c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7ca:	2e00      	cmp	r6, #0
 800d7cc:	d045      	beq.n	800d85a <__sflush_r+0xae>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7d4:	682f      	ldr	r7, [r5, #0]
 800d7d6:	6a21      	ldr	r1, [r4, #32]
 800d7d8:	602b      	str	r3, [r5, #0]
 800d7da:	d030      	beq.n	800d83e <__sflush_r+0x92>
 800d7dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7de:	89a3      	ldrh	r3, [r4, #12]
 800d7e0:	0759      	lsls	r1, r3, #29
 800d7e2:	d505      	bpl.n	800d7f0 <__sflush_r+0x44>
 800d7e4:	6863      	ldr	r3, [r4, #4]
 800d7e6:	1ad2      	subs	r2, r2, r3
 800d7e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7ea:	b10b      	cbz	r3, 800d7f0 <__sflush_r+0x44>
 800d7ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7ee:	1ad2      	subs	r2, r2, r3
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7f4:	6a21      	ldr	r1, [r4, #32]
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	47b0      	blx	r6
 800d7fa:	1c43      	adds	r3, r0, #1
 800d7fc:	89a3      	ldrh	r3, [r4, #12]
 800d7fe:	d106      	bne.n	800d80e <__sflush_r+0x62>
 800d800:	6829      	ldr	r1, [r5, #0]
 800d802:	291d      	cmp	r1, #29
 800d804:	d82b      	bhi.n	800d85e <__sflush_r+0xb2>
 800d806:	4a2a      	ldr	r2, [pc, #168]	@ (800d8b0 <__sflush_r+0x104>)
 800d808:	410a      	asrs	r2, r1
 800d80a:	07d6      	lsls	r6, r2, #31
 800d80c:	d427      	bmi.n	800d85e <__sflush_r+0xb2>
 800d80e:	2200      	movs	r2, #0
 800d810:	6062      	str	r2, [r4, #4]
 800d812:	04d9      	lsls	r1, r3, #19
 800d814:	6922      	ldr	r2, [r4, #16]
 800d816:	6022      	str	r2, [r4, #0]
 800d818:	d504      	bpl.n	800d824 <__sflush_r+0x78>
 800d81a:	1c42      	adds	r2, r0, #1
 800d81c:	d101      	bne.n	800d822 <__sflush_r+0x76>
 800d81e:	682b      	ldr	r3, [r5, #0]
 800d820:	b903      	cbnz	r3, 800d824 <__sflush_r+0x78>
 800d822:	6560      	str	r0, [r4, #84]	@ 0x54
 800d824:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d826:	602f      	str	r7, [r5, #0]
 800d828:	b1b9      	cbz	r1, 800d85a <__sflush_r+0xae>
 800d82a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d82e:	4299      	cmp	r1, r3
 800d830:	d002      	beq.n	800d838 <__sflush_r+0x8c>
 800d832:	4628      	mov	r0, r5
 800d834:	f7ff f9e0 	bl	800cbf8 <_free_r>
 800d838:	2300      	movs	r3, #0
 800d83a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d83c:	e00d      	b.n	800d85a <__sflush_r+0xae>
 800d83e:	2301      	movs	r3, #1
 800d840:	4628      	mov	r0, r5
 800d842:	47b0      	blx	r6
 800d844:	4602      	mov	r2, r0
 800d846:	1c50      	adds	r0, r2, #1
 800d848:	d1c9      	bne.n	800d7de <__sflush_r+0x32>
 800d84a:	682b      	ldr	r3, [r5, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d0c6      	beq.n	800d7de <__sflush_r+0x32>
 800d850:	2b1d      	cmp	r3, #29
 800d852:	d001      	beq.n	800d858 <__sflush_r+0xac>
 800d854:	2b16      	cmp	r3, #22
 800d856:	d11e      	bne.n	800d896 <__sflush_r+0xea>
 800d858:	602f      	str	r7, [r5, #0]
 800d85a:	2000      	movs	r0, #0
 800d85c:	e022      	b.n	800d8a4 <__sflush_r+0xf8>
 800d85e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d862:	b21b      	sxth	r3, r3
 800d864:	e01b      	b.n	800d89e <__sflush_r+0xf2>
 800d866:	690f      	ldr	r7, [r1, #16]
 800d868:	2f00      	cmp	r7, #0
 800d86a:	d0f6      	beq.n	800d85a <__sflush_r+0xae>
 800d86c:	0793      	lsls	r3, r2, #30
 800d86e:	680e      	ldr	r6, [r1, #0]
 800d870:	bf08      	it	eq
 800d872:	694b      	ldreq	r3, [r1, #20]
 800d874:	600f      	str	r7, [r1, #0]
 800d876:	bf18      	it	ne
 800d878:	2300      	movne	r3, #0
 800d87a:	eba6 0807 	sub.w	r8, r6, r7
 800d87e:	608b      	str	r3, [r1, #8]
 800d880:	f1b8 0f00 	cmp.w	r8, #0
 800d884:	dde9      	ble.n	800d85a <__sflush_r+0xae>
 800d886:	6a21      	ldr	r1, [r4, #32]
 800d888:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d88a:	4643      	mov	r3, r8
 800d88c:	463a      	mov	r2, r7
 800d88e:	4628      	mov	r0, r5
 800d890:	47b0      	blx	r6
 800d892:	2800      	cmp	r0, #0
 800d894:	dc08      	bgt.n	800d8a8 <__sflush_r+0xfc>
 800d896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d89a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d89e:	81a3      	strh	r3, [r4, #12]
 800d8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a8:	4407      	add	r7, r0
 800d8aa:	eba8 0800 	sub.w	r8, r8, r0
 800d8ae:	e7e7      	b.n	800d880 <__sflush_r+0xd4>
 800d8b0:	dfbffffe 	.word	0xdfbffffe

0800d8b4 <_fflush_r>:
 800d8b4:	b538      	push	{r3, r4, r5, lr}
 800d8b6:	690b      	ldr	r3, [r1, #16]
 800d8b8:	4605      	mov	r5, r0
 800d8ba:	460c      	mov	r4, r1
 800d8bc:	b913      	cbnz	r3, 800d8c4 <_fflush_r+0x10>
 800d8be:	2500      	movs	r5, #0
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	bd38      	pop	{r3, r4, r5, pc}
 800d8c4:	b118      	cbz	r0, 800d8ce <_fflush_r+0x1a>
 800d8c6:	6a03      	ldr	r3, [r0, #32]
 800d8c8:	b90b      	cbnz	r3, 800d8ce <_fflush_r+0x1a>
 800d8ca:	f7fe fa19 	bl	800bd00 <__sinit>
 800d8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d0f3      	beq.n	800d8be <_fflush_r+0xa>
 800d8d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8d8:	07d0      	lsls	r0, r2, #31
 800d8da:	d404      	bmi.n	800d8e6 <_fflush_r+0x32>
 800d8dc:	0599      	lsls	r1, r3, #22
 800d8de:	d402      	bmi.n	800d8e6 <_fflush_r+0x32>
 800d8e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8e2:	f7fe fb38 	bl	800bf56 <__retarget_lock_acquire_recursive>
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	4621      	mov	r1, r4
 800d8ea:	f7ff ff5f 	bl	800d7ac <__sflush_r>
 800d8ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8f0:	07da      	lsls	r2, r3, #31
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	d4e4      	bmi.n	800d8c0 <_fflush_r+0xc>
 800d8f6:	89a3      	ldrh	r3, [r4, #12]
 800d8f8:	059b      	lsls	r3, r3, #22
 800d8fa:	d4e1      	bmi.n	800d8c0 <_fflush_r+0xc>
 800d8fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8fe:	f7fe fb2b 	bl	800bf58 <__retarget_lock_release_recursive>
 800d902:	e7dd      	b.n	800d8c0 <_fflush_r+0xc>

0800d904 <memmove>:
 800d904:	4288      	cmp	r0, r1
 800d906:	b510      	push	{r4, lr}
 800d908:	eb01 0402 	add.w	r4, r1, r2
 800d90c:	d902      	bls.n	800d914 <memmove+0x10>
 800d90e:	4284      	cmp	r4, r0
 800d910:	4623      	mov	r3, r4
 800d912:	d807      	bhi.n	800d924 <memmove+0x20>
 800d914:	1e43      	subs	r3, r0, #1
 800d916:	42a1      	cmp	r1, r4
 800d918:	d008      	beq.n	800d92c <memmove+0x28>
 800d91a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d91e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d922:	e7f8      	b.n	800d916 <memmove+0x12>
 800d924:	4402      	add	r2, r0
 800d926:	4601      	mov	r1, r0
 800d928:	428a      	cmp	r2, r1
 800d92a:	d100      	bne.n	800d92e <memmove+0x2a>
 800d92c:	bd10      	pop	{r4, pc}
 800d92e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d936:	e7f7      	b.n	800d928 <memmove+0x24>

0800d938 <_sbrk_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4d06      	ldr	r5, [pc, #24]	@ (800d954 <_sbrk_r+0x1c>)
 800d93c:	2300      	movs	r3, #0
 800d93e:	4604      	mov	r4, r0
 800d940:	4608      	mov	r0, r1
 800d942:	602b      	str	r3, [r5, #0]
 800d944:	f7f3 ffac 	bl	80018a0 <_sbrk>
 800d948:	1c43      	adds	r3, r0, #1
 800d94a:	d102      	bne.n	800d952 <_sbrk_r+0x1a>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	b103      	cbz	r3, 800d952 <_sbrk_r+0x1a>
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	bd38      	pop	{r3, r4, r5, pc}
 800d954:	20001730 	.word	0x20001730

0800d958 <memcpy>:
 800d958:	440a      	add	r2, r1
 800d95a:	4291      	cmp	r1, r2
 800d95c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d960:	d100      	bne.n	800d964 <memcpy+0xc>
 800d962:	4770      	bx	lr
 800d964:	b510      	push	{r4, lr}
 800d966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d96a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d96e:	4291      	cmp	r1, r2
 800d970:	d1f9      	bne.n	800d966 <memcpy+0xe>
 800d972:	bd10      	pop	{r4, pc}

0800d974 <__assert_func>:
 800d974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d976:	4614      	mov	r4, r2
 800d978:	461a      	mov	r2, r3
 800d97a:	4b09      	ldr	r3, [pc, #36]	@ (800d9a0 <__assert_func+0x2c>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4605      	mov	r5, r0
 800d980:	68d8      	ldr	r0, [r3, #12]
 800d982:	b954      	cbnz	r4, 800d99a <__assert_func+0x26>
 800d984:	4b07      	ldr	r3, [pc, #28]	@ (800d9a4 <__assert_func+0x30>)
 800d986:	461c      	mov	r4, r3
 800d988:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d98c:	9100      	str	r1, [sp, #0]
 800d98e:	462b      	mov	r3, r5
 800d990:	4905      	ldr	r1, [pc, #20]	@ (800d9a8 <__assert_func+0x34>)
 800d992:	f000 f86f 	bl	800da74 <fiprintf>
 800d996:	f000 f87f 	bl	800da98 <abort>
 800d99a:	4b04      	ldr	r3, [pc, #16]	@ (800d9ac <__assert_func+0x38>)
 800d99c:	e7f4      	b.n	800d988 <__assert_func+0x14>
 800d99e:	bf00      	nop
 800d9a0:	20000188 	.word	0x20000188
 800d9a4:	0800e50e 	.word	0x0800e50e
 800d9a8:	0800e4e0 	.word	0x0800e4e0
 800d9ac:	0800e4d3 	.word	0x0800e4d3

0800d9b0 <_calloc_r>:
 800d9b0:	b570      	push	{r4, r5, r6, lr}
 800d9b2:	fba1 5402 	umull	r5, r4, r1, r2
 800d9b6:	b93c      	cbnz	r4, 800d9c8 <_calloc_r+0x18>
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7ff f991 	bl	800cce0 <_malloc_r>
 800d9be:	4606      	mov	r6, r0
 800d9c0:	b928      	cbnz	r0, 800d9ce <_calloc_r+0x1e>
 800d9c2:	2600      	movs	r6, #0
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	bd70      	pop	{r4, r5, r6, pc}
 800d9c8:	220c      	movs	r2, #12
 800d9ca:	6002      	str	r2, [r0, #0]
 800d9cc:	e7f9      	b.n	800d9c2 <_calloc_r+0x12>
 800d9ce:	462a      	mov	r2, r5
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	f7fe fa42 	bl	800be5a <memset>
 800d9d6:	e7f5      	b.n	800d9c4 <_calloc_r+0x14>

0800d9d8 <__ascii_mbtowc>:
 800d9d8:	b082      	sub	sp, #8
 800d9da:	b901      	cbnz	r1, 800d9de <__ascii_mbtowc+0x6>
 800d9dc:	a901      	add	r1, sp, #4
 800d9de:	b142      	cbz	r2, 800d9f2 <__ascii_mbtowc+0x1a>
 800d9e0:	b14b      	cbz	r3, 800d9f6 <__ascii_mbtowc+0x1e>
 800d9e2:	7813      	ldrb	r3, [r2, #0]
 800d9e4:	600b      	str	r3, [r1, #0]
 800d9e6:	7812      	ldrb	r2, [r2, #0]
 800d9e8:	1e10      	subs	r0, r2, #0
 800d9ea:	bf18      	it	ne
 800d9ec:	2001      	movne	r0, #1
 800d9ee:	b002      	add	sp, #8
 800d9f0:	4770      	bx	lr
 800d9f2:	4610      	mov	r0, r2
 800d9f4:	e7fb      	b.n	800d9ee <__ascii_mbtowc+0x16>
 800d9f6:	f06f 0001 	mvn.w	r0, #1
 800d9fa:	e7f8      	b.n	800d9ee <__ascii_mbtowc+0x16>

0800d9fc <_realloc_r>:
 800d9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da00:	4680      	mov	r8, r0
 800da02:	4615      	mov	r5, r2
 800da04:	460c      	mov	r4, r1
 800da06:	b921      	cbnz	r1, 800da12 <_realloc_r+0x16>
 800da08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da0c:	4611      	mov	r1, r2
 800da0e:	f7ff b967 	b.w	800cce0 <_malloc_r>
 800da12:	b92a      	cbnz	r2, 800da20 <_realloc_r+0x24>
 800da14:	f7ff f8f0 	bl	800cbf8 <_free_r>
 800da18:	2400      	movs	r4, #0
 800da1a:	4620      	mov	r0, r4
 800da1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da20:	f000 f841 	bl	800daa6 <_malloc_usable_size_r>
 800da24:	4285      	cmp	r5, r0
 800da26:	4606      	mov	r6, r0
 800da28:	d802      	bhi.n	800da30 <_realloc_r+0x34>
 800da2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800da2e:	d8f4      	bhi.n	800da1a <_realloc_r+0x1e>
 800da30:	4629      	mov	r1, r5
 800da32:	4640      	mov	r0, r8
 800da34:	f7ff f954 	bl	800cce0 <_malloc_r>
 800da38:	4607      	mov	r7, r0
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d0ec      	beq.n	800da18 <_realloc_r+0x1c>
 800da3e:	42b5      	cmp	r5, r6
 800da40:	462a      	mov	r2, r5
 800da42:	4621      	mov	r1, r4
 800da44:	bf28      	it	cs
 800da46:	4632      	movcs	r2, r6
 800da48:	f7ff ff86 	bl	800d958 <memcpy>
 800da4c:	4621      	mov	r1, r4
 800da4e:	4640      	mov	r0, r8
 800da50:	f7ff f8d2 	bl	800cbf8 <_free_r>
 800da54:	463c      	mov	r4, r7
 800da56:	e7e0      	b.n	800da1a <_realloc_r+0x1e>

0800da58 <__ascii_wctomb>:
 800da58:	4603      	mov	r3, r0
 800da5a:	4608      	mov	r0, r1
 800da5c:	b141      	cbz	r1, 800da70 <__ascii_wctomb+0x18>
 800da5e:	2aff      	cmp	r2, #255	@ 0xff
 800da60:	d904      	bls.n	800da6c <__ascii_wctomb+0x14>
 800da62:	228a      	movs	r2, #138	@ 0x8a
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	f04f 30ff 	mov.w	r0, #4294967295
 800da6a:	4770      	bx	lr
 800da6c:	700a      	strb	r2, [r1, #0]
 800da6e:	2001      	movs	r0, #1
 800da70:	4770      	bx	lr
	...

0800da74 <fiprintf>:
 800da74:	b40e      	push	{r1, r2, r3}
 800da76:	b503      	push	{r0, r1, lr}
 800da78:	4601      	mov	r1, r0
 800da7a:	ab03      	add	r3, sp, #12
 800da7c:	4805      	ldr	r0, [pc, #20]	@ (800da94 <fiprintf+0x20>)
 800da7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800da82:	6800      	ldr	r0, [r0, #0]
 800da84:	9301      	str	r3, [sp, #4]
 800da86:	f000 f83f 	bl	800db08 <_vfiprintf_r>
 800da8a:	b002      	add	sp, #8
 800da8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da90:	b003      	add	sp, #12
 800da92:	4770      	bx	lr
 800da94:	20000188 	.word	0x20000188

0800da98 <abort>:
 800da98:	b508      	push	{r3, lr}
 800da9a:	2006      	movs	r0, #6
 800da9c:	f000 fa08 	bl	800deb0 <raise>
 800daa0:	2001      	movs	r0, #1
 800daa2:	f7f3 fe85 	bl	80017b0 <_exit>

0800daa6 <_malloc_usable_size_r>:
 800daa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daaa:	1f18      	subs	r0, r3, #4
 800daac:	2b00      	cmp	r3, #0
 800daae:	bfbc      	itt	lt
 800dab0:	580b      	ldrlt	r3, [r1, r0]
 800dab2:	18c0      	addlt	r0, r0, r3
 800dab4:	4770      	bx	lr

0800dab6 <__sfputc_r>:
 800dab6:	6893      	ldr	r3, [r2, #8]
 800dab8:	3b01      	subs	r3, #1
 800daba:	2b00      	cmp	r3, #0
 800dabc:	b410      	push	{r4}
 800dabe:	6093      	str	r3, [r2, #8]
 800dac0:	da08      	bge.n	800dad4 <__sfputc_r+0x1e>
 800dac2:	6994      	ldr	r4, [r2, #24]
 800dac4:	42a3      	cmp	r3, r4
 800dac6:	db01      	blt.n	800dacc <__sfputc_r+0x16>
 800dac8:	290a      	cmp	r1, #10
 800daca:	d103      	bne.n	800dad4 <__sfputc_r+0x1e>
 800dacc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dad0:	f000 b932 	b.w	800dd38 <__swbuf_r>
 800dad4:	6813      	ldr	r3, [r2, #0]
 800dad6:	1c58      	adds	r0, r3, #1
 800dad8:	6010      	str	r0, [r2, #0]
 800dada:	7019      	strb	r1, [r3, #0]
 800dadc:	4608      	mov	r0, r1
 800dade:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <__sfputs_r>:
 800dae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae6:	4606      	mov	r6, r0
 800dae8:	460f      	mov	r7, r1
 800daea:	4614      	mov	r4, r2
 800daec:	18d5      	adds	r5, r2, r3
 800daee:	42ac      	cmp	r4, r5
 800daf0:	d101      	bne.n	800daf6 <__sfputs_r+0x12>
 800daf2:	2000      	movs	r0, #0
 800daf4:	e007      	b.n	800db06 <__sfputs_r+0x22>
 800daf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dafa:	463a      	mov	r2, r7
 800dafc:	4630      	mov	r0, r6
 800dafe:	f7ff ffda 	bl	800dab6 <__sfputc_r>
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	d1f3      	bne.n	800daee <__sfputs_r+0xa>
 800db06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db08 <_vfiprintf_r>:
 800db08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	460d      	mov	r5, r1
 800db0e:	b09d      	sub	sp, #116	@ 0x74
 800db10:	4614      	mov	r4, r2
 800db12:	4698      	mov	r8, r3
 800db14:	4606      	mov	r6, r0
 800db16:	b118      	cbz	r0, 800db20 <_vfiprintf_r+0x18>
 800db18:	6a03      	ldr	r3, [r0, #32]
 800db1a:	b90b      	cbnz	r3, 800db20 <_vfiprintf_r+0x18>
 800db1c:	f7fe f8f0 	bl	800bd00 <__sinit>
 800db20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db22:	07d9      	lsls	r1, r3, #31
 800db24:	d405      	bmi.n	800db32 <_vfiprintf_r+0x2a>
 800db26:	89ab      	ldrh	r3, [r5, #12]
 800db28:	059a      	lsls	r2, r3, #22
 800db2a:	d402      	bmi.n	800db32 <_vfiprintf_r+0x2a>
 800db2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db2e:	f7fe fa12 	bl	800bf56 <__retarget_lock_acquire_recursive>
 800db32:	89ab      	ldrh	r3, [r5, #12]
 800db34:	071b      	lsls	r3, r3, #28
 800db36:	d501      	bpl.n	800db3c <_vfiprintf_r+0x34>
 800db38:	692b      	ldr	r3, [r5, #16]
 800db3a:	b99b      	cbnz	r3, 800db64 <_vfiprintf_r+0x5c>
 800db3c:	4629      	mov	r1, r5
 800db3e:	4630      	mov	r0, r6
 800db40:	f000 f938 	bl	800ddb4 <__swsetup_r>
 800db44:	b170      	cbz	r0, 800db64 <_vfiprintf_r+0x5c>
 800db46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db48:	07dc      	lsls	r4, r3, #31
 800db4a:	d504      	bpl.n	800db56 <_vfiprintf_r+0x4e>
 800db4c:	f04f 30ff 	mov.w	r0, #4294967295
 800db50:	b01d      	add	sp, #116	@ 0x74
 800db52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db56:	89ab      	ldrh	r3, [r5, #12]
 800db58:	0598      	lsls	r0, r3, #22
 800db5a:	d4f7      	bmi.n	800db4c <_vfiprintf_r+0x44>
 800db5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db5e:	f7fe f9fb 	bl	800bf58 <__retarget_lock_release_recursive>
 800db62:	e7f3      	b.n	800db4c <_vfiprintf_r+0x44>
 800db64:	2300      	movs	r3, #0
 800db66:	9309      	str	r3, [sp, #36]	@ 0x24
 800db68:	2320      	movs	r3, #32
 800db6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800db72:	2330      	movs	r3, #48	@ 0x30
 800db74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dd24 <_vfiprintf_r+0x21c>
 800db78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db7c:	f04f 0901 	mov.w	r9, #1
 800db80:	4623      	mov	r3, r4
 800db82:	469a      	mov	sl, r3
 800db84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db88:	b10a      	cbz	r2, 800db8e <_vfiprintf_r+0x86>
 800db8a:	2a25      	cmp	r2, #37	@ 0x25
 800db8c:	d1f9      	bne.n	800db82 <_vfiprintf_r+0x7a>
 800db8e:	ebba 0b04 	subs.w	fp, sl, r4
 800db92:	d00b      	beq.n	800dbac <_vfiprintf_r+0xa4>
 800db94:	465b      	mov	r3, fp
 800db96:	4622      	mov	r2, r4
 800db98:	4629      	mov	r1, r5
 800db9a:	4630      	mov	r0, r6
 800db9c:	f7ff ffa2 	bl	800dae4 <__sfputs_r>
 800dba0:	3001      	adds	r0, #1
 800dba2:	f000 80a7 	beq.w	800dcf4 <_vfiprintf_r+0x1ec>
 800dba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dba8:	445a      	add	r2, fp
 800dbaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbac:	f89a 3000 	ldrb.w	r3, [sl]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f000 809f 	beq.w	800dcf4 <_vfiprintf_r+0x1ec>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbc0:	f10a 0a01 	add.w	sl, sl, #1
 800dbc4:	9304      	str	r3, [sp, #16]
 800dbc6:	9307      	str	r3, [sp, #28]
 800dbc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbce:	4654      	mov	r4, sl
 800dbd0:	2205      	movs	r2, #5
 800dbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd6:	4853      	ldr	r0, [pc, #332]	@ (800dd24 <_vfiprintf_r+0x21c>)
 800dbd8:	f7f2 fafa 	bl	80001d0 <memchr>
 800dbdc:	9a04      	ldr	r2, [sp, #16]
 800dbde:	b9d8      	cbnz	r0, 800dc18 <_vfiprintf_r+0x110>
 800dbe0:	06d1      	lsls	r1, r2, #27
 800dbe2:	bf44      	itt	mi
 800dbe4:	2320      	movmi	r3, #32
 800dbe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbea:	0713      	lsls	r3, r2, #28
 800dbec:	bf44      	itt	mi
 800dbee:	232b      	movmi	r3, #43	@ 0x2b
 800dbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800dbf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbfa:	d015      	beq.n	800dc28 <_vfiprintf_r+0x120>
 800dbfc:	9a07      	ldr	r2, [sp, #28]
 800dbfe:	4654      	mov	r4, sl
 800dc00:	2000      	movs	r0, #0
 800dc02:	f04f 0c0a 	mov.w	ip, #10
 800dc06:	4621      	mov	r1, r4
 800dc08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc0c:	3b30      	subs	r3, #48	@ 0x30
 800dc0e:	2b09      	cmp	r3, #9
 800dc10:	d94b      	bls.n	800dcaa <_vfiprintf_r+0x1a2>
 800dc12:	b1b0      	cbz	r0, 800dc42 <_vfiprintf_r+0x13a>
 800dc14:	9207      	str	r2, [sp, #28]
 800dc16:	e014      	b.n	800dc42 <_vfiprintf_r+0x13a>
 800dc18:	eba0 0308 	sub.w	r3, r0, r8
 800dc1c:	fa09 f303 	lsl.w	r3, r9, r3
 800dc20:	4313      	orrs	r3, r2
 800dc22:	9304      	str	r3, [sp, #16]
 800dc24:	46a2      	mov	sl, r4
 800dc26:	e7d2      	b.n	800dbce <_vfiprintf_r+0xc6>
 800dc28:	9b03      	ldr	r3, [sp, #12]
 800dc2a:	1d19      	adds	r1, r3, #4
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	9103      	str	r1, [sp, #12]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	bfbb      	ittet	lt
 800dc34:	425b      	neglt	r3, r3
 800dc36:	f042 0202 	orrlt.w	r2, r2, #2
 800dc3a:	9307      	strge	r3, [sp, #28]
 800dc3c:	9307      	strlt	r3, [sp, #28]
 800dc3e:	bfb8      	it	lt
 800dc40:	9204      	strlt	r2, [sp, #16]
 800dc42:	7823      	ldrb	r3, [r4, #0]
 800dc44:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc46:	d10a      	bne.n	800dc5e <_vfiprintf_r+0x156>
 800dc48:	7863      	ldrb	r3, [r4, #1]
 800dc4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc4c:	d132      	bne.n	800dcb4 <_vfiprintf_r+0x1ac>
 800dc4e:	9b03      	ldr	r3, [sp, #12]
 800dc50:	1d1a      	adds	r2, r3, #4
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	9203      	str	r2, [sp, #12]
 800dc56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc5a:	3402      	adds	r4, #2
 800dc5c:	9305      	str	r3, [sp, #20]
 800dc5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd34 <_vfiprintf_r+0x22c>
 800dc62:	7821      	ldrb	r1, [r4, #0]
 800dc64:	2203      	movs	r2, #3
 800dc66:	4650      	mov	r0, sl
 800dc68:	f7f2 fab2 	bl	80001d0 <memchr>
 800dc6c:	b138      	cbz	r0, 800dc7e <_vfiprintf_r+0x176>
 800dc6e:	9b04      	ldr	r3, [sp, #16]
 800dc70:	eba0 000a 	sub.w	r0, r0, sl
 800dc74:	2240      	movs	r2, #64	@ 0x40
 800dc76:	4082      	lsls	r2, r0
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	3401      	adds	r4, #1
 800dc7c:	9304      	str	r3, [sp, #16]
 800dc7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc82:	4829      	ldr	r0, [pc, #164]	@ (800dd28 <_vfiprintf_r+0x220>)
 800dc84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc88:	2206      	movs	r2, #6
 800dc8a:	f7f2 faa1 	bl	80001d0 <memchr>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d03f      	beq.n	800dd12 <_vfiprintf_r+0x20a>
 800dc92:	4b26      	ldr	r3, [pc, #152]	@ (800dd2c <_vfiprintf_r+0x224>)
 800dc94:	bb1b      	cbnz	r3, 800dcde <_vfiprintf_r+0x1d6>
 800dc96:	9b03      	ldr	r3, [sp, #12]
 800dc98:	3307      	adds	r3, #7
 800dc9a:	f023 0307 	bic.w	r3, r3, #7
 800dc9e:	3308      	adds	r3, #8
 800dca0:	9303      	str	r3, [sp, #12]
 800dca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dca4:	443b      	add	r3, r7
 800dca6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dca8:	e76a      	b.n	800db80 <_vfiprintf_r+0x78>
 800dcaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcae:	460c      	mov	r4, r1
 800dcb0:	2001      	movs	r0, #1
 800dcb2:	e7a8      	b.n	800dc06 <_vfiprintf_r+0xfe>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	3401      	adds	r4, #1
 800dcb8:	9305      	str	r3, [sp, #20]
 800dcba:	4619      	mov	r1, r3
 800dcbc:	f04f 0c0a 	mov.w	ip, #10
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcc6:	3a30      	subs	r2, #48	@ 0x30
 800dcc8:	2a09      	cmp	r2, #9
 800dcca:	d903      	bls.n	800dcd4 <_vfiprintf_r+0x1cc>
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d0c6      	beq.n	800dc5e <_vfiprintf_r+0x156>
 800dcd0:	9105      	str	r1, [sp, #20]
 800dcd2:	e7c4      	b.n	800dc5e <_vfiprintf_r+0x156>
 800dcd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcd8:	4604      	mov	r4, r0
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e7f0      	b.n	800dcc0 <_vfiprintf_r+0x1b8>
 800dcde:	ab03      	add	r3, sp, #12
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	462a      	mov	r2, r5
 800dce4:	4b12      	ldr	r3, [pc, #72]	@ (800dd30 <_vfiprintf_r+0x228>)
 800dce6:	a904      	add	r1, sp, #16
 800dce8:	4630      	mov	r0, r6
 800dcea:	f7fd fbc5 	bl	800b478 <_printf_float>
 800dcee:	4607      	mov	r7, r0
 800dcf0:	1c78      	adds	r0, r7, #1
 800dcf2:	d1d6      	bne.n	800dca2 <_vfiprintf_r+0x19a>
 800dcf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcf6:	07d9      	lsls	r1, r3, #31
 800dcf8:	d405      	bmi.n	800dd06 <_vfiprintf_r+0x1fe>
 800dcfa:	89ab      	ldrh	r3, [r5, #12]
 800dcfc:	059a      	lsls	r2, r3, #22
 800dcfe:	d402      	bmi.n	800dd06 <_vfiprintf_r+0x1fe>
 800dd00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd02:	f7fe f929 	bl	800bf58 <__retarget_lock_release_recursive>
 800dd06:	89ab      	ldrh	r3, [r5, #12]
 800dd08:	065b      	lsls	r3, r3, #25
 800dd0a:	f53f af1f 	bmi.w	800db4c <_vfiprintf_r+0x44>
 800dd0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd10:	e71e      	b.n	800db50 <_vfiprintf_r+0x48>
 800dd12:	ab03      	add	r3, sp, #12
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	462a      	mov	r2, r5
 800dd18:	4b05      	ldr	r3, [pc, #20]	@ (800dd30 <_vfiprintf_r+0x228>)
 800dd1a:	a904      	add	r1, sp, #16
 800dd1c:	4630      	mov	r0, r6
 800dd1e:	f7fd fe43 	bl	800b9a8 <_printf_i>
 800dd22:	e7e4      	b.n	800dcee <_vfiprintf_r+0x1e6>
 800dd24:	0800e4b8 	.word	0x0800e4b8
 800dd28:	0800e4c2 	.word	0x0800e4c2
 800dd2c:	0800b479 	.word	0x0800b479
 800dd30:	0800dae5 	.word	0x0800dae5
 800dd34:	0800e4be 	.word	0x0800e4be

0800dd38 <__swbuf_r>:
 800dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3a:	460e      	mov	r6, r1
 800dd3c:	4614      	mov	r4, r2
 800dd3e:	4605      	mov	r5, r0
 800dd40:	b118      	cbz	r0, 800dd4a <__swbuf_r+0x12>
 800dd42:	6a03      	ldr	r3, [r0, #32]
 800dd44:	b90b      	cbnz	r3, 800dd4a <__swbuf_r+0x12>
 800dd46:	f7fd ffdb 	bl	800bd00 <__sinit>
 800dd4a:	69a3      	ldr	r3, [r4, #24]
 800dd4c:	60a3      	str	r3, [r4, #8]
 800dd4e:	89a3      	ldrh	r3, [r4, #12]
 800dd50:	071a      	lsls	r2, r3, #28
 800dd52:	d501      	bpl.n	800dd58 <__swbuf_r+0x20>
 800dd54:	6923      	ldr	r3, [r4, #16]
 800dd56:	b943      	cbnz	r3, 800dd6a <__swbuf_r+0x32>
 800dd58:	4621      	mov	r1, r4
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f000 f82a 	bl	800ddb4 <__swsetup_r>
 800dd60:	b118      	cbz	r0, 800dd6a <__swbuf_r+0x32>
 800dd62:	f04f 37ff 	mov.w	r7, #4294967295
 800dd66:	4638      	mov	r0, r7
 800dd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd6a:	6823      	ldr	r3, [r4, #0]
 800dd6c:	6922      	ldr	r2, [r4, #16]
 800dd6e:	1a98      	subs	r0, r3, r2
 800dd70:	6963      	ldr	r3, [r4, #20]
 800dd72:	b2f6      	uxtb	r6, r6
 800dd74:	4283      	cmp	r3, r0
 800dd76:	4637      	mov	r7, r6
 800dd78:	dc05      	bgt.n	800dd86 <__swbuf_r+0x4e>
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	f7ff fd99 	bl	800d8b4 <_fflush_r>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	d1ed      	bne.n	800dd62 <__swbuf_r+0x2a>
 800dd86:	68a3      	ldr	r3, [r4, #8]
 800dd88:	3b01      	subs	r3, #1
 800dd8a:	60a3      	str	r3, [r4, #8]
 800dd8c:	6823      	ldr	r3, [r4, #0]
 800dd8e:	1c5a      	adds	r2, r3, #1
 800dd90:	6022      	str	r2, [r4, #0]
 800dd92:	701e      	strb	r6, [r3, #0]
 800dd94:	6962      	ldr	r2, [r4, #20]
 800dd96:	1c43      	adds	r3, r0, #1
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d004      	beq.n	800dda6 <__swbuf_r+0x6e>
 800dd9c:	89a3      	ldrh	r3, [r4, #12]
 800dd9e:	07db      	lsls	r3, r3, #31
 800dda0:	d5e1      	bpl.n	800dd66 <__swbuf_r+0x2e>
 800dda2:	2e0a      	cmp	r6, #10
 800dda4:	d1df      	bne.n	800dd66 <__swbuf_r+0x2e>
 800dda6:	4621      	mov	r1, r4
 800dda8:	4628      	mov	r0, r5
 800ddaa:	f7ff fd83 	bl	800d8b4 <_fflush_r>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d0d9      	beq.n	800dd66 <__swbuf_r+0x2e>
 800ddb2:	e7d6      	b.n	800dd62 <__swbuf_r+0x2a>

0800ddb4 <__swsetup_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4b29      	ldr	r3, [pc, #164]	@ (800de5c <__swsetup_r+0xa8>)
 800ddb8:	4605      	mov	r5, r0
 800ddba:	6818      	ldr	r0, [r3, #0]
 800ddbc:	460c      	mov	r4, r1
 800ddbe:	b118      	cbz	r0, 800ddc8 <__swsetup_r+0x14>
 800ddc0:	6a03      	ldr	r3, [r0, #32]
 800ddc2:	b90b      	cbnz	r3, 800ddc8 <__swsetup_r+0x14>
 800ddc4:	f7fd ff9c 	bl	800bd00 <__sinit>
 800ddc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddcc:	0719      	lsls	r1, r3, #28
 800ddce:	d422      	bmi.n	800de16 <__swsetup_r+0x62>
 800ddd0:	06da      	lsls	r2, r3, #27
 800ddd2:	d407      	bmi.n	800dde4 <__swsetup_r+0x30>
 800ddd4:	2209      	movs	r2, #9
 800ddd6:	602a      	str	r2, [r5, #0]
 800ddd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dddc:	81a3      	strh	r3, [r4, #12]
 800ddde:	f04f 30ff 	mov.w	r0, #4294967295
 800dde2:	e033      	b.n	800de4c <__swsetup_r+0x98>
 800dde4:	0758      	lsls	r0, r3, #29
 800dde6:	d512      	bpl.n	800de0e <__swsetup_r+0x5a>
 800dde8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddea:	b141      	cbz	r1, 800ddfe <__swsetup_r+0x4a>
 800ddec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddf0:	4299      	cmp	r1, r3
 800ddf2:	d002      	beq.n	800ddfa <__swsetup_r+0x46>
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	f7fe feff 	bl	800cbf8 <_free_r>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800de04:	81a3      	strh	r3, [r4, #12]
 800de06:	2300      	movs	r3, #0
 800de08:	6063      	str	r3, [r4, #4]
 800de0a:	6923      	ldr	r3, [r4, #16]
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	89a3      	ldrh	r3, [r4, #12]
 800de10:	f043 0308 	orr.w	r3, r3, #8
 800de14:	81a3      	strh	r3, [r4, #12]
 800de16:	6923      	ldr	r3, [r4, #16]
 800de18:	b94b      	cbnz	r3, 800de2e <__swsetup_r+0x7a>
 800de1a:	89a3      	ldrh	r3, [r4, #12]
 800de1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800de20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de24:	d003      	beq.n	800de2e <__swsetup_r+0x7a>
 800de26:	4621      	mov	r1, r4
 800de28:	4628      	mov	r0, r5
 800de2a:	f000 f883 	bl	800df34 <__smakebuf_r>
 800de2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de32:	f013 0201 	ands.w	r2, r3, #1
 800de36:	d00a      	beq.n	800de4e <__swsetup_r+0x9a>
 800de38:	2200      	movs	r2, #0
 800de3a:	60a2      	str	r2, [r4, #8]
 800de3c:	6962      	ldr	r2, [r4, #20]
 800de3e:	4252      	negs	r2, r2
 800de40:	61a2      	str	r2, [r4, #24]
 800de42:	6922      	ldr	r2, [r4, #16]
 800de44:	b942      	cbnz	r2, 800de58 <__swsetup_r+0xa4>
 800de46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800de4a:	d1c5      	bne.n	800ddd8 <__swsetup_r+0x24>
 800de4c:	bd38      	pop	{r3, r4, r5, pc}
 800de4e:	0799      	lsls	r1, r3, #30
 800de50:	bf58      	it	pl
 800de52:	6962      	ldrpl	r2, [r4, #20]
 800de54:	60a2      	str	r2, [r4, #8]
 800de56:	e7f4      	b.n	800de42 <__swsetup_r+0x8e>
 800de58:	2000      	movs	r0, #0
 800de5a:	e7f7      	b.n	800de4c <__swsetup_r+0x98>
 800de5c:	20000188 	.word	0x20000188

0800de60 <_raise_r>:
 800de60:	291f      	cmp	r1, #31
 800de62:	b538      	push	{r3, r4, r5, lr}
 800de64:	4605      	mov	r5, r0
 800de66:	460c      	mov	r4, r1
 800de68:	d904      	bls.n	800de74 <_raise_r+0x14>
 800de6a:	2316      	movs	r3, #22
 800de6c:	6003      	str	r3, [r0, #0]
 800de6e:	f04f 30ff 	mov.w	r0, #4294967295
 800de72:	bd38      	pop	{r3, r4, r5, pc}
 800de74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de76:	b112      	cbz	r2, 800de7e <_raise_r+0x1e>
 800de78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de7c:	b94b      	cbnz	r3, 800de92 <_raise_r+0x32>
 800de7e:	4628      	mov	r0, r5
 800de80:	f000 f830 	bl	800dee4 <_getpid_r>
 800de84:	4622      	mov	r2, r4
 800de86:	4601      	mov	r1, r0
 800de88:	4628      	mov	r0, r5
 800de8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de8e:	f000 b817 	b.w	800dec0 <_kill_r>
 800de92:	2b01      	cmp	r3, #1
 800de94:	d00a      	beq.n	800deac <_raise_r+0x4c>
 800de96:	1c59      	adds	r1, r3, #1
 800de98:	d103      	bne.n	800dea2 <_raise_r+0x42>
 800de9a:	2316      	movs	r3, #22
 800de9c:	6003      	str	r3, [r0, #0]
 800de9e:	2001      	movs	r0, #1
 800dea0:	e7e7      	b.n	800de72 <_raise_r+0x12>
 800dea2:	2100      	movs	r1, #0
 800dea4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dea8:	4620      	mov	r0, r4
 800deaa:	4798      	blx	r3
 800deac:	2000      	movs	r0, #0
 800deae:	e7e0      	b.n	800de72 <_raise_r+0x12>

0800deb0 <raise>:
 800deb0:	4b02      	ldr	r3, [pc, #8]	@ (800debc <raise+0xc>)
 800deb2:	4601      	mov	r1, r0
 800deb4:	6818      	ldr	r0, [r3, #0]
 800deb6:	f7ff bfd3 	b.w	800de60 <_raise_r>
 800deba:	bf00      	nop
 800debc:	20000188 	.word	0x20000188

0800dec0 <_kill_r>:
 800dec0:	b538      	push	{r3, r4, r5, lr}
 800dec2:	4d07      	ldr	r5, [pc, #28]	@ (800dee0 <_kill_r+0x20>)
 800dec4:	2300      	movs	r3, #0
 800dec6:	4604      	mov	r4, r0
 800dec8:	4608      	mov	r0, r1
 800deca:	4611      	mov	r1, r2
 800decc:	602b      	str	r3, [r5, #0]
 800dece:	f7f3 fc5f 	bl	8001790 <_kill>
 800ded2:	1c43      	adds	r3, r0, #1
 800ded4:	d102      	bne.n	800dedc <_kill_r+0x1c>
 800ded6:	682b      	ldr	r3, [r5, #0]
 800ded8:	b103      	cbz	r3, 800dedc <_kill_r+0x1c>
 800deda:	6023      	str	r3, [r4, #0]
 800dedc:	bd38      	pop	{r3, r4, r5, pc}
 800dede:	bf00      	nop
 800dee0:	20001730 	.word	0x20001730

0800dee4 <_getpid_r>:
 800dee4:	f7f3 bc4c 	b.w	8001780 <_getpid>

0800dee8 <__swhatbuf_r>:
 800dee8:	b570      	push	{r4, r5, r6, lr}
 800deea:	460c      	mov	r4, r1
 800deec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800def0:	2900      	cmp	r1, #0
 800def2:	b096      	sub	sp, #88	@ 0x58
 800def4:	4615      	mov	r5, r2
 800def6:	461e      	mov	r6, r3
 800def8:	da0d      	bge.n	800df16 <__swhatbuf_r+0x2e>
 800defa:	89a3      	ldrh	r3, [r4, #12]
 800defc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df00:	f04f 0100 	mov.w	r1, #0
 800df04:	bf14      	ite	ne
 800df06:	2340      	movne	r3, #64	@ 0x40
 800df08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df0c:	2000      	movs	r0, #0
 800df0e:	6031      	str	r1, [r6, #0]
 800df10:	602b      	str	r3, [r5, #0]
 800df12:	b016      	add	sp, #88	@ 0x58
 800df14:	bd70      	pop	{r4, r5, r6, pc}
 800df16:	466a      	mov	r2, sp
 800df18:	f000 f848 	bl	800dfac <_fstat_r>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	dbec      	blt.n	800defa <__swhatbuf_r+0x12>
 800df20:	9901      	ldr	r1, [sp, #4]
 800df22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df2a:	4259      	negs	r1, r3
 800df2c:	4159      	adcs	r1, r3
 800df2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df32:	e7eb      	b.n	800df0c <__swhatbuf_r+0x24>

0800df34 <__smakebuf_r>:
 800df34:	898b      	ldrh	r3, [r1, #12]
 800df36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df38:	079d      	lsls	r5, r3, #30
 800df3a:	4606      	mov	r6, r0
 800df3c:	460c      	mov	r4, r1
 800df3e:	d507      	bpl.n	800df50 <__smakebuf_r+0x1c>
 800df40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df44:	6023      	str	r3, [r4, #0]
 800df46:	6123      	str	r3, [r4, #16]
 800df48:	2301      	movs	r3, #1
 800df4a:	6163      	str	r3, [r4, #20]
 800df4c:	b003      	add	sp, #12
 800df4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df50:	ab01      	add	r3, sp, #4
 800df52:	466a      	mov	r2, sp
 800df54:	f7ff ffc8 	bl	800dee8 <__swhatbuf_r>
 800df58:	9f00      	ldr	r7, [sp, #0]
 800df5a:	4605      	mov	r5, r0
 800df5c:	4639      	mov	r1, r7
 800df5e:	4630      	mov	r0, r6
 800df60:	f7fe febe 	bl	800cce0 <_malloc_r>
 800df64:	b948      	cbnz	r0, 800df7a <__smakebuf_r+0x46>
 800df66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df6a:	059a      	lsls	r2, r3, #22
 800df6c:	d4ee      	bmi.n	800df4c <__smakebuf_r+0x18>
 800df6e:	f023 0303 	bic.w	r3, r3, #3
 800df72:	f043 0302 	orr.w	r3, r3, #2
 800df76:	81a3      	strh	r3, [r4, #12]
 800df78:	e7e2      	b.n	800df40 <__smakebuf_r+0xc>
 800df7a:	89a3      	ldrh	r3, [r4, #12]
 800df7c:	6020      	str	r0, [r4, #0]
 800df7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df82:	81a3      	strh	r3, [r4, #12]
 800df84:	9b01      	ldr	r3, [sp, #4]
 800df86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df8a:	b15b      	cbz	r3, 800dfa4 <__smakebuf_r+0x70>
 800df8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df90:	4630      	mov	r0, r6
 800df92:	f000 f81d 	bl	800dfd0 <_isatty_r>
 800df96:	b128      	cbz	r0, 800dfa4 <__smakebuf_r+0x70>
 800df98:	89a3      	ldrh	r3, [r4, #12]
 800df9a:	f023 0303 	bic.w	r3, r3, #3
 800df9e:	f043 0301 	orr.w	r3, r3, #1
 800dfa2:	81a3      	strh	r3, [r4, #12]
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	431d      	orrs	r5, r3
 800dfa8:	81a5      	strh	r5, [r4, #12]
 800dfaa:	e7cf      	b.n	800df4c <__smakebuf_r+0x18>

0800dfac <_fstat_r>:
 800dfac:	b538      	push	{r3, r4, r5, lr}
 800dfae:	4d07      	ldr	r5, [pc, #28]	@ (800dfcc <_fstat_r+0x20>)
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	4608      	mov	r0, r1
 800dfb6:	4611      	mov	r1, r2
 800dfb8:	602b      	str	r3, [r5, #0]
 800dfba:	f7f3 fc49 	bl	8001850 <_fstat>
 800dfbe:	1c43      	adds	r3, r0, #1
 800dfc0:	d102      	bne.n	800dfc8 <_fstat_r+0x1c>
 800dfc2:	682b      	ldr	r3, [r5, #0]
 800dfc4:	b103      	cbz	r3, 800dfc8 <_fstat_r+0x1c>
 800dfc6:	6023      	str	r3, [r4, #0]
 800dfc8:	bd38      	pop	{r3, r4, r5, pc}
 800dfca:	bf00      	nop
 800dfcc:	20001730 	.word	0x20001730

0800dfd0 <_isatty_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	4d06      	ldr	r5, [pc, #24]	@ (800dfec <_isatty_r+0x1c>)
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	4608      	mov	r0, r1
 800dfda:	602b      	str	r3, [r5, #0]
 800dfdc:	f7f3 fc48 	bl	8001870 <_isatty>
 800dfe0:	1c43      	adds	r3, r0, #1
 800dfe2:	d102      	bne.n	800dfea <_isatty_r+0x1a>
 800dfe4:	682b      	ldr	r3, [r5, #0]
 800dfe6:	b103      	cbz	r3, 800dfea <_isatty_r+0x1a>
 800dfe8:	6023      	str	r3, [r4, #0]
 800dfea:	bd38      	pop	{r3, r4, r5, pc}
 800dfec:	20001730 	.word	0x20001730

0800dff0 <sqrt>:
 800dff0:	b538      	push	{r3, r4, r5, lr}
 800dff2:	ed2d 8b02 	vpush	{d8}
 800dff6:	ec55 4b10 	vmov	r4, r5, d0
 800dffa:	f000 f825 	bl	800e048 <__ieee754_sqrt>
 800dffe:	4622      	mov	r2, r4
 800e000:	462b      	mov	r3, r5
 800e002:	4620      	mov	r0, r4
 800e004:	4629      	mov	r1, r5
 800e006:	eeb0 8a40 	vmov.f32	s16, s0
 800e00a:	eef0 8a60 	vmov.f32	s17, s1
 800e00e:	f7f2 fd8d 	bl	8000b2c <__aeabi_dcmpun>
 800e012:	b990      	cbnz	r0, 800e03a <sqrt+0x4a>
 800e014:	2200      	movs	r2, #0
 800e016:	2300      	movs	r3, #0
 800e018:	4620      	mov	r0, r4
 800e01a:	4629      	mov	r1, r5
 800e01c:	f7f2 fd5e 	bl	8000adc <__aeabi_dcmplt>
 800e020:	b158      	cbz	r0, 800e03a <sqrt+0x4a>
 800e022:	f7fd ff6d 	bl	800bf00 <__errno>
 800e026:	2321      	movs	r3, #33	@ 0x21
 800e028:	6003      	str	r3, [r0, #0]
 800e02a:	2200      	movs	r2, #0
 800e02c:	2300      	movs	r3, #0
 800e02e:	4610      	mov	r0, r2
 800e030:	4619      	mov	r1, r3
 800e032:	f7f2 fc0b 	bl	800084c <__aeabi_ddiv>
 800e036:	ec41 0b18 	vmov	d8, r0, r1
 800e03a:	eeb0 0a48 	vmov.f32	s0, s16
 800e03e:	eef0 0a68 	vmov.f32	s1, s17
 800e042:	ecbd 8b02 	vpop	{d8}
 800e046:	bd38      	pop	{r3, r4, r5, pc}

0800e048 <__ieee754_sqrt>:
 800e048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	4a68      	ldr	r2, [pc, #416]	@ (800e1f0 <__ieee754_sqrt+0x1a8>)
 800e04e:	ec55 4b10 	vmov	r4, r5, d0
 800e052:	43aa      	bics	r2, r5
 800e054:	462b      	mov	r3, r5
 800e056:	4621      	mov	r1, r4
 800e058:	d110      	bne.n	800e07c <__ieee754_sqrt+0x34>
 800e05a:	4622      	mov	r2, r4
 800e05c:	4620      	mov	r0, r4
 800e05e:	4629      	mov	r1, r5
 800e060:	f7f2 faca 	bl	80005f8 <__aeabi_dmul>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	4620      	mov	r0, r4
 800e06a:	4629      	mov	r1, r5
 800e06c:	f7f2 f90e 	bl	800028c <__adddf3>
 800e070:	4604      	mov	r4, r0
 800e072:	460d      	mov	r5, r1
 800e074:	ec45 4b10 	vmov	d0, r4, r5
 800e078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07c:	2d00      	cmp	r5, #0
 800e07e:	dc0e      	bgt.n	800e09e <__ieee754_sqrt+0x56>
 800e080:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e084:	4322      	orrs	r2, r4
 800e086:	d0f5      	beq.n	800e074 <__ieee754_sqrt+0x2c>
 800e088:	b19d      	cbz	r5, 800e0b2 <__ieee754_sqrt+0x6a>
 800e08a:	4622      	mov	r2, r4
 800e08c:	4620      	mov	r0, r4
 800e08e:	4629      	mov	r1, r5
 800e090:	f7f2 f8fa 	bl	8000288 <__aeabi_dsub>
 800e094:	4602      	mov	r2, r0
 800e096:	460b      	mov	r3, r1
 800e098:	f7f2 fbd8 	bl	800084c <__aeabi_ddiv>
 800e09c:	e7e8      	b.n	800e070 <__ieee754_sqrt+0x28>
 800e09e:	152a      	asrs	r2, r5, #20
 800e0a0:	d115      	bne.n	800e0ce <__ieee754_sqrt+0x86>
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	e009      	b.n	800e0ba <__ieee754_sqrt+0x72>
 800e0a6:	0acb      	lsrs	r3, r1, #11
 800e0a8:	3a15      	subs	r2, #21
 800e0aa:	0549      	lsls	r1, r1, #21
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d0fa      	beq.n	800e0a6 <__ieee754_sqrt+0x5e>
 800e0b0:	e7f7      	b.n	800e0a2 <__ieee754_sqrt+0x5a>
 800e0b2:	462a      	mov	r2, r5
 800e0b4:	e7fa      	b.n	800e0ac <__ieee754_sqrt+0x64>
 800e0b6:	005b      	lsls	r3, r3, #1
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	02dc      	lsls	r4, r3, #11
 800e0bc:	d5fb      	bpl.n	800e0b6 <__ieee754_sqrt+0x6e>
 800e0be:	1e44      	subs	r4, r0, #1
 800e0c0:	1b12      	subs	r2, r2, r4
 800e0c2:	f1c0 0420 	rsb	r4, r0, #32
 800e0c6:	fa21 f404 	lsr.w	r4, r1, r4
 800e0ca:	4323      	orrs	r3, r4
 800e0cc:	4081      	lsls	r1, r0
 800e0ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0d2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e0d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0da:	07d2      	lsls	r2, r2, #31
 800e0dc:	bf5c      	itt	pl
 800e0de:	005b      	lslpl	r3, r3, #1
 800e0e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e0e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e0e8:	bf58      	it	pl
 800e0ea:	0049      	lslpl	r1, r1, #1
 800e0ec:	2600      	movs	r6, #0
 800e0ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e0f2:	106d      	asrs	r5, r5, #1
 800e0f4:	0049      	lsls	r1, r1, #1
 800e0f6:	2016      	movs	r0, #22
 800e0f8:	4632      	mov	r2, r6
 800e0fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e0fe:	1917      	adds	r7, r2, r4
 800e100:	429f      	cmp	r7, r3
 800e102:	bfde      	ittt	le
 800e104:	193a      	addle	r2, r7, r4
 800e106:	1bdb      	suble	r3, r3, r7
 800e108:	1936      	addle	r6, r6, r4
 800e10a:	0fcf      	lsrs	r7, r1, #31
 800e10c:	3801      	subs	r0, #1
 800e10e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e112:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e116:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e11a:	d1f0      	bne.n	800e0fe <__ieee754_sqrt+0xb6>
 800e11c:	4604      	mov	r4, r0
 800e11e:	2720      	movs	r7, #32
 800e120:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e124:	429a      	cmp	r2, r3
 800e126:	eb00 0e0c 	add.w	lr, r0, ip
 800e12a:	db02      	blt.n	800e132 <__ieee754_sqrt+0xea>
 800e12c:	d113      	bne.n	800e156 <__ieee754_sqrt+0x10e>
 800e12e:	458e      	cmp	lr, r1
 800e130:	d811      	bhi.n	800e156 <__ieee754_sqrt+0x10e>
 800e132:	f1be 0f00 	cmp.w	lr, #0
 800e136:	eb0e 000c 	add.w	r0, lr, ip
 800e13a:	da42      	bge.n	800e1c2 <__ieee754_sqrt+0x17a>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	db40      	blt.n	800e1c2 <__ieee754_sqrt+0x17a>
 800e140:	f102 0801 	add.w	r8, r2, #1
 800e144:	1a9b      	subs	r3, r3, r2
 800e146:	458e      	cmp	lr, r1
 800e148:	bf88      	it	hi
 800e14a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e14e:	eba1 010e 	sub.w	r1, r1, lr
 800e152:	4464      	add	r4, ip
 800e154:	4642      	mov	r2, r8
 800e156:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e15a:	3f01      	subs	r7, #1
 800e15c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e160:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e164:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e168:	d1dc      	bne.n	800e124 <__ieee754_sqrt+0xdc>
 800e16a:	4319      	orrs	r1, r3
 800e16c:	d01b      	beq.n	800e1a6 <__ieee754_sqrt+0x15e>
 800e16e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e1f4 <__ieee754_sqrt+0x1ac>
 800e172:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e1f8 <__ieee754_sqrt+0x1b0>
 800e176:	e9da 0100 	ldrd	r0, r1, [sl]
 800e17a:	e9db 2300 	ldrd	r2, r3, [fp]
 800e17e:	f7f2 f883 	bl	8000288 <__aeabi_dsub>
 800e182:	e9da 8900 	ldrd	r8, r9, [sl]
 800e186:	4602      	mov	r2, r0
 800e188:	460b      	mov	r3, r1
 800e18a:	4640      	mov	r0, r8
 800e18c:	4649      	mov	r1, r9
 800e18e:	f7f2 fcaf 	bl	8000af0 <__aeabi_dcmple>
 800e192:	b140      	cbz	r0, 800e1a6 <__ieee754_sqrt+0x15e>
 800e194:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e198:	e9da 0100 	ldrd	r0, r1, [sl]
 800e19c:	e9db 2300 	ldrd	r2, r3, [fp]
 800e1a0:	d111      	bne.n	800e1c6 <__ieee754_sqrt+0x17e>
 800e1a2:	3601      	adds	r6, #1
 800e1a4:	463c      	mov	r4, r7
 800e1a6:	1072      	asrs	r2, r6, #1
 800e1a8:	0863      	lsrs	r3, r4, #1
 800e1aa:	07f1      	lsls	r1, r6, #31
 800e1ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e1b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e1b4:	bf48      	it	mi
 800e1b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e1ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e1be:	4618      	mov	r0, r3
 800e1c0:	e756      	b.n	800e070 <__ieee754_sqrt+0x28>
 800e1c2:	4690      	mov	r8, r2
 800e1c4:	e7be      	b.n	800e144 <__ieee754_sqrt+0xfc>
 800e1c6:	f7f2 f861 	bl	800028c <__adddf3>
 800e1ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	4640      	mov	r0, r8
 800e1d4:	4649      	mov	r1, r9
 800e1d6:	f7f2 fc81 	bl	8000adc <__aeabi_dcmplt>
 800e1da:	b120      	cbz	r0, 800e1e6 <__ieee754_sqrt+0x19e>
 800e1dc:	1ca0      	adds	r0, r4, #2
 800e1de:	bf08      	it	eq
 800e1e0:	3601      	addeq	r6, #1
 800e1e2:	3402      	adds	r4, #2
 800e1e4:	e7df      	b.n	800e1a6 <__ieee754_sqrt+0x15e>
 800e1e6:	1c63      	adds	r3, r4, #1
 800e1e8:	f023 0401 	bic.w	r4, r3, #1
 800e1ec:	e7db      	b.n	800e1a6 <__ieee754_sqrt+0x15e>
 800e1ee:	bf00      	nop
 800e1f0:	7ff00000 	.word	0x7ff00000
 800e1f4:	20000350 	.word	0x20000350
 800e1f8:	20000348 	.word	0x20000348

0800e1fc <_init>:
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	bf00      	nop
 800e200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e202:	bc08      	pop	{r3}
 800e204:	469e      	mov	lr, r3
 800e206:	4770      	bx	lr

0800e208 <_fini>:
 800e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20a:	bf00      	nop
 800e20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20e:	bc08      	pop	{r3}
 800e210:	469e      	mov	lr, r3
 800e212:	4770      	bx	lr
